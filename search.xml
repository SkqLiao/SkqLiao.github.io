<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round &amp;#35;716 (Div. 2) 总结&amp;题解</title>
    <url>/2021/04/20/cf-1514/</url>
    <content><![CDATA[<p>晚上在上强化学习技术与应用时，无意间发现九点半有一场Div 2的CF，一看时间还挺合适，就报名了。</p>
<p>然而没想到半年过去了，打Div 2还是掉分。。</p>
<p>upd: 喜提rank2306、rating -50。</p>
<h3 id="A-Perfectly-Imperfect-Array"><a href="#A-Perfectly-Imperfect-Array" class="headerlink" title="A - Perfectly Imperfect Array"></a><a href="https://codeforces.com/contest/1514/problem/A">A - Perfectly Imperfect Array</a></h3><div class="note info"><p>给定序列，问其中是否存在一个子序列，使得它的乘积不是完全平方数。</p>
</div>

<p>若序列存在一个数不是完全平方数，则存在（该数），否则不存在（完全平方数的乘积还是完全平方数）。</p>
<p>21:36 PP，喜提498分。本以为是个良好的开局，没想到竟是巅峰……</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">int</span> y = <span class="built_in">sqrt</span>(x);</span><br><span class="line">            <span class="keyword">if</span> (y * y != x) flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-AND-0-Sum-Big"><a href="#B-AND-0-Sum-Big" class="headerlink" title="B - AND 0, Sum Big"></a><a href="https://codeforces.com/contest/1514/problem/B">B - AND 0, Sum Big</a></h3><div class="note info"><p>给定 $n$ 和 $k$，求有多少个长为 $n$ 的序列 $A[1\cdots n]$，满足 $A_i\in [0,2^k)$，所有数的AND值为$0$，且 $\sum{A_i}$ 最大。</p>
</div>

<p>一直在推式子，但是我对和的最大值的认识是错的，因此第二个样例死都过不去。几十分钟过去了，决定暴力DFS找规律。结果一下就找到了，答案是 $n^k$。果然我还是再一次高估了我的数学水平，再说作为Div. 2 B，规律肯定不难找，又naive了。</p>
<p>原理是这样的。由于所有数的AND为 $0$，因此对于二进制的每一位，都至少有一个数在这一位是 $0$。又因为要和最大，因此是每一位恰好有一个数是 $0$。一共有 $k$ 位，每位有 $n$ 个数可选择，因此是 $n^k$。</p>
<p>于是本题在 22:23 才过，这波就完全离谱。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">poww</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">poww</span>(N, K));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-Product-1-Modulo-N"><a href="#C-Product-1-Modulo-N" class="headerlink" title="C - Product 1 Modulo N"></a><a href="https://codeforces.com/contest/1514/problem/C">C - Product 1 Modulo N</a></h3><div class="note info"><p>在序列 $1,2,\cdots, n$ 中找到最长子序列 $a_i$，使得 $\prod{a_i}\bmod n=1$。</p>
<p>$n\leq 10^5$</p>
</div>

<p>根据乘法逆元的知识，若$a\times b\bmod{n}=1$，必然满足 $gcd(a,n)=gcd(b,n)=1$。</p>
<p>因此 $\forall gcd(a_i,n)=1$。找到 $[1,n]$ 所有满足 $gcd(i,n)=1$ 的 $i$，若它们的乘积是 $x(x\not =1)$，则去掉 $x$ 即可得到结果，反之全部输出。</p>
<p>其实我早就想到这儿了，我观察到乘积要么是 $1$ 要么是 $n-1$，于是我判定了若乘积为 $n-1$，则删掉 $n-1$。但是一直WA on test 3。懵逼途中，突然意识到当 $n=2$ 的时候，$n-1=1$，我的特判使得我输出了 $0$。</p>
<p>于是在贡献了四发Wrong answer on pretest 3后，最终在23:02才过。</p>
<p>我一看排名到了2k+，我就知道这次掉分估计是跑不掉了，除非做出来D。</p>
<p>然而屋漏偏逢连夜雨，此时理教楼又开始赶人了，我被迫收拾东西，最终搬到了更靠近大门的104。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !y ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1\n1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(i, N) == <span class="number">1</span>) s.<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : s) res = res * a % N;</span><br><span class="line">    <span class="keyword">if</span> (res == N - <span class="number">1</span>) s.<span class="built_in">erase</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)s.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : s) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger"><p><strong>Bonus task: $n\leq 10^{12}$ 的做法</strong></p>
</div>

<p>坑代填。</p>
<h3 id="D-Cut-and-Stick"><a href="#D-Cut-and-Stick" class="headerlink" title="D - Cut and Stick"></a><a href="https://codeforces.com/contest/1514/problem/D">D - Cut and Stick</a></h3><div class="note info"><p>给定长为 $n$ 的序列和 $m$ 个询问。每次询问区间 $[l,r]$ 至少拆分成几个子区间，使得每个子区间中不存在出现次数超过区间长度一半（向上取整）的数。</p>
<p>$n,m\leq 3\times 10^5$</p>
</div>

<p>首先不难发现，一个区间中最多出现一个这样的数，而这个数也是区间的众数。</p>
<p>因此第一步就是求区间众数的出现次数。这个可以用莫队算法维护，复杂度 $O(n\sqrt{n})$。</p>
<p>然后考虑如何拆分。</p>
<p>若 $[l,r]$ 中众数的出现次数不到长度的一半，则输出 $1$，即不用拆分。</p>
<p>若区间众数出现的次数超过一半，记为 $f$ 次，设区间长度为 $l$。</p>
<p>则有结论，该区间最少分成 $2f - l$ 个子区间。</p>
<p>这个证明其实很简单，虽然我考场上还在想着怎么二分去拆。。</p>
<p>对于一个合法区间，众数 $x$ 的出现次数至多比其他数多 $1$。而在原区间中，众数的出现次数比其他数多了 $f-(l-f)=2f-l$。</p>
<p>因此需要至少划分出 $2f-l$ 个子区间才能满足条件。</p>
<p>而这个下限是一定可以取到的。构造方法是，从左往右，每次找到一个非 $x$ 的数，计数器=1，然后向两边为遍历到的数延伸，遇到 $x$ -1，反之+1。当计数器为-1时，划分区间。如此下来，所有非 $x$ 数都有区间，且每个区间都满足 $x$ 比其他数的出现次数大 $1$。而对于剩下的 $x$，每个数一个区间。此时恰好 $2f-l$ 个区间。</p>
<p>因此划分的复杂度为 $O(m)$，总复杂度为 $O(n\sqrt{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], Pos[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pos[l] == Pos[x.l] ? (r == x.r ? <span class="number">0</span> : (Pos[l] &amp; <span class="number">1</span>) ^ (r &lt; x.r)) : l &lt; x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; B[MAXN];</span><br><span class="line"><span class="keyword">int</span> mx, Cnt[MAXN], Num[MAXN], Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;cx = Cnt[x];</span><br><span class="line">    --Num[cx];</span><br><span class="line">    ++Num[++cx];</span><br><span class="line">    mx = <span class="built_in">max</span>(mx, cx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;cx = Cnt[x];</span><br><span class="line">    <span class="keyword">if</span> (mx == cx &amp;&amp; Num[cx] == <span class="number">1</span>) --mx;</span><br><span class="line">    --Num[cx];</span><br><span class="line">    ++Num[--cx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">int</span> sz = N / <span class="built_in">sqrt</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">        Pos[i] = i / sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;B[i].l, &amp;B[i].r);</span><br><span class="line">        B[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(B + <span class="number">1</span>, B + M + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; B[i].l) <span class="built_in">add</span>(A[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; B[i].r) <span class="built_in">add</span>(A[++r]);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; B[i].r) <span class="built_in">del</span>(A[r--]);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; B[i].l) <span class="built_in">del</span>(A[l++]);</span><br><span class="line">        <span class="keyword">if</span> (mx &lt;= (B[i].r - B[i].l + <span class="number">2</span>) / <span class="number">2</span>) Ans[B[i].id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> Ans[B[i].id] = mx * <span class="number">2</span> - (B[i].r - B[i].l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger no-icon"><p><strong>Bonus task: $O(n\log{n})$ 做法​</strong></p>
</div>

<p>坑代填。</p>
<h3 id="E-Baby-Ehab’s-Hyper-Apartment"><a href="#E-Baby-Ehab’s-Hyper-Apartment" class="headerlink" title="E - Baby Ehab’s Hyper Apartment"></a><a href="https://codeforces.com/contest/1514/problem/E">E - Baby Ehab’s Hyper Apartment</a></h3><p>还不会做，坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>莫队(Mo&#39;s Algorithm)</tag>
      </tags>
  </entry>
  <entry>
    <title>CF EDU - Disjoint Sets Union 学习记录</title>
    <url>/2021/05/01/ITMO-Disjoint-Sets-Union/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ITMO Academy&amp;#58; pilot course</category>
      </categories>
      <tags>
        <tag>disjoint sets union(并查集)</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 199 总结&amp;题解</title>
    <url>/2021/04/24/abc-199/</url>
    <content><![CDATA[<p>下午打完天梯赛，似乎最后一题数据假了，要重测。。</p>
<p>智能体对抗赛的见面会还没听完，ABC就开始了。</p>
<p>整体难度不大，可惜太久不写矩阵快速幂了，完全没有那个想法，于是F题没想出来。</p>
<p>最后rank 275，rating+901。</p>
<p>ABC题太简单了，就只放代码，不写题解了。</p>
<h3 id="A-Square-Inequality"><a href="#A-Square-Inequality" class="headerlink" title="A. Square Inequality"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_a">A. Square Inequality</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 19:52:29</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (a * a + b * b &lt; c * c) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-Intersection"><a href="#B-Intersection" class="headerlink" title="B. Intersection"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_b">B. Intersection</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 19:53:27</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> L = INT_MIN, R = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        L = <span class="built_in">max</span>(L, a[i]);</span><br><span class="line">        R = <span class="built_in">min</span>(R, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(<span class="number">0</span>, R - L + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-IPFL"><a href="#C-IPFL" class="headerlink" title="C. IPFL"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_c">C. IPFL</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 23:43:50</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line">string S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; S &gt;&gt; Q;</span><br><span class="line">    S = <span class="string">&quot; &quot;</span> + S;</span><br><span class="line">    <span class="keyword">int</span> t, a, b, f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) f ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; N) a -= N;</span><br><span class="line">                <span class="keyword">else</span> a += N;</span><br><span class="line">                <span class="keyword">if</span> (b &gt; N) b -= N;</span><br><span class="line">                <span class="keyword">else</span> b += N;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(S[a], S[b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; S.<span class="built_in">substr</span>(N + <span class="number">1</span>, <span class="number">2</span> * N) &lt;&lt; S.<span class="built_in">substr</span>(<span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; S.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">2</span> * N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-RGB-Coloring-2"><a href="#D-RGB-Coloring-2" class="headerlink" title="D. RGB Coloring 2"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_d">D. RGB Coloring 2</a></h3><div class="note info"><p>给一张图的所有点染色，一共有三种颜色可选，要求每条边上的两个点颜色不同。求有多少种染色方法。</p>
<p>$N\leq 20$</p>
</div>

<p>若有 $k$ 个孤立的点，则答案 $\times 3^k$。</p>
<p>对于每个连通块，暴力求染色数即可，复杂度 $O(2^n\times n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:09:25</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_d</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> C[MAXN], D[MAXN][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (D[v[x]][i]) <span class="keyword">continue</span>;</span><br><span class="line">        C[v[x]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : G[v[x]]) ++D[u][i];</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : G[v[x]]) --D[u][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i].<span class="built_in">empty</span>()) base *= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> v.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, base);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, base * ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Permutation"><a href="#E-Permutation" class="headerlink" title="E. Permutation"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_e">E. Permutation</a></h3><div class="note info"><p>求有多少种 $1\sim n$ 的排列，要求满足 $m$ 个条件。第 $i$ 个条件是，排列的前 $x_i$ 个数中至多有 $z_i$ 个数不大于 $y_i$。</p>
<p>$n\leq 18,m\leq 100$</p>
</div>

<p>发现前缀只要确定选择哪些数后，其具体排列方式不影响后面的选择，结合数据范围想到状压DP。</p>
<p>把所有条件 $(y_i,z_i)$ 都挂在 $x_i$ 处。二进制状压当前选择的数的集合，然后枚举当前位置放的数，如果满足条件就转移。复杂度 $O(2^n\times m)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:20:40</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">bitset&lt;MAXN&gt; bt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[<span class="number">1</span> &lt;&lt; MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(&#123;y - <span class="number">1</span>, z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; N); ++i) &#123;</span><br><span class="line">        bt = i;</span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bt[j]) tmp.<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bt[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : v[tmp.<span class="built_in">size</span>() + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="built_in">upper_bound</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), x.first) - tmp.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="keyword">if</span> (num &gt; x.second || (num == x.second &amp;&amp; j &lt;= x.first)) &#123;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) F[i | (<span class="number">1</span> &lt;&lt; j)] += F[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, F[(<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="F-Graph-Smoothing"><a href="#F-Graph-Smoothing" class="headerlink" title="F. Graph Smoothing"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_f">F. Graph Smoothing</a></h3><div class="note info"><p>在一张 $n$ 个点 $m$ 条边的图上，初始状态每个点有权值 $a_i$。每次随机选择一条边 $(u,v)$，将 $a_u,a_v$ 都修改为 $\frac{a_u+a_v}{2}$。求 $K$ 次操作后，每个点权值的期望值。</p>
<p>$n\leq 100, k\leq 10^9$</p>
</div>

<p>我们可以构造出一个 $n\times n$ 的矩阵 $p$ 来表示每次操作时，任意每个点对之间的转移概率，使得 $a’=a\times p$。</p>
<p>具体方法是，若 $u,v$ 之间存在一条边，则 $p[u][v]=p[v][u]=\frac{1}{2m}$，否则为 $0$。</p>
<p>设第 $i$ 个点与 $b_i$ 个点相连，则 $p[i][i]=\frac{m-b_i+\frac{b_i}{2}}{m}$。考虑有 $\frac{m-b_i}{m}$ 的概率不会选中与它相连的边，如此权值不变，有 $\frac{b_i}{m}$ 的概率选中与它相连的边，如此权值减半。</p>
<p>则 $a_k=a\times p^{k-1}$，对 $p$ 做矩阵快速幂，复杂度 $O(n^3\log{k})$。</p>
<p>注意 $k=0$ 时要特判。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:37:33</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> Num[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A[MAXN][MAXN];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span> A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a, c;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(<span class="keyword">const</span> Matrix &amp;x, <span class="keyword">const</span> Matrix &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c.A, <span class="number">0</span>, <span class="keyword">sizeof</span> c.A);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N; ++k) &#123;</span><br><span class="line">                c.A[i][j] = (c.A[i][j] + x.A[i][k] * y.A[k][j] % MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">poww</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">poww</span><span class="params">(Matrix &amp;x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    Matrix res = x;</span><br><span class="line">    <span class="keyword">for</span> (--t; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">if</span> (!K) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">poww</span>(M, MOD - <span class="number">2</span>), two = <span class="built_in">poww</span>(<span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        ++Num[u], ++Num[v];</span><br><span class="line">        a.A[u][v] = a.A[v][u] = p * two % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        a.A[i][i] = p * (M - Num[i] + two * Num[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">poww</span>(a, K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            x = (x + A[j] * a.A[i][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>矩阵快速幂(fast exponentiation)</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;717 (Div. 2) 总结&amp;题解</title>
    <url>/2021/04/22/cf-1516/</url>
    <content><![CDATA[<p>又看到了一场CF，还是在九点半，抱着一雪前耻的心态，于是我又报名了。作者居然还是上次的<strong>mohammedehab2002</strong>。</p>
<p>就说同样是2002年的，为什么就我这么菜呐？</p>
<p>这次rank 762，rating +40。</p>
<h3 id="A-Perfectly-Imperfect-Array"><a href="#A-Perfectly-Imperfect-Array" class="headerlink" title="A - Perfectly Imperfect Array"></a><a href="https://codeforces.com/contest/1514/problem/A">A - Perfectly Imperfect Array</a></h3><p>莫名其妙WA了一发，真佛了。。</p>
<div class="note info"><p>给一个长为 $n$ 的序列，每次操作可以选择两个数，使一个+1,另一个-1，但要保证序列中的数时刻非负。</p>
<p>求至多 $k$ 次操作后，能得到的字典序最小的序列。</p>
</div>

<p>每次操作都使最后一个数+1，-1则从第一个数开始，减到 $0$ 就到下一个数。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/A</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> T, N, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line">        v.<span class="built_in">resize</span>(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N &amp;&amp; K; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="built_in">min</span>(v[i], K);</span><br><span class="line">            v[i] -= cur;</span><br><span class="line">            v[N - <span class="number">1</span>] += cur;</span><br><span class="line">            K -= cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-AGAGA-XOOORRR"><a href="#B-AGAGA-XOOORRR" class="headerlink" title="B - AGAGA XOOORRR"></a><a href="https://codeforces.com/contest/1516/problem/B">B - AGAGA XOOORRR</a></h3><div class="note info"><p>给一个长为 $n$ 的序列，每次可以将相邻的两个合并成它们的XOR值，长度-1。求经过若干次操作后，能否得到所有元素相等（序列至少剩下两个数）。</p>
<p>$n\leq 2000$</p>
</div>

<p>贡献了2发WA，才醒悟过来，开始的想法就是错误的。</p>
<p>首先，如果所有元素的XOR为 $0$，那么一定能得到两个相同的数。</p>
<p>若XOR不为零，考虑能否剩下三个相同的数。</p>
<p>我们发现如果能剩下 $x$ 个相同的数，则一定能剩下 $x-2$ 个相同的数（将相邻的三个数合并即可）。因而能剩下奇数个相同的数，等价于能剩下三个相同的数。</p>
<p>那么三个数应该分别为 $A[1]\oplus\cdots A[l]$，$A[l+1]\oplus\cdots A[r]$ 和 $A[r+1]\oplus\cdots A[n]$。</p>
<p>因此枚举 $l,r$，判断这三个值是否相同即可，复杂度 $O(n^2)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/B</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">        v.<span class="built_in">resize</span>(N);</span><br><span class="line">        v2.<span class="built_in">resize</span>(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">            v2[i] = v[i];</span><br><span class="line">            <span class="keyword">if</span> (i) v2[i] ^= v2[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!v2.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; N; ++l) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = l; r &lt; N - <span class="number">1</span>; ++r) &#123;</span><br><span class="line">                <span class="keyword">int</span> ll = v2[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> mid = v2[r] ^ v2[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> rr = v2.<span class="built_in">back</span>() ^ v2[r];</span><br><span class="line">                <span class="keyword">if</span> (ll == mid &amp;&amp; mid == rr) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger"><p><strong>Bonus task1: $O(n)$ 解法</strong></p>
</div>

<p>坑代填。</p>
<div class="note danger"><p><strong>Bonus task2: 当要求最终序列剩余至少 $k(k&gt;2)$ 个数的解法</strong></p>
</div>

<p>坑代填。</p>
<h3 id="C-Baby-Ehab-Partitions-Again"><a href="#C-Baby-Ehab-Partitions-Again" class="headerlink" title="C - Baby Ehab Partitions Again"></a><a href="https://codeforces.com/contest/1516/problem/C">C - Baby Ehab Partitions Again</a></h3><div class="note info"><p>给一个长为 $n$ 的序列 $A[1\cdots n]$，求至少删除哪几个数，使它不能被拆分成两个和相等的子序列。</p>
<p>$n\leq 100, 0\leq A[i]\leq 2000$</p>
</div>

<p>久违的1A，拯救了我的排名。。</p>
<p>首先若 $\sum{A[i]}$ 是奇数，答案显然是 $0$，否则跑个背包DP，如果无法凑出 $\frac{\sum{A[i]}}{2}$，则也输出 $0$。</p>
<p>此时 $\sum{A[i]}$ 为偶数。若存在 $A[p]$ 为奇数，则删去 $A[p]$ 后， $\sum{A[i]}$ 为奇数，必然无法拆分。此时答案为 $1$。</p>
<p>此时 $\forall A[i]$ 都是偶数。我们发现若 $A$ 存在一种拆分方法，则 ${\frac{A[i]}{2}}$ 也有相同的拆分方法。因此可以令<code>A[i] /= 2</code> 再重复之前的判断，然后再除以二，直到出现某个数为奇数为止。</p>
<p>可见至多只需要删除一个数。</p>
<p>事实上，记 $g=gcd(A[1],\cdots,A[n])$，则 ${\frac{A[1]}{g},\cdots,\frac{A[n]}{g}}$ 与 $A$ 有相同的解。一定存在某个 $\frac{A[p]}{g}$ 为奇数，即为被删除的数。</p>
<p>复杂度 $O(n\sum{A[i]}+n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/C</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) sum += x;</span><br><span class="line">    <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s[<span class="number">0</span>].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; N; ++i, t ^= <span class="number">1</span>) &#123;</span><br><span class="line">            s[t ^ <span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : s[t]) &#123;</span><br><span class="line">                s[t ^ <span class="number">1</span>].<span class="built_in">insert</span>(x + v[i]);</span><br><span class="line">                s[t ^ <span class="number">1</span>].<span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="keyword">if</span> (x + v[i] == sum / <span class="number">2</span>) flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cur = <span class="number">2</span>; ; cur *= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sum - v[i]) / <span class="number">2</span> % cur) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-Cut"><a href="#D-Cut" class="headerlink" title="D - Cut"></a><a href="https://codeforces.com/contest/1516/problem/D">D - Cut</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $A[1\cdots n]$，有 $m$ 个询问。每次给定区间 $[l,r]$，求 $A[l,r]$ 至少分成几个子区间，使得每个子区间满足 $\prod{A[i]}=lcm(A[i])$。</p>
<p>$n,m,A[i]\leq 10^5$</p>
</div>

<p>对于满足的条件的子区间，显然满足 $\forall \gcd\limits_{i\not =j}(A[i],A[j])=1$。</p>
<p>对于一个查询区间 $A[l,r]$，可以贪心地去求最少划分数。即从 $A[l]$ 开始向右拓展，每次当区间不满足任意两数互质时，另起一个新的区间，直到 $A[r]$ 为止。</p>
<p>也就是说如果左端点 $l$ 确定，则每次划分的子区间都是相同的，而子区间的数量取决于 $A[r]$ 的位置。</p>
<p>因此想到了倍增，预处理出 $f[i][j]$ 表示第 $i$ 个数开始，通过 $2^j$ 个子区间能拓展到的右端点。那么查询即可用 $O(\log{n})$ 的复杂度完成，类似倍增求LCA。</p>
<p>现在的问题变成如何求出以 $A[i]$ 开始第一次拓展到的右端点，即 $f[i][0]$。</p>
<p>从右往左更新。对每个数分解质因数，$g[i]$ 表示质因数 $i$ 上一次出现的位置。</p>
<p>那么 <code>f[i][0]=min(f[i+1][0],g[j]),g[j]=i</code>，其中 $j$ 遍历 $A[i]$ 的所有质因数。</p>
<p>分解质因数的时候，可以采取埃氏筛预处理出每个数的质因数：</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i) v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>但是这仅限于 $A[i]$ 的范围较小时可用。</p>
<p>也可以欧拉筛预处理所有质数，然后暴力拆：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : pri) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % p == <span class="number">0</span>) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(p);</span><br><span class="line">            <span class="keyword">while</span> (x % p == <span class="number">0</span>) x /= p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这样的复杂度高达 $O(\frac{x}{\log{x}})$，我一直没有注意到这一点，直到今天改题的时候TLE on test 22。</p>
<p>正确的做法应该是将 $p$ 枚举到 $\sqrt{x}$ 时退出循环，若此时 $x$ 不是 $1$，则它也是一个质因数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v; v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : pri) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % p == <span class="number">0</span>) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(p);</span><br><span class="line">            <span class="keyword">while</span> (x % p == <span class="number">0</span>) x /= p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p * p &gt; x) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) v.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度 $O(m\log{n}+\frac{n\sqrt{n}}{\log{n}})$ （用Pollard_rho可以做到 $O(m\log{n}+n^{\frac{5}{4}})$）。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/D</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">20</span>][MAXN], Nxt[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            Nxt[i] = N + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; MAXN; j += i) p[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>][N + <span class="number">1</span>] = N + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        F[<span class="number">0</span>][i] = F[<span class="number">0</span>][i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : p[A[i]]) &#123;</span><br><span class="line">            F[<span class="number">0</span>][i] = <span class="built_in">min</span>(F[<span class="number">0</span>][i], Nxt[y]);</span><br><span class="line">            Nxt[y] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">ceil</span>(<span class="built_in">log2</span>(N));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (F[i - <span class="number">1</span>][j] &gt; N) F[i][j] = F[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> F[i][j] = F[i - <span class="number">1</span>][F[i - <span class="number">1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (F[i][l] &lt;= r) &#123;</span><br><span class="line">                ans += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                l = F[i][l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Baby-Ehab-Plays-with-Permutations"><a href="#E-Baby-Ehab-Plays-with-Permutations" class="headerlink" title="E - Baby Ehab Plays with Permutations"></a><a href="https://codeforces.com/contest/1516/problem/E">E - Baby Ehab Plays with Permutations</a></h3><p>还不会做，坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>倍增(binary lifting)</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 108 (Rated for Div. 2) 总结&amp;题解</title>
    <url>/2021/05/01/cf-1519/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>Contest 2050 and Codeforces Round &amp;#35;718 (Div. 1 + Div. 2) 总结&amp;题解</title>
    <url>/2021/04/24/cf-1517/</url>
    <content><![CDATA[<p>晚上困得要死，担心比赛的时候起不来。查了一下发现报名了只要不提交就不掉rating，于是就报名了。</p>
<p>然后就一觉从八点睡到十点半。。。</p>
<h3 id="A-Sum-of-2050"><a href="#A-Sum-of-2050" class="headerlink" title="A - Sum of 2050"></a><a href="https://codeforces.com/contest/1517/problem/A">A - Sum of 2050</a></h3><div class="note info"><p>形如 $2050,2050\times 10,\cdots, 2050\times 10^n$ 都是2050-number。$t$ 组数据，每次输入 $x$，问它能拆成至少多少个2050-number之和，拆不出来输出<code>-1</code>。</p>
</div>

<p>如果 $x$ 不是 $2050$ 的倍数，输出<code>-1</code>。否则就类似求十进制数的各位数之和的做法，区别是这次的底是 $2050$，复杂度 $O(t\log{x})$ 。</p>
<p>针不戳，00:01就pp了，暗示着一个好开头（？）</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/A</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2050</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            ll y = <span class="number">2050</span>;</span><br><span class="line">            <span class="keyword">while</span> (y &lt;= x) y *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                ans += x / y;</span><br><span class="line">                x %= y;</span><br><span class="line">                y /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-Morning-Jogging"><a href="#B-Morning-Jogging" class="headerlink" title="B - Morning Jogging"></a><a href="https://codeforces.com/contest/1517/problem/B">B - Morning Jogging</a></h3><div class="note info"><p>$t$ 组数据。有 $n$ 组数，每组有 $m$ 个数。现在要将每组的 $m$ 个数分别标号为 $1,\cdots m$。则每个编号在每个组都有一个数，记编号 $i$ 在第 $j$ 组的数为 $a_{i,j}$ 。求 $\sum\limits_{i=1}^{m}{\min\limits_{j=1}^{n}{a_{i,j}}}$ 的最小值。 </p>
<p>$1\leq \sum{n},\sum{m}\leq 10^4$</p>
</div>

<p>多组数据不清空，爆零两行泪。</p>
<p>很明显的贪心，用优先队列维护最小值。每次取出这 $n$ 组中的最小值，那它和其他 $n-1$ 个组中的最大值凑成一个编号的 $n$ 个数，如此操作显然会使和最小。</p>
<p>复杂度 $O(n\log{m}+m\log{n})$。</p>
<p>然而多组数据一定要记得对容器清空！！这不，我就忘清空priority_queue了，喜提<code>wa on test 2</code>。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/B</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> N, M, B[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN][MAXN];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Pq;</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">        <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>()) Pq.<span class="built_in">pop</span>(); <span class="comment">//!</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;B[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">sort</span>(B[i] + <span class="number">1</span>, B[i] + M + <span class="number">1</span>);</span><br><span class="line">            Pq.<span class="built_in">push</span>(&#123;-B[i][<span class="number">1</span>], i&#125;);</span><br><span class="line">            R[i] = M;</span><br><span class="line">            L[i] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= M; ++m) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = -Pq.<span class="built_in">top</span>().first, y = Pq.<span class="built_in">top</span>().second; Pq.<span class="built_in">pop</span>();</span><br><span class="line">            Ans[y][m] = x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y != i) Ans[i][m] = B[i][R[i]--];</span><br><span class="line">            &#125;</span><br><span class="line">            Pq.<span class="built_in">push</span>(&#123;-B[y][L[y]++], y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Ans[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-Fillomino-2"><a href="#C-Fillomino-2" class="headerlink" title="C - Fillomino 2"></a><a href="https://codeforces.com/contest/1517/problem/C">C - Fillomino 2</a></h3><div class="note info"><p>有一个 $n\times n$ 的棋盘。输入棋盘的左对角线上的 $n$ 个数，它们组成了一个 $1\sim n$ 的排列。现在要用若干个 $1\sim n$ 填入棋盘左侧的格子（即对角线左侧的格子），要求编号相同的格子联通，且连通块的大小恰好等于其格子的编号。</p>
<p>$n\leq 500$</p>
</div>

<p>思路不难想，但是刚做的时候一直没完全想明白，写了几次被我用随机数据肉眼发现错误后，又改了这一版就过了。。</p>
<p>直观上理解，从对角线向左拓展，右下角的点最难走到，而如果只在对角线附近拓展，可能把其他点的拓展路径阻断（因为一个点的第一步拓展只有向左和向下两种途径）。</p>
<p>因此在对角线上从第一行开始拓展，拓展方式是先向左，若左侧格子已有数，则向下拓展，然后继续向左，直到联通块大小和其格子上的数相同为止。</p>
<p>不过我不会证明其正确性。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/C</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> B[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> &amp;num, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    --num;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">1</span> &amp;&amp; !B[x][y - <span class="number">1</span>]) --y;</span><br><span class="line">        <span class="keyword">else</span> ++x;</span><br><span class="line">        B[x][y] = p;</span><br><span class="line">        --num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;B[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = B[i][i];</span><br><span class="line">        <span class="built_in">move</span>(i, i, num, B[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, B[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-Explorer-Space"><a href="#D-Explorer-Space" class="headerlink" title="D - Explorer Space"></a><a href="https://codeforces.com/contest/1517/problem/D">D - Explorer Space</a></h3><div class="note info"><p>有一个 $n\times m$ 的棋盘上，给定任意两个左右相邻和上下相邻的格子之间的距离。求以每个格子为起点，走恰好 $k$ 步后返回起点的最小距离，若无法回到起点，输出 <code>-1</code>。</p>
<p>$n,m\leq 500,k\leq 20$</p>
</div>

<p>感觉这个比C简单多了。</p>
<p>当 $k$ 为奇数的时候，显然回不到起点，输出<code>-1</code>。</p>
<p>然后我们可以将路径分成两部分，前 $\frac{k}{2}$ 步探索最短路径，而后 $\frac{k}{2}$ 步原路返回。</p>
<p>因此可以DP，令 $f(i,j,k)$ 表示通过 $k$ 步到达 $(i,j)$ 的最小距离，从相邻四个点转移。则点 $(i,j)$ 的答案为 $2\times f(i,j,\frac{k}{2})$。</p>
<p>复杂度 $O(nmk)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/D</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> F[MAXK][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">if</span> (K &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i][j][<span class="number">0</span>]);</span><br><span class="line">            A[i][j + <span class="number">1</span>][<span class="number">2</span>] = A[i][j][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i][j][<span class="number">1</span>]);</span><br><span class="line">            A[i + <span class="number">1</span>][j][<span class="number">3</span>] = A[i][j][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    K /= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(F, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">    <span class="built_in">memset</span>(F[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> F[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= K; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + Dicx[d];</span><br><span class="line">                    <span class="keyword">int</span> y = j + Dicy[d];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; N || y &gt; M) <span class="keyword">continue</span>;</span><br><span class="line">                    F[k][i][j] = <span class="built_in">min</span>(F[k][i][j], F[k - <span class="number">1</span>][x][y] + A[i][j][d]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, F[K][i][j] * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Group-Photo"><a href="#E-Group-Photo" class="headerlink" title="E - Group Photo"></a><a href="https://codeforces.com/contest/1517/problem/E">E - Group Photo</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $a$，现要将 $a$ 分成划两个子序列 $p,q$，要求满足 $\sum{a_{p_i}}&lt;\sum{a_{q_i}}$，且 $p_i-p_{i-1}\leq p_{i+1}-p_i$，$q_i-q_{i-1}\geq q_{i+1}-q_i$。</p>
<p>求有多少种划分方案。</p>
<p>$n\leq 200000$</p>
</div>

<p>其实思路核心都推出来了，但是不太敢交。。</p>
<p>坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>团体程序天梯赛2021 游记&amp;代码</title>
    <url>/2021/04/24/gplt-2021/</url>
    <content><![CDATA[<p>毫无准备就去了，似乎因为选拔赛考的还行于是混进了1队？。。</p>
<p>双机位监考感觉没啥用，手机端上传网速不足1kb/s，这是哪门子监考？。。</p>
<p>听考过的学长说，天梯赛刚开始的时候会特别卡。于是果不其然就崩了，开局十分钟愣是一直在空白的网页上刷新，差评。</p>
<p>不过没想到能实时看到分数和排名，包括个人、团队和学校三个榜，好评。</p>
<p>题除了倒数俩题都很简单，这俩题会单独写一发题解，其他的没必要题解了，就发个代码。</p>
<p><del><mark class="label warning">总分265，除了最后一题5分</mark></del>，其他都是满分，无一血。<mark class="label info">（upd：重测后变成了261，最后一题1分）</mark></p>
<p><del><mark class="label warning">bit1队在最后一分钟rush了一波，喜提团队榜金牌最后一名（比福州大学1队就高了1分）</mark></del>，bit喜提学校榜银牌第一名<del><mark class="label warning">（差了100多分）</mark></del>，skqliao摸了个个人榜金牌。</p>
<mark class="label info">upd：重测后，3-3的5分变1分了。不过在bit1队里，zzq直接了A次此题，lk等变成了7分，而PKU原本30的全挂了。最终bit1队也因此从金尾冲到了金牌第五，福州大学1队也顺势苟入金牌，而PKU1队惨得银牌榜首。 不过BIT的学校排名仍然稳居银牌第一，只是分差从100+变成了70。。</mark>

<h3 id="1-1"><a href="#1-1" class="headerlink" title="1-1"></a>1-1</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;To iterate is human, to recurse divine.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-2"><a href="#1-2" class="headerlink" title="1-2"></a>1-2</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a - b * c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-3"><a href="#1-3" class="headerlink" title="1-3"></a>1-3</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(s) == <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">6</span>; ++i) <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + s[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;20%c%c-%c%c&quot;</span>, s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;19%c%c-%c%c&quot;</span>, s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-4"><a href="#1-4" class="headerlink" title="1-4"></a>1-4</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; M) <span class="built_in">printf</span>(<span class="string">&quot;On Sale! %.1lf\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-5"><a href="#1-5" class="headerlink" title="1-5"></a>1-5</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">23</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[x] &gt; <span class="number">50</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d Yes\n&quot;</span>, A[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d No\n&quot;</span>, A[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-6"><a href="#1-6" class="headerlink" title="1-6"></a>1-6</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, s);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;qiandao&quot;</span>) != string::npos || s.<span class="built_in">find</span>(<span class="string">&quot;easy&quot;</span>) != string::npos) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (M-- == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Wo AK le&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-7"><a href="#1-7" class="headerlink" title="1-7"></a>1-7</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        ++Num[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, Num.<span class="built_in">begin</span>()-&gt;first, Num.<span class="built_in">begin</span>()-&gt;second);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, (--Num.<span class="built_in">end</span>())-&gt;first, (--Num.<span class="built_in">end</span>())-&gt;second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-8"><a href="#1-8" class="headerlink" title="1-8"></a>1-8</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) v.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;v[<span class="number">1</span>], &amp;v[<span class="number">2</span>], &amp;N);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (v.<span class="built_in">size</span>() &lt;= N) &#123;</span><br><span class="line">        <span class="built_in">add</span>(v[cur] * v[cur - <span class="number">1</span>]);</span><br><span class="line">        ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, v[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">char</span>&gt; Q[MAXN];</span><br><span class="line">string s;</span><br><span class="line">stack&lt;<span class="keyword">char</span>&gt; stk;</span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">    s.<span class="built_in">push_back</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">    stk.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) Q[i].<span class="built_in">push</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) &amp;&amp; ~x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[x].<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">size</span>() == K) <span class="built_in">pop</span>();</span><br><span class="line">            stk.<span class="built_in">push</span>(Q[x].<span class="built_in">front</span>());</span><br><span class="line">            Q[x].<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"><span class="keyword">int</span> Nxt[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (G[x].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> hx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">        <span class="keyword">int</span> hv = <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (hv &gt; hx) &#123;</span><br><span class="line">            hx = hv;</span><br><span class="line">            Nxt[x] = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hv == hx) &#123;</span><br><span class="line">            Nxt[x] = <span class="built_in">min</span>(Nxt[x], v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hx + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="built_in">memset</span>(Fa, <span class="number">-1</span>, <span class="keyword">sizeof</span> Fa);</span><br><span class="line">    <span class="built_in">memset</span>(Nxt, <span class="number">-1</span>, <span class="keyword">sizeof</span> Nxt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        G[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : G[i]) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            Fa[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Fa[i] == <span class="number">-1</span>) rt = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(rt) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; rt;</span><br><span class="line">    rt = Nxt[rt];</span><br><span class="line">    <span class="keyword">while</span> (~rt) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; rt;</span><br><span class="line">        rt = Nxt[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-3"><a href="#2-3" class="headerlink" title="2-3"></a>2-3</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != x.num) <span class="keyword">return</span> num &gt; x.num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] != x.v[i]) <span class="keyword">return</span> v[i] &lt; x.v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a;</span><br><span class="line">vector&lt;Node&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod1 = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod2 = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">set&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; Ext;</span><br><span class="line">map&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">hash1</span><span class="params">(Node &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        a = (a * <span class="number">101</span> + x.v[i]) % mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">hash2</span><span class="params">(Node &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        a = (a * <span class="number">103</span> + x.v[i]) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    a.v.<span class="built_in">resize</span>(M);</span><br><span class="line">    a.num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a.v) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="built_in">hash1</span>(a);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> y = <span class="built_in">hash2</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (Ext.<span class="built_in">find</span>(&#123;x, y&#125;) == Ext.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            Ext.<span class="built_in">insert</span>(&#123;x, y&#125;);</span><br><span class="line">            Map[&#123;x, y&#125;] = A.<span class="built_in">size</span>();</span><br><span class="line">            A.<span class="built_in">push_back</span>(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++A[Map[&#123;x, y&#125;]].num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)A.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : A) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a.num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a.v[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, a.v[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-4"><a href="#2-4" class="headerlink" title="2-4"></a>2-4</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Save;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, n; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        v[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v[i]) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        --y;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            now = v[now][y];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            Save[y] = now;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">            now = Save[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, now);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h3><p>这个题有一点小坑。要特判通过中介点无法联通的情况。将dis设为inf没有用，因为inf做一次除法后可能很小。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; G[<span class="number">2</span>][MAXN];</span><br><span class="line"><span class="keyword">int</span> N, M, Q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[<span class="number">2</span>][MAXN];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; Pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Dis[id][i] = <span class="number">1e18</span>;</span><br><span class="line">    Dis[id][s] = <span class="number">0</span>;</span><br><span class="line">    Pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d = -Pq.<span class="built_in">top</span>().first;</span><br><span class="line">        <span class="keyword">int</span> x = Pq.<span class="built_in">top</span>().second;</span><br><span class="line">        Pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (Dis[id][x] != d) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : G[id][x]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e.first, w = e.second;</span><br><span class="line">            <span class="keyword">if</span> (Dis[id][v] &gt; Dis[id][x] + w) &#123;</span><br><span class="line">                Dis[id][v] = Dis[id][x] + w;</span><br><span class="line">                Pq.<span class="built_in">push</span>(&#123;-Dis[id][v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;Q);</span><br><span class="line">    <span class="keyword">int</span> u, v, c, d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;c, &amp;d);</span><br><span class="line">        G[<span class="number">0</span>][u].<span class="built_in">push_back</span>(&#123;v, c&#125;);</span><br><span class="line">        G[<span class="number">1</span>][v].<span class="built_in">push_back</span>(&#123;u, d&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dijkstra</span>(N, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dis[<span class="number">0</span>][i] &gt; <span class="number">1e17</span> || Dis[<span class="number">1</span>][i] &gt; <span class="number">1e17</span>) <span class="keyword">continue</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;-(Dis[<span class="number">0</span>][i] + (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span> * Dis[<span class="number">1</span>][i] / A[i])), &#123;i, A[i]&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (y != A[x] &amp;&amp; Dis[<span class="number">0</span>][x] &lt; <span class="number">1e18</span> &amp;&amp; Dis[<span class="number">1</span>][x] &lt; <span class="number">1e18</span>) &#123;</span><br><span class="line">            A[x] = y;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;-(Dis[<span class="number">0</span>][x] + (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span> * Dis[<span class="number">1</span>][x] / A[x])), &#123;x, A[x]&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (A[pq.<span class="built_in">top</span>().second.first] != pq.<span class="built_in">top</span>().second.second) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, -pq.<span class="built_in">top</span>().first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h3><p>感觉做法不太对，因为我是贪心的，但是AC了。我觉得如果出现多个前缀相同的串可能会挂掉。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line">set&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; ss;</span><br><span class="line">map&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, n; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        v[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v[i]) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = v[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            x = (x * <span class="number">11</span> + v[i][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        Map[x] = i;</span><br><span class="line">        ss.<span class="built_in">insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (now &lt; N) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = now; i &lt;= N; ++i) &#123;</span><br><span class="line">            x = (x * <span class="number">11</span> + A[i]) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (ss.<span class="built_in">find</span>(x) != ss.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                now = i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Map[x]);</span><br><span class="line">                <span class="keyword">if</span> (now &lt; N) <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                ss.<span class="built_in">erase</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h3><p>目测是莫比乌斯反演，<del><mark class="label warning">但是就是不对。</mark></del></p>
<p>输出<code>1</code>获得1分。<del><mark class="label warning">然后我看个人榜有人获得264、265分，估计还有个点比较简单。于是暴力跑了 $n$ 比较小的情况，得到了几个分数，依次输出，发现 $\frac{13}{6}$ 过了第一个点。但是似乎实际数据点不是这个 $n$ ，就有点迷惑。</mark></del></p>
<p>还不会，坑代填。</p>
<mark class="label info">upd：数据锅了，原题是<a href = https://codeforces.com/problemset/problem/1139/D>CF 1139 D</a>，莫比乌斯反演是正确的。</mark>]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>蓝桥杯2021省赛 游记&amp;题解</title>
    <url>/2021/04/19/lanqiao-2021/</url>
    <content><![CDATA[<p>虽然之前一直听说这个比赛很水，但是比赛前一天做了下去年的题，发现最后俩题也只能搞到一半的分。</p>
<p>我必须先对吐槽一下机房的电脑，4G内存的win7，这配置放到10年前都不过分吧？打开个devCpp和Chrome花了5分钟，不过好在没有在比赛中途去世。</p>
<p>填空题感觉还行。</p>
<p>第一题开始以为是输出<code>3182</code>（被样例的<code>11</code>蒙蔽了），考试结束前最后10秒神游的时候，突然想到了什么，把它改成了<code>3181</code>。</p>
<p>这个真的惊险刺激。我考前发现电脑的时间不对，于是就调了一下小时和分钟，但是秒针校正有点麻烦，所以我就没调。因此电脑时间实际上快了20秒。在比赛结束前30秒我在神游的时候，突然意识到第一题似乎有点奇怪，仔细一看发现果然不对。想改的时候一看时间刚好从12:59变成13:00，心想彻底凉了。但是我抱着侥幸的心理尝试去修改答案，没想到真的成功修改了，我这才想起来这个时间快了20秒。真是大起大落。</p>
<p>第二题，把所有直线表示成 $y=\frac{a}{b}\times x + \frac{c}{d}$ 的形式，用<code>vector</code> 去存这俩分数。然而我第一次写的时候翻了个脑瘫错误，对分数约分的时候是这么写的：</p>
<p><code>u /= __gcd(u, d), d /= __gcd(u, d);</code></p>
<p>这里的第二个<code>gcd(u,d)</code>的<code>u</code>已经不是原来的<code>u</code>了。好在最后半个小时手动去数在<code>x=3 y=4</code>情况下所有直线的时候，发现了奇怪的分数$y=\frac{1}{-1}\times x+\frac{1}{2}$，而这条线肯定不存在。修正后结果是<code>40257</code>。</p>
<p>第三题，欧拉筛$\sqrt{n}$以下的质数，然后对$n$做质因数分解。我发现因数很少，于是直接dfs枚举ABC，得到<code>2430</code>。</p>
<p>第四题建图，然后写个最短路，结果是<code>10266837</code>。</p>
<p>第五题开始做的时候还没清醒，想要暴力DFS慢慢跑，但是跑了几十分钟也没跑出来。后来回过神来一看，TSP问题不是可以状压吗？于是 $O(n\times 2^n)$ 写了一发，1秒就跑出来了。和之前dfs的做法在$n$比较小的时候对拍了一下，一模一样美滋滋，得到结果<code>881012367360</code>。</p>
<p>代码题我就naive了。</p>
<p>第一题天平，开始写了个<code>set</code>来回跑，造了个大数据发现跑的好慢。后来发现还不如直接数组遍历，复杂度 $O(n\sum{w_i})$。</p>
<p>第二题博弈论，一看异或我就想到了从高位往低位跑。得到结论，如果所有数异或值为 $0$，则平局，否则Alice胜。我还以为终于碰到了我会做的博弈论。然而赛后在群里讨论，发现我的结论出了问题，没有考虑出现$0$意味着交换先后手，所以Bob可能赢。这还多组数据，我估计要爬了。</p>
<p>第三题左儿子右兄弟，普及组的树形DP。每次把深度最大的儿子放在最下面，那么它的高度就是它的儿子个数+最高的儿子的高度。$f(x)=|son(x)|+\max\limits_{v\in son(x)}{f(v)}$，复杂度 $O(n)$。</p>
<p>第四题括号序，看了一眼本来想分段，但是思路不太清晰没有讨论出来。最后干脆输出<code>0</code>。感觉我确实菜。</p>
<p>第五题分糖果，数据范围说$w$随机生成我就觉得很有灵性，但是并不知道怎么做，感觉像是个分段的DP。写了个dfs，发现$n=30$跑起来也飞快，估计能搞到一点分。</p>
<p>估分45+15+0+20+0+25*0.5=90。</p>
<p>总的来说，感觉比去年的题难不少，没啥送分题。不过金牌爷们都打EC Final去了，大概捞个奖问题不大。</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>第 238 场力扣周赛 总结&amp;题解</title>
    <url>/2021/04/25/lc-wc-238/</url>
    <content><![CDATA[<p>大周日的，为了五一的调休还上课，真离谱。。</p>
<p>九点三十五从床上爬起来拔腿就跑去上电分课，然而老师并没有点名。。</p>
<p>不太适应这个用类的提交方法， 感觉本地不好调试。。</p>
<p>一直说Leetcode很简单，结果没想到还翻车了。最后一题有个细节写错了，但是因为不好调试加上电分下课了也就不想写了。。</p>
<p>最后全球rank是426，咋跟上次abc似的，最后一题挂了。。</p>
<h3 id="K-进制表示下的各位数字总和"><a href="#K-进制表示下的各位数字总和" class="headerlink" title="K 进制表示下的各位数字总和"></a><a href="https://leetcode-cn.com/problems/sum-of-digits-in-base-k/">K 进制表示下的各位数字总和</a></h3><p>没啥好说的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumBase</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt;= n) m *= k;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            ans += n / m;</span><br><span class="line">            n %= m;</span><br><span class="line">            m /= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="最高频元素的频数"><a href="#最高频元素的频数" class="headerlink" title="最高频元素的频数"></a><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">最高频元素的频数</a></h3><p>扔到map里暴力跑过的，然而正解是two pointers。显然对于一个合法的区间，随着 $r$ 递增，$l$ 是不递减的。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFrequency</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nums.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">            sum += nums[r];</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1ll</span> * nums[r] * (r - l + <span class="number">1</span>) - sum &gt; k) &#123;</span><br><span class="line">                sum -= nums[l++];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="所有元音按顺序排布的最长子字符串"><a href="#所有元音按顺序排布的最长子字符串" class="headerlink" title="所有元音按顺序排布的最长子字符串"></a><a href="https://leetcode-cn.com/problems/longest-substring-of-all-vowels-in-order/">所有元音按顺序排布的最长子字符串</a></h3><p>从左往右数就好了，符合条件就统计，不符合条件就清零，否则长度++。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestBeautifulSubstring</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, now = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> *s = <span class="string">&quot; aeiou &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word[i] == s[cur]) &#123;</span><br><span class="line">                ++now;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (word[i] == s[cur + <span class="number">1</span>]) &#123;</span><br><span class="line">                ++cur, ++now;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur == <span class="number">5</span>) ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">                cur = now = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (word[i] == <span class="string">&#x27;a&#x27;</span>) now = cur = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">5</span>) ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="最高建筑高度"><a href="#最高建筑高度" class="headerlink" title="最高建筑高度"></a><a href="https://leetcode-cn.com/problems/maximum-building-height/">最高建筑高度</a></h3><div class="note info"><p>构造一个长为 $n$ 的序列 $a$，要求满足 $a[1]=0,|a[i]-a[i-1]|\leq 1$，且有 $m$ 个条件，第 $i$ 个条件要求 $a[p_i]\leq h_i$ 。求 $\max{a[i]}$ 的最大值。</p>
<p>$n\leq 10^9,m\leq 10^6$</p>
</div>

<p>其实思路不难想，即对于这 $m$ 个有限制的点，分别从左往右和从右往左，计算出来两个方向的限制下的最大高度。</p>
<p>设第 $i$ 个点的最大高度是 $h_i$，间距为 $d_i$，则在第 $i$ 和第 $i+1$ 个点之间可以达到的最大高度是 $\frac{h_i+h_{i+1}+d}{2}$。</p>
<p>则答案为第 $n$ 个点的最大高度和相邻两点间最大高度的最大值，复杂度 $O(m\log{m})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxBuilding</span><span class="params">(<span class="keyword">int</span> n, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = r.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!m) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Mx</span><span class="params">(m)</span></span>;</span><br><span class="line">        Mx[<span class="number">0</span>] = <span class="built_in">min</span>(r[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>, r[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            Mx[i] = <span class="built_in">min</span>(Mx[i - <span class="number">1</span>] + r[i][<span class="number">0</span>] - r[i - <span class="number">1</span>][<span class="number">0</span>], r[i][<span class="number">1</span>]);</span><br><span class="line">        Mx[m - <span class="number">1</span>] = <span class="built_in">min</span>(Mx[m - <span class="number">1</span>], r[m - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            Mx[i] = <span class="built_in">min</span>(Mx[i + <span class="number">1</span>] + r[i + <span class="number">1</span>][<span class="number">0</span>] - r[i][<span class="number">0</span>], Mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (Mx[i] + Mx[i + <span class="number">1</span>] + r[i + <span class="number">1</span>][<span class="number">0</span>] - r[i][<span class="number">0</span>]) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, n - r[m - <span class="number">1</span>][<span class="number">0</span>] + Mx[m - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>双栈维护Two Pointers Method的区间信息</title>
    <url>/2021/04/27/two-interval-stacks/</url>
    <content><![CDATA[<p>这两天思考了一波，发现CF EDU上的这个双栈结构确实很powerful，可以快速维护大部分双指针算法所需的区间信息。</p>
<p>初稿可见<a href="/2021/04/25/ITMO-Academy-pilot-course-Two-Pointers-Method/">Two Pointers Method 学习记录</a> 的Coprime Segment那节，解释了如何用它来维护区间GCD，但是写的很乱，感觉没有说清楚。二稿见同篇的Segment with the Required Subset那节，解释了如何用它维护区间背包，可能相对更清晰一些。</p>
<p>而我在写这两篇题解的时候，对该结构有了更加深刻的理解。鉴于它的实用性很强，故单独成篇更加系统地阐述这一结构的原理和适用范围。</p>
<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>对于该问题，首先要符合two pointers method的使用条件，即对于所有合法区间 $[l,r]$，随着 $r$ 递增，$l$ 单调不减。</p>
<p>问题通常对区间有某种限制，我们记为 $g[l:r]$。而我们可以通过某个数（或者其他类型变量） $f[l:r]$ 概括区间 $[l,r]$ 的状态，而 $f[l:r]$ 可以用于判断 $g[l:r]$ 是否成立。</p>
<p>例如要求区间最大值不超过 $s$，则我们可以定义 $f[l:r]=\max(a_l,\cdots,a_r)$来概括区间 $[l,r]$ 的状态，通过 $f[l:r]\leq s$ 来判断区间是否符合要求。</p>
<p>又例如要求区间中存在两数互质，我们可以定义 $f[l:r]=gcd(a_l,\cdots,a_r)$ 来概括区间 $[l,r]$ 的状态，若 $f[l:r]=1$ 则说明该区间符合要求。</p>
<p>但是，$f[l:r]$ 不一定是唯一的，也不是题目告诉我们的。我们要需要找到一个好的 $f$ 将原问题形式化，而维护 $f$ 的复杂度直接决定了整道题的复杂度。</p>
<p>那么什么样的 $f$ 才是好的呐？</p>
<p>当然是维护的复杂度尽可能低的 $f$。</p>
<p>由于two pointers method的限制，区间 $[l,r]$ 单次移动只会变成 $[l,r+1]$ 或者 $[l+1,r]$。</p>
<p>换言之，每次最多插入或删除一个数。那么维护 $f$ 的复杂度，应该是以下二者的较大值：</p>
<ul>
<li>已知 $f[l:r]$，求 $f[l:r+1]$，插入一个数</li>
<li>已知 $f[l:r]$，求 $f[l+1:r]$，删除一个数</li>
</ul>
<p>根据我们的做题经验，对于大部分操作，求插入一个数的新 $f$ 值的复杂度较低，很多都可以 $O(1)$ 完成。</p>
<p>例如 $f\rightarrow min/max/gcd/and/or$，$f[l:r+1]=f(f[l:r],a_{r+1})$。我们记插入一个数的复杂度为 $\alpha$。</p>
<p>而对于很多操作，我们难以快速求出删除一个数后的 $f$ 值。</p>
<p>作为极少的反例，令 $f\rightarrow sum$，我们可以做“插入一个数”时使用的 $+$ 的逆运算 $-$，$O(1)$ 维护 $f[l+1:r]=f[l:r]-a_l$。</p>
<p>但是，更多的 $f$ 并没有逆运算，例如 $min/max/gcd/and/or$ 等。如果没有其他变量辅助，计算 $f[l+1:r]$ 只能通过往空集中依次插入 $a_{l+1},\cdots,a_r$，通过做区间长度次“插入一个数”得到。而这样的复杂度为 $O((r-l)\alpha)$，也就是 $O(n\alpha)$。</p>
<p>由此我们不难看出，维护 $f$ 的复杂度瓶颈通常为“删除一个数”，若不存在“插入一个数”的逆运算，暴力维护“删除一个数”，会导致维护 $f$ 的复杂度飙升到 $O(n\alpha)$。那整体复杂度达到了 $O(n^2\alpha)$，对于 $n$ 动辄 $1e5$ 的数据范围，是完全不能接受的。</p>
<p>总结一下，若 $f$ 满足结合律，则它能快速计算“插入一个数”，即区间加法、移动 $r$ 的情况。但是若 $f$ 无法快速维护“删除一个数”，即区间减法、移动 $l$ 的情况，Two Pointers Method基本无法使用。</p>
<h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>双栈的引入，就是为了解决 $f$ 满足结合律，但是无法快速维护区间减法的情况。</p>
<p>基本的思路是，既然无法快速计算区间减法，那么就改用一个栈预先存储好每次做完区间减法后的答案。</p>
<p>将区间 $[l,r]$ 拆分成两个子区间 $[l,m],[m+1,r]$，我们用两个栈 $s1,s2$ 分别维护这两个区间的 $f$ 值。</p>
<p>$s1$ 从栈顶到栈底，依次存储了 $f[l:m]$,$f[l+1:m]$,$\cdots$,$f[m:m]$，而 $s2$ 存储了 $f[m+1:m+1]$,$f[m+1:m+2]$,$\cdots$,$f[m+1:r]$。</p>
<p>既然 $f$ 符合结合律，那么 $f[l:r]$ 可以通过合并 $f[l:m]$ 和 $f[m+1:r]$ 得到，复杂度记为 $O(\beta)$（当合并两个区间信息与向区间插入一个数的情况相同时，$O(\beta)=O(\alpha)$），而它们分别就是 $s1$ 和 $s2$ 的栈顶。</p>
<p>移动 $r$ 的时候，对 $s1$ 没有影响，$s2$ 只需要插入 $f[m+1:r+1]$。由于 $s2$ 当前的栈顶为 $f[m+1:r]$，因此可以用 $O(\alpha)$ 的复杂度计算出将 $a_r+1$ 插入 $f[m+1:r]$ 得到的结果，即 $f[m+1:r+1]$。</p>
<p>而移动 $l$ 的时候，对 $s2$ 没有影响，$s1$ 只需要弹出栈顶，那么弹出后 $s1$ 的栈顶就是 $f[l+1:m]$，与 $s2$ 的栈顶 $f[m+1:r]$ 合并就能得到 $f[l+1:r]$ 。</p>
<p>聪明的你应该也发现了，$s1$ 弹出后不一定是 $f[l+1:m]$，而可能为空（即 $l=m$ 的情况）。</p>
<p>对于这种情况，我们将 $s2$ 依次弹出，并逐个插入到 $s1$ 中。此时 $s2$ 的栈顶是 $a_r,f[m+1:r]$（前文没有说明，栈中存的其实是pair，每次向 $s2$ 插入 $a_r$ 时，不仅计算了 $f[m+1:r]$，还绑在一起存储了 $a_r$），我们只需要插入 $f(a_r,\emptyset)$，其实就是 $f[r:r]$ 。弹出后的新栈顶是 $a_{r-1},f[m+1:r-1]$，类似像 $s2$ 插入 $a_r$ 的做法， 我们插入 $f(f[r:r],a_{r-1})$，得到了 $f[r-1:r]$。依次类推，将 $s2$ 弹空时，$s1$ 从栈顶到栈底依次为 $f[m+1:r]$,$f[m+2:r]$,$\cdots$,$f[r:r]$，也就是说，新的 $m$ 就是原来的 $r$，区间又重新被划分成了两部分。</p>
<h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><div class="note success"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">f</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原区间插入一个新数，函数返回新区间的f值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">ff</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对两个区间的f值做合并，但仅用于判断条件是否成立，不一定需要真合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v; <span class="comment">// 存的是 v</span></span><br><span class="line">    stack&lt;T&gt; val; <span class="comment">// 存的是 f</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">        val.<span class="built_in">push</span>(<span class="built_in">f</span>(val.<span class="built_in">top</span>(), x)) <span class="comment">// 由f[l:r]插入x得到f[l:r+1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = v.<span class="built_in">top</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> tmp; <span class="comment">// 返回v</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>(); <span class="comment">// f[l:m] 或 f[m+1:r]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123; <span class="comment">//若s1为空，将s2逐个插入到s1中</span></span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();<span class="comment">//删除f[l:m]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于判断 ff(s1.top(), s2.top()) 是否合法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>; <span class="comment">// 原序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>, l = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r]); <span class="comment">// 向s2插入v[r]，即移动r指针</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">check</span>()) &#123; <span class="comment">// 判断当前区间是否合法</span></span><br><span class="line">            <span class="comment">// 更新答案</span></span><br><span class="line">            <span class="built_in">remove</span>(); <span class="comment">//移动l指针</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div>

<p>在这里，我区分了往区间插入一个数（$f$），和合并两个区间 （$ff$）。因为对于某些运算，向区间里插入一个数和合并两个区间是不一样的（T不是<code>int</code>时显然不一样，因为 $f$ 是关于<code>int</code>和T的函数，而 $ff$ 是关于两个T的函数）。</p>
<p>设 $f$ 的复杂度为 $\alpha$，$ff$ 的复杂度为 $\beta$。由于check和 $s1,s2$ 的插入弹出至多各执行 $n$ 次，故整体复杂度为 $O(n(\alpha+\beta))$。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="区间互质"><a href="#区间互质" class="headerlink" title="区间互质"></a>区间互质</h3><p>求最短的区间，使得区间中存在两数互质。</p>
<p>则 $f\rightarrow gcd$，$ff$ 与 $f$ 相同，$\alpha=\beta=\log{max(v_i)}$。故复杂度为 $O(n\log{\max{v_i}})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 14:25:57</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; stk, val = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        val.<span class="built_in">push_back</span>(__gcd(val.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = stk.<span class="built_in">back</span>();</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (__gcd(s1.<span class="built_in">top</span>(), s2.<span class="built_in">top</span>()) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="区间背包"><a href="#区间背包" class="headerlink" title="区间背包"></a>区间背包</h3><p>求最短的区间，满足区间存在一个子集，其元素之和恰好为 $m$。</p>
<p>具体过程详见上一篇博客。</p>
<p>$f$ 为bitset位运算，$ff$ 为合并两个bitset。$\alpha=\beta=O(\frac{m}{w})$，故整体复杂度 $O(\frac{nm}w)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 16:14:21</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    stack&lt;bitset&lt;MAXM&gt;&gt; val;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bitset&lt;MAXM&gt; b = <span class="number">0</span>;</span><br><span class="line">        b[x] = <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">push</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t) val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &lt;&lt; x);</span><br><span class="line">        <span class="keyword">else</span> val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &gt;&gt; x);</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.<span class="built_in">top</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bitset&lt;MAXM&gt; <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    s1.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">    s2.<span class="built_in">init</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> ((s1.<span class="built_in">top</span>() &amp; s2.<span class="built_in">top</span>()).<span class="built_in">any</span>()) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>若对于一个two pointers method问题的区间函数 $f$，如果我们可以快速维护<strong>插入一个数计算新 $f$ <strong>和</strong>合并两个区间的$f$用于判断是否满足条件</strong>这两个操作，我们就可以使用双栈的方法进行维护。</p>
<p>需要注意的一点是，合并两个区间的 $f$ 不一定需要真的合并，只要能判断是否满足条件即可。例如区间背包时，我们并没有真正意义上对两个bitset进行合并，只是实现了利用两个bitset来判断是否能凑出 $m$ 而已。</p>
]]></content>
      <categories>
        <category>data structure</category>
      </categories>
      <tags>
        <tag>two pointers method(双指针)</tag>
      </tags>
  </entry>
  <entry>
    <title>CF EDU - Two Pointers Method 学习记录</title>
    <url>/2021/04/25/ITMO-Two-Pointers-Method/</url>
    <content><![CDATA[<p>在Codeforce上EDU上看到了<a href="https://codeforces.com/edu/course/2">ITMO Academy: pilot course</a>，于是就点进去看了看。</p>
<p>发现有<a href="https://codeforces.com/edu/course/2/lesson/2">Suffix Array</a>、<a href="https://codeforces.com/edu/course/2/lesson/4">Segment Tree, part 1</a>、<a href="https://codeforces.com/edu/course/2/lesson/5">Segment Tree, part 2</a>、<a href="https://codeforces.com/edu/course/2/lesson/6">Binary Search</a>、<a href="https://codeforces.com/edu/course/2/lesson/7">Disjoint Sets Union</a>和<a href="https://codeforces.com/edu/course/2/lesson/9">Two Pointers Method</a>，有相应的video、note和practice。</p>
<p>想到今早LeetCode周赛上暴力过了的two pointers的题，于是就先开了这个。不出意外的话，应该会刷完这五个专题。</p>
<p>大部分题都很naive，最重要的总结详见<a href="/two-interval-stacks/"><a href="/2021/04/27/two-interval-stacks/">双栈维护 Two Pointers Method 的区间信息</a></a>。</p>
<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1">Step 1</a></h2><p>Step 1是最基本的two pointers问题，也没啥感想，就不写题解了。</p>
<h3 id="Merging-Arrays"><a href="#Merging-Arrays" class="headerlink" title="Merging Arrays"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/A">Merging Arrays</a></h3><div class="note info"><p>合并两个有序序列。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 20:59:36</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2, v3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; n || p2 &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == n) v3.<span class="built_in">push_back</span>(v2[p2++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p2 == m) v3.<span class="built_in">push_back</span>(v1[p1++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &lt; v2[p2]) v3.<span class="built_in">push_back</span>(v1[p1++]);</span><br><span class="line">        <span class="keyword">else</span> v3.<span class="built_in">push_back</span>(v2[p2++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v3) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Smaller"><a href="#Number-of-Smaller" class="headerlink" title="Number of Smaller"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/B">Number of Smaller</a></h3><div class="note info"><p>给定两个有序序列 $a,b$，对于每个 $b_i$，求 $a$ 中有多少个数比它小。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:02:15</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= v1[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] &lt; x) ++p1;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Equal"><a href="#Number-of-Equal" class="headerlink" title="Number of Equal"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/C">Number of Equal</a></h3><div class="note info"><p>给定两个有序序列 $a,b$，求有多少对 $(i,j)$ 满足 $a_i=b_j$。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:05:31</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; n &amp;&amp; p2 &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[p1] == v2[p2]) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="number">1</span>, num2 = <span class="number">1</span>;</span><br><span class="line">            ++p1;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] == v1[p1 - <span class="number">1</span>]) ++num1, ++p1;</span><br><span class="line">            ++p2;</span><br><span class="line">            <span class="keyword">while</span> (p2 &lt; m &amp;&amp; v2[p2] == v2[p2 - <span class="number">1</span>]) ++num2, ++p2;</span><br><span class="line">            ans += <span class="number">1ll</span> * num1 * num2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &lt; v2[p2]) &#123;</span><br><span class="line">            ++p1;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] == v1[p1 - <span class="number">1</span>]) ++p1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &gt; v2[p2]) &#123;</span><br><span class="line">            ++p2;</span><br><span class="line">            <span class="keyword">while</span> (p2 &lt; m &amp;&amp; v2[p2] == v2[p2 - <span class="number">1</span>]) ++p2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2">Step 2</a></h2><p>Step 2里面主要是一些模板题，不过它后两题使用的two pointers做法我没有见过。仔细研究了一下，发现确实巧妙。</p>
<p>以下题目，默认 $n\leq 10^5,1\leq a_i,k\leq 10^{18}$。</p>
<h3 id="Segment-with-Small-Sum"><a href="#Segment-with-Small-Sum" class="headerlink" title="Segment with Small Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/A">Segment with Small Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\leq k$ 的最大区间长度。</p>
</div>

<p>需要注意的是，因为 $a_i$ 非负才能two pointers，不然随着 $r$ 递增， $l$ 不一定不减。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:25:19</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segment-with-Big-Sum"><a href="#Segment-with-Big-Sum" class="headerlink" title="Segment with Big Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/B">Segment with Big Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\geq k$ 的最小区间长度。</p>
</div>

<p>上一题的镜像问题，有求小于的最长就有求大于的最短。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:31:42</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; s) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, i - l + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Segments-with-Small-Sum"><a href="#Number-of-Segments-with-Small-Sum" class="headerlink" title="Number of Segments with Small Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/C">Number of Segments with Small Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\leq k$ 的区间个数。</p>
</div>

<p>A、B的镜像问题，有求长度的就有求个数的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:34:55</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) sum -= v[l++];</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Segments-with-Big-Sum"><a href="#Number-of-Segments-with-Big-Sum" class="headerlink" title="Number of Segments with Big Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/D">Number of Segments with Big Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\geq k$ 的区间个数。</p>
</div>

<p>上一题的镜像问题，有求小于的就有求大于的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:57:26</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) sum -= v[l++];</span><br><span class="line">        ans += l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segments-with-Small-Set"><a href="#Segments-with-Small-Set" class="headerlink" title="Segments with Small Set"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/E">Segments with Small Set</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足区间中至多 $k$ 个不同元素的区间个数。</p>
<p>$a_i\leq 10^5$</p>
</div>

<p>这题值域突然变小，应该也是暗示直接用空间换时间吧。</p>
<p>惯用手法了，莫队也是这么统计的。</p>
<p>要是值域变大了，可以用<code>gp_hash_table&lt;long long,int&gt;</code>或者<code>unordered_set&lt;long long&gt;</code> ，这样还是线性的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 22:03:30</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> Tms[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Tms[v[i]]++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++num &gt; k) &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (--Tms[v[l++]] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segments-with-Small-Spread"><a href="#Segments-with-Small-Spread" class="headerlink" title="Segments with Small Spread"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/F">Segments with Small Spread</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\max\limits_{l}^{r}{a_i}-\min\limits_{l}^{r}{a_i}\leq k$ 的区间个数。</p>
</div>

<p>可以直接用单调队列，分别维护递增和递减的队列，每次取出队首做差来判断是否符合条件，最后计算区间的个数。</p>
<details class="note success no-icon"><summary><p>单调队列 Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 22:08:02</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/status</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; Mn, Mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Mn.<span class="built_in">empty</span>() &amp;&amp; v[Mn.<span class="built_in">back</span>()] &gt; v[i]) Mn.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span> (!Mx.<span class="built_in">empty</span>() &amp;&amp; v[Mx.<span class="built_in">back</span>()] &lt; v[i]) Mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        Mn.<span class="built_in">push_back</span>(i), Mx.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (v[Mx.<span class="built_in">front</span>()] - v[Mn.<span class="built_in">front</span>()] &gt; k) &#123;</span><br><span class="line">            l++;</span><br><span class="line">            <span class="keyword">while</span> (Mx.<span class="built_in">front</span>() &lt; l) Mx.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">while</span> (Mn.<span class="built_in">front</span>() &lt; l) Mn.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>theory中给了个很巧妙的做法，我认为它的功能更强大。</p>
<p>不过它的巧妙之处通过这道题不太好体现，它的具体原理我在下一道题阐述。</p>
<details class="note success no-icon"><summary><p>std Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 16:33:50</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v, mn = &#123;LLONG_MAX&#125;, mx = &#123;LLONG_MIN&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">        mn.<span class="built_in">push_back</span>(std::<span class="built_in">min</span>(mn.<span class="built_in">back</span>(), x));</span><br><span class="line">        mx.<span class="built_in">push_back</span>(std::<span class="built_in">max</span>(mx.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mx.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mn.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = v.<span class="built_in">back</span>();</span><br><span class="line">        v.<span class="built_in">pop_back</span>();</span><br><span class="line">        mn.<span class="built_in">pop_back</span>();</span><br><span class="line">        mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">max</span>(s1.<span class="built_in">max</span>(), s2.<span class="built_in">max</span>()) - <span class="built_in">min</span>(s1.<span class="built_in">min</span>(), s2.<span class="built_in">min</span>()) &gt; k) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Coprime-Segment"><a href="#Coprime-Segment" class="headerlink" title="Coprime Segment"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G">Coprime Segment</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中的满足 $gcd(a_l,\cdots,a_r)=1$ 的最小区间长度。</p>
</div>

<p>至少目前来看我还没找到同复杂度的做法。</p>
<p>鉴于求gcd本身带有一个 $\log{a_i}$ 的复杂度，所以该做法的复杂度是 $O(n\log{\max(a_i)})$ 的。</p>
<p>言归正传。</p>
<p>我们发现区间gcd和区间min/max类似，在删除左端点时，无法 $O(1)$ 更新出新区间的相应值（而区间sum、区间中不同元素的个数就可以，因此它们的维护方法很simple）。</p>
<p>而与删除左端点相反，在加入右端点时，又可以 $O(1)$ 更新出新区间的对应值。</p>
<p>更具体地说，这些计算都满足区间结合律，可以将大区间拆成若干小区间，分别求值后再 $O(1)$ 合并。</p>
<p>总结来说，该计算符合区间加法（即结合律），但不符合区间减法。</p>
<p>因此如果我们能解决区间减法的问题，就能实现 $O(1)$ 转移。</p>
<p>记 $f[l:r]$ 为 $f(a_l,a_{l+1},\cdots,a_r)$，$f$ 是gcd、min/max等计算。</p>
<p>既然删掉 $a_l$ 后，$f[l+1:r]$ 的值无法通过 $f[l:r]$ 直接计算出来，一个直观地想法就是将每一步的值预处理存起来，需要的时候直接取。</p>
<p>将区间 $[l,r]$ 分成 $[l,m],[m+1,r]$（$m$ 只用来推式子，实际上不需要求）。用一个栈 $s_1$ 保存 $f[m:m],f[m-1:m],\cdots,f[l:m]$，另一个栈 $s_2$ 保存 $f[m+1:m+1],\cdots,f[m+1:r]$ 。则 $f[l:r]=f(f[l:m],f[m+1:r])$，即 $s_1$ 和 $s_2$ 的栈顶做 $f$。而删除 $a_l$ 时，弹出 $s_1$ 的栈顶，新栈顶就是 $f[l+1:m]$ ，而 $f[l+1:r]$ 仍然可以通过 $s1,s2$ 的栈顶做 $f$ 求出。</p>
<p>那么怎么维护 $s_1$ 和 $s_2$ 呐？</p>
<p>$s_2$ 很好维护，当 $r$ 移动时，向 $s_2$ 栈顶插入 $f(s2.top,a_{r+1})$ 即可得到新栈顶 $f[m+1:r+1]$ 。</p>
<p>但 $s_1$ 并不好维护，因为它是从 $m\rightarrow l$ 反着的。</p>
<p>考虑什么时候 $s_1$ 为空，是 $l=m+1$ 时，即左区间已经没用了，需要重新划分出两个子区间。此时我们将 $s_2$ 逐个弹出，并插入到 $s_1$ 中。那么 $s_1$ 的栈底是 $a_r$，即 $f[r:r]$，然后是 $f(f[r:r],a_{r-1})$，即$f[r-1:r]$，当 $s_2$ 弹空时， $s_1$ 的栈顶是 $f[m+1:r]$，而新的 $l$ 就是 $m+1$ ，新的 $m$ 就是 $r$，也就实现了反着存储。此时的 $s_1$ 从栈底到栈顶形如：$f[r:r],f[r-1:r],\cdots f[m+1:r]$。</p>
<p>注意到 $s_1,s_2$ 的弹出和插入最多各执行 $n$ 次，因此实现了平均 $O(1)$ 的复杂度。</p>
<p>求当前区间 $[l,r]$ 是否满足条件时，计算 $gcd(s1.top,s2.top)$，若是 $1$，则 $f[l:r]=1$，<code>ans=min(ans,r-l+1)</code>。然后移动 $l$，将 $s_1$ 栈顶弹出。若此时 $s_1$ 为空，则将 $s_2$ 逐个弹出，插入 $s_1$ 中（重新划分区间），移动 $l$ 直到gcd不是1未知。然后移动 $r$，在 $s_2$ 中插入 $f(s2.top,a_r)$。重复上述过程，直到 $r$ 移动超过序列末尾结束。</p>
<p>聪明的你也应该发现了，栈中只存储 $f$ 值没法完成从 $s_2$ 弹出栈顶再插入 $s_1$ 的操作。因此栈中实际上存储的是一堆pair，除了 $f$ 还有对应的 $a$ 值。每次向 $s_2$ 中插入 $a_r$ 时，插入的是 $(a_r,f(s_2.top.f,a_r))$。而将 $s_2$ 的栈顶 $(a_q,f[p:q])$弹出并插入到 $s_1$ 时，插入的是 $(a_q,f(f[p:q],s1.top.f))$。</p>
<p>不过这些都是代码实现的细节，只要理解了原理，看看代码也就知道如何实现了。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 14:25:57</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; stk, val = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        val.<span class="built_in">push_back</span>(__gcd(val.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = stk.<span class="built_in">back</span>();</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (__gcd(s1.<span class="built_in">top</span>(), s2.<span class="built_in">top</span>()) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>感觉都是two pointers method的简单应用。但是我在其中某些题中用到了<code>sort</code>（？），<del><mark class="label warning">以及最后一题就是个暴力背包。这让我有些迷惑，不知道是不是我假了。</mark></del></p>
<mark class="label info">upd：学会了如何bitset优化完全背包，于是就可以two pointers优化了。</mark>

<h3 id="Looped-Playlist"><a href="#Looped-Playlist" class="headerlink" title="Looped Playlist"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/A">Looped Playlist</a></h3><div class="note info"><p>给定一个长为 $n$ 的数组 $a$，求最短的区间，使得区间和至少为 $s$。</p>
<p>不同点在于数组是首尾相连不断重复的，因此区间长度可以超过 $n$。</p>
</div>

<p>先预处理 $r=0$ 时， $l$ 的位置和区间长度，然后正常做就好。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 10:43:31</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        total += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = (p - v[<span class="number">0</span>]) / total * n + <span class="number">1</span>, sum = (p - v[<span class="number">0</span>]) / total * total + v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= p) l = pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            sum += v[i];</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= p) &#123;</span><br><span class="line">                pos = l = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len = ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sum += v[r];</span><br><span class="line">        ++len;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= p) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">            l %= n;</span><br><span class="line">            --len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> &lt; ans) &#123;</span><br><span class="line">            pos = (l - <span class="number">1</span> + n) % n;</span><br><span class="line">            ans = len + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>, pos + <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Total-Length"><a href="#Total-Length" class="headerlink" title="Total Length"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/B">Total Length</a></h3><div class="note info"><p>给定长为$n$的序列 ，求 $a$ 中的满足区间和至少为 $s$ 的区间长度之和。</p>
</div>

<p>就答案统计改一下就行。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:29:15</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sum += v[r];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) sum -= v[l++];</span><br><span class="line">        ans += <span class="number">1ll</span> * (r - l + <span class="number">2</span>) * (r - l + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Che-city"><a href="#Che-city" class="headerlink" title="Che city"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/C">Che city</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中有多少对 $(a_i,a_j)(i &lt; j)$，满足 $a_j-a_i\geq r$。保证 $a_i$ 单调递增。</p>
</div>

<p>没啥新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:43:49</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1ll</span> * n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; ++r) &#123;</span><br><span class="line">        <span class="keyword">while</span> (v[r] - v[l] &gt; s) ++l;</span><br><span class="line">        ans -= r - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Stylish-clothes"><a href="#Stylish-clothes" class="headerlink" title="Stylish clothes"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/D">Stylish clothes</a></h3><div class="note info"><p>给定四个序列 $a,b,c,d$，求 $\min{\max{a_i,b_j,c_k,d_p}-\min{a_i,b_j,c_k,d_p}}$ 。</p>
</div>

<p>我觉得应该排序是没法避免的。。</p>
<p>将 $a,b,c,d$ 合并成一个序列 $v$，$v_i$ 保存了它的值和它的类别（$a,b,c,d$），并按照值排序。</p>
<p>问题转换为，求合法的区间 $[l,r]$ 的 $v_r-v_l$ 最小，一个区间合法若其中元素的类别 $a,b,c,d$ 至少各出现一次。</p>
<p>那这就是裸的two pointers了。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:56:05</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>], b[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, x; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;x, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, num = <span class="number">0</span>, ans = INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> ll = <span class="number">0</span>, rr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; v.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b[v[r].second]++) ++num;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (b[v[l].second] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            --b[v[l++].second];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; v[r].first - v[l].first) &#123;</span><br><span class="line">            ans = v[r].first - v[l].first;</span><br><span class="line">            ll = l, rr = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[v[ll].second] = v[ll].first;</span><br><span class="line">    a[v[rr].second] = v[rr].first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ll + <span class="number">1</span>; i &lt; rr; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[v[i].second]) a[v[i].second] = v[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Knapsack-on-a-Segment"><a href="#Knapsack-on-a-Segment" class="headerlink" title="Knapsack on a Segment"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/E">Knapsack on a Segment</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a,b$ ，求 满足 $\sum\limits_{l}^{r}{b_i}\geq s$ 的最大 $\sum\limits_{l}^{r}{c_i}$。</p>
</div>

<p>没啥新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 12:48:36</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; w, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    w.<span class="built_in">resize</span>(n);</span><br><span class="line">    c.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : w) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : c) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, sumw = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sumc = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sumw += w[r];</span><br><span class="line">        sumc += c[r];</span><br><span class="line">        <span class="keyword">while</span> (sumw &gt; s) &#123;</span><br><span class="line">            sumw -= w[l];</span><br><span class="line">            sumc -= c[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sumc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Card-Substrings"><a href="#Card-Substrings" class="headerlink" title="Card Substrings"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/F">Card Substrings</a></h3><div class="note info"><p>给定长为 $n$ 的字符串 $s$ 和长为 $m$ 的字符串 $t$，求其中有多少个子串，满足该子串可以由 $t$ 的若干个字符凑出来。</p>
</div>

<p>毫无新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 17:59:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>, &amp;n, &amp;c, s);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>, numa = <span class="number">0</span>, numb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[r] == <span class="string">&#x27;a&#x27;</span>) ++numa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">            ++numb;</span><br><span class="line">            sum += numa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                sum -= numb;</span><br><span class="line">                --numa;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == <span class="string">&#x27;b&#x27;</span>) --numb;</span><br><span class="line">            ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Not-Very-Rude-Substring"><a href="#Not-Very-Rude-Substring" class="headerlink" title="Not Very Rude Substring"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G">Not Very Rude Substring</a></h3><div class="note info"><p>给定一个长为 $n$ 的字符串 $s$。定义字符串 $t$ 的值为有多少种方法删除 $|t|-2$ 个字符后，剩下 $ab$。求 $s$ 的最长的子串，满足该子串的值不超过 $x$。</p>
</div>

<p>记当前有 $x$ 个 $a$，$y$ 个 $b$。若 $r$ 移动后，插入了一个 $b$，则字符串的值增加了 $x$，若 $l$ 移动后删除了 $a$。则字符串的值减少了 $y$。</p>
<p>然后就正常做two pointers即可。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 17:59:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>, &amp;n, &amp;c, s);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>, numa = <span class="number">0</span>, numb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[r] == <span class="string">&#x27;a&#x27;</span>) ++numa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">            ++numb;</span><br><span class="line">            sum += numa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                sum -= numb;</span><br><span class="line">                --numa;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == <span class="string">&#x27;b&#x27;</span>) --numb;</span><br><span class="line">            ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="A-B-Knapsack"><a href="#A-B-Knapsack" class="headerlink" title="A-B Knapsack"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/H">A-B Knapsack</a></h3><div class="note info"><p>给定两个序列 $a$ 和 $b$。$a$ 中每个数的“价值”为 $x$，$b$ 中的为 $y$。在 $a,b$ 中选择若干数，使它们总价值不超过 $c$ 的情况下最大化它们的和。 </p>
</div>

<p>有点懵逼，可以不排序吗？</p>
<p>我的做法是 $a,b$ 分别排序后，枚举 $a$ 拿前 $n$ 个，然后 $b$ 拿 $\lfloor\frac{c-n\times x}{y}\rfloor$ 个。</p>
<p>不过硬要说，这个 $a,b$ 的可选区间也算是双指针吧。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 18:09:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/H</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, a, b;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; va, vb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;a, &amp;b);</span><br><span class="line">    va.<span class="built_in">resize</span>(n);</span><br><span class="line">    vb.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : va) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : vb) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">sort</span>(va.<span class="built_in">begin</span>(), va.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(vb.<span class="built_in">begin</span>(), vb.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> r = <span class="built_in">min</span>(n, s / a) - <span class="number">1</span>, sum = (r + <span class="number">1</span>) * a;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; ++i) ans += va[i];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cur = ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">min</span>(m, s / b); ++l) &#123;</span><br><span class="line">        cur += vb[l];</span><br><span class="line">        sum += b;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) &#123;</span><br><span class="line">            sum -= a;</span><br><span class="line">            cur -= va[r--];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segment-with-the-Required-Subset"><a href="#Segment-with-the-Required-Subset" class="headerlink" title="Segment with the Required Subset"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I">Segment with the Required Subset</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $a$。求 $a$ 中最短的区间，满足该区间存在一个子集，使得它的和恰好为 $s$。</p>
<p>$n\leq 10^5$</p>
<p>$m\leq 1000$</p>
</div>

<p>唯一有用的题终于来了，顺便完结撒花预告！</p>
<p>我开始还不是two pointers做的，就是背包的暴力转移。果然还是万能的UOJ，从大佬们只言片语的指点中，我收获颇丰。</p>
<p>首先，直接背包的 $O(nm)$ 做法是很显然的。</p>
<p>做背包转移的时候，记录所用数集合的左端点的最大值。当恰好凑出 $m$ 的时候，就能算出来对应区间的长度，取最小值即可。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 14:34:28</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, F;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    F.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">fill_n</span>(F.<span class="built_in">begin</span>(), m, <span class="number">-1e9</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i] == m) ans = <span class="number">1</span>;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, i - F[m - v[i]] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt; v[i]; --j) &#123;</span><br><span class="line">            F[j] = <span class="built_in">max</span>(F[j], F[j - v[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        F[v[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>本以为都 $O(nm)$ 了还能更快？直到我发现bitset优化完全背包，复杂度可以降到 $O(\frac{nm}{w})$。</p>
<p>bitset优化背包其实原理很simple，它用一个bitset $bt$ 来表示当前能凑出的所有数集合。那么当加入新数 $x$ 的时候，新的状态 $nbt=bt|bt&lt;&lt;x$，$bt$ 为不使用 $x$ 的原状态，$bt&lt;&lt;x$ 为使用 $x$ 后的新状态（即所有状态都+x，用bitset表示就是左移了 $x$ 位），二者的并就是新状态。</p>
<p>如果用数组 $a[i]=0/1$ 表示和为 $i$ 是否能凑出，然后由 $a[i]=1$ 更新 $a[i+x]=1$ 的方法来更新，单次更新的复杂度是 $O(m)$ 的，使用bitset做位运算则只需要 $O(\frac{m}{w})$。</p>
<p>我们不难发现，bitset合并也是一个典型的符合区间加法，但是不符合区间减法的操作。我们可以通过对原bitset做位运算，得到插入 $x$ 后的新bitset，但是我们难以通过原bitset，计算出删除 $x$ 后的新的bitset。</p>
<p>而区间背包的合法区间也满足two pointers的要求，随着 $r$ 递增，$l$ 不减。</p>
<p>因此我们可以使用Step 2中介绍的“双栈”做法，解决掉无法处理区间减法的问题。</p>
<p>但是与之前不同的是，以前每个区间经过某一个运算后得到的是一个数（例如gcd/min/max），那么合并两个区间的情况和往区间插入一个新数的情况相同，都是对两个数进行运算（也可以认为一个数就是长为 $1$ 的区间，所以还是区间合并）。而在本题中，合并两个区间实际上是合并两个bitset，而插入一个数只是对一个bitset做位运算，是不同的，因此我们还需要清楚如何合并两个区间的bitset。</p>
<p>一个naive的做法就是将其中一个bitset的所有值为 $1$ 的位取出，然后依次在第二个bitset上做位运算。但是这样合并的复杂度是 $O(\frac{m^2}{w})$ 的，整体复杂度会达到 $O(\frac{nm^2}{w})$ ，甚至不如暴力，因此我们难以接受。</p>
<p>但是我们发现合并两个bitset其实不需要真的合并，而只是用来判断能否凑出 $m$。</p>
<p>设其中一个bitset的第 $x$ 位为 $1$，若另一个bitset的第 $m-x$ 位也为 $1$，那么这两位就能恰好凑出 $m$。</p>
<p>因此我们想到了反向存储，对每个区间，不仅用一个bitset存储它们能凑出的数集合，还用另一个bitset存储它的“补集”。</p>
<p>具体来说，设初始区间为空，正向存储的初始bitset的第 $0$ 位为 $1$。插入 $x$ 后，将第 $0+x$ 位置为 $1$。</p>
<p>而我们反向存储时，初始bitset的第 $m$ 位为 $1$，表示还需要 $m$ 就能凑出 $m$，插入 $x$ 后，将第 $m-x$ 位置为 $1$。依次类推，若第 $a$ 位为 $1$，插入 $x$ 后，第 $a-x$ 位为1。这也可以用为位运算表示，通过左移 $x$ 位实现。即 $nbt=bt|bt&gt;&gt;x$。</p>
<p>那么此时，我只需要对一个区间的正向bitset和另一个区间的反向bitset做AND操作，若存在第 $x$ 位是 $1$，则说明两个bitset的第 $x$ 位都是 $1$。正向存储第 $x$ 位为 $1$ 表示它能凑出 $x$，反向存储第 $x$ 为 $1$ 表示它还要 $x$ 就能凑出 $m$，二者一拼好凑出 $m$。</p>
<p>因此思路就很清晰了。其实为了偷懒，我们不需要把正向和反向的两个bitset都存储。我们只需要让第一个栈存储正向的bitset，第二个栈存储反向的栈即可。</p>
<p>剩下的就是正常的two pointers操作了，复杂度 $O(\frac{nm}{w})$。换言之，$n,m$ 开到 $50000$ 都能跑。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 16:14:21</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    stack&lt;bitset&lt;MAXM&gt;&gt; val;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bitset&lt;MAXM&gt; b = <span class="number">0</span>;</span><br><span class="line">        b[x] = <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">push</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t) val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &lt;&lt; x);</span><br><span class="line">        <span class="keyword">else</span> val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &gt;&gt; x);</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.<span class="built_in">top</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bitset&lt;MAXM&gt; <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    s1.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">    s2.<span class="built_in">init</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> ((s1.<span class="built_in">top</span>() &amp; s2.<span class="built_in">top</span>()).<span class="built_in">any</span>()) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>ITMO Academy&amp;#58; pilot course</category>
      </categories>
      <tags>
        <tag>two pointers method(双指针)</tag>
      </tags>
  </entry>
</search>
