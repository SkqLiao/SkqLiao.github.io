<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BIT 2021.5 Monthly Contest 总结&amp;题解</title>
    <url>/2021/05/09/BIT-2021-5-Monthly-Contest/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/05/09/MypCrbeYPiJlR6Z.png" alt="image-20210509230028002"></p>
<p>居然用的是Yandex Contest，没有用牛客的，不知道它的优势在哪儿？（界面简洁没广告倒确实挺好的。。</p>
<p>其实整体还行，rank 6，solved 8/11。</p>
<p>B题讨论了太久，结果exgcd都没搞出来。E题看着是个计算几何，就放弃了，但听说很简单（？）J题一看没人开于是我都没读题。。</p>
<p>还有就是罚时，H题的脑瘫错误找了老半天贡献了-2。</p>
<mark class="label info">感觉写题面太花时间了，以后干脆就直接复制题面，把它跟代码一样默认折叠。</mark>

<h3 id="A-大Y吃小Y"><a href="#A-大Y吃小Y" class="headerlink" title="A. 大Y吃小Y"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533759324160">A. 大Y吃小Y</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/uk8aJmSNzgjKrdL.png" alt="image-20210509232855423"></p>

</details>


<p>把所有 $y_i$ 扔到multiset里，然后轮流每次找最大的，累加到 $x$ 并删除，复杂度 $O(n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 08:59:29</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line">multiset&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%lld&quot;</span>, &amp;n, &amp;x[<span class="number">0</span>], &amp;x[<span class="number">1</span>]);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) s.<span class="built_in">insert</span>(x);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; *s.<span class="built_in">begin</span>() &lt; <span class="built_in">max</span>(x[<span class="number">0</span>], x[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(x[cur]);</span><br><span class="line">        <span class="keyword">if</span> (it != s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            x[cur] += *--it;</span><br><span class="line">            s.<span class="built_in">erase</span>(it);</span><br><span class="line">        &#125;</span><br><span class="line">        cur = (cur + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] == x[<span class="number">1</span>]) <span class="built_in">puts</span>(<span class="string">&quot;ZYW and YHW YIYANGJUAN.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x[<span class="number">0</span>] &lt; x[<span class="number">1</span>]) <span class="built_in">puts</span>(<span class="string">&quot;ZYW is JUANBAOLEed!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;YHW is JUANBAOLEed!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-台球"><a href="#B-台球" class="headerlink" title="B. 台球"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533763518464">B. 台球</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/JGg5MZc2BiQhyp1.png" alt="image-20210509232926758"></p>

</details>


<h3 id="C-字符串大师mlcd"><a href="#C-字符串大师mlcd" class="headerlink" title="C. 字符串大师mlcd"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533763518465">C. 字符串大师mlcd</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/7CtVmQoAnq4TxiJ.png" alt="image-20210509232942086"></p>

</details>

<p>这是一个KMP的Next数组应用题，好在我之前在驾校学车的时候闲着没事儿刷OI-wiki的时候看到了。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 09:12:50</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2000000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> Nxt[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = Nxt[i];</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[j] != s[i]) j = Nxt[j];</span><br><span class="line">        Nxt[i + <span class="number">1</span>] = s[i] == s[j] ? j + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        F[i] = F[Nxt[i]] + <span class="number">1</span>;</span><br><span class="line">        ans += F[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getNext</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-迫近的迫近"><a href="#D-迫近的迫近" class="headerlink" title="D. 迫近的迫近"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533763518466">D. 迫近的迫近</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/Hl219TkOFpey8EX.png" alt="image-20210509233236656"></p>

</details>

<p>虽然我过了，复杂度也相同，但是我的做法实在过于脑瘫。。</p>
<p>正常的做法：</p>
<p>正着求一遍LIS，反着求一遍LDS。用 $f[i]$ 表示正向以 $a_i$ 为结尾的LIS，$g[i]$ 表示反向以 $a_i$ 为结尾的LDS，若 $f[i]+g[i]=LIS+1$，则说明 $a_i$ 位于某个最长上升子序列中，复杂度 $O(n\log{n})$。</p>
<p>我赛时的做法：</p>
<p>正着求一遍LIS，用 $f[i]$ 表示正向以 $a_i$ 为结尾的LIS，用<code>vector</code> $v[i]$ 存储所有 $f[j]=i$ 的下标 $j$。</p>
<p>记序列的LIS的长度为 $m$，显然 $v[m]$ 中的所有下标都是答案。</p>
<p>对于所有 $v[m-1]$ 中的下标 $j$，若它后面存在一个比 $a_j$ 大而且属于 $v[m]$ 的数的话，则它也是答案。</p>
<p>以此类推，一直到 $v[1]$ 截止。维护起来比较麻烦，不过复杂度也是 $O(n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code 1</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 23:33:10</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; f, g;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], L[MAXN], R[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">        <span class="keyword">int</span> x = A[i];</span><br><span class="line">        <span class="keyword">if</span> (f.<span class="built_in">empty</span>() || x &gt; f.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            f.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *<span class="built_in">lower_bound</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), x) = x;</span><br><span class="line">        &#125;</span><br><span class="line">        L[i] = <span class="built_in">lower_bound</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), x) - f.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = -A[i];</span><br><span class="line">        <span class="keyword">if</span> (g.<span class="built_in">empty</span>() || x &gt; g.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            g.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *<span class="built_in">lower_bound</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>(), x) = x;</span><br><span class="line">        &#125;</span><br><span class="line">        R[i] = <span class="built_in">lower_bound</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>(), x) - g.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L[i] + R[i] == f.<span class="built_in">size</span>() + <span class="number">1</span>) ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details class="note success no-icon"><summary><p>Code 2</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 09:57:04</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], F[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, f[MAXN];</span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; s[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">        <span class="keyword">int</span> x = A[i];</span><br><span class="line">        <span class="keyword">if</span> (v.<span class="built_in">empty</span>() || x &gt; v.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *<span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x) = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x) - v.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">        f[p].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : f[v.<span class="built_in">size</span>()]) s[<span class="number">1</span>].<span class="built_in">insert</span>(A[x]);</span><br><span class="line">    <span class="keyword">int</span> ans = s[<span class="number">1</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>, t = <span class="number">0</span>; i &gt;= <span class="number">1</span>; --i, t ^= <span class="number">1</span>) &#123;</span><br><span class="line">        s[t].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : f[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; p &lt; f[i + <span class="number">1</span>].<span class="built_in">size</span>(); ++p) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i + <span class="number">1</span>][p] &lt; x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[t ^ <span class="number">1</span>].<span class="built_in">count</span>(A[f[i + <span class="number">1</span>][p]])) s[t ^ <span class="number">1</span>].<span class="built_in">erase</span>(s[t ^ <span class="number">1</span>].<span class="built_in">find</span>(A[f[i + <span class="number">1</span>][p]]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[t ^ <span class="number">1</span>].<span class="built_in">upper_bound</span>(A[x]) != s[t ^ <span class="number">1</span>].<span class="built_in">end</span>()) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">                s[t].<span class="built_in">insert</span>(A[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-迫近的Deadline"><a href="#E-迫近的Deadline" class="headerlink" title="E. 迫近的Deadline"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533763518467">E. 迫近的Deadline</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/WdbSEmCFjPL5OQv.png" alt="image-20210509235322567"></p>

</details>

<h3 id="F-环游世界"><a href="#F-环游世界" class="headerlink" title="F. 环游世界"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712768">F. 环游世界</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/lA5E3CJcD1bFUBZ.png" alt="image-20210509235343633"></p>

</details>

<p>开始没看到 $r\leq i-1$，还以为是什么神题。。</p>
<p>转移方程是 $f_i=\max\limits_{l\leq j\leq r}{(f_j+j-i)}+a_i$，分离变量，用线段树维护 $f_j+j$ 的区间最大值。</p>
<p>复杂度 $O(n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 10:56:16</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Mx[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        Mx[rt] = x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span>, l, m, p, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, p, x);</span><br><span class="line">    Mx[rt] = <span class="built_in">max</span>(Mx[rt &lt;&lt; <span class="number">1</span>], Mx[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b) <span class="keyword">return</span> Mx[rt];</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MIN;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= m) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rt &lt;&lt; <span class="number">1</span>, l, m, a, b));</span><br><span class="line">    <span class="keyword">if</span> (m &lt; b) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        Mx[rt] = LLONG_MIN;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(rt &lt;&lt; <span class="number">1</span>, l, m);</span><br><span class="line">    <span class="built_in">init</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">    Mx[rt] = LLONG_MIN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, N, <span class="number">1</span>, F[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, l, r; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        F[i] += <span class="built_in">queryMax</span>(<span class="number">1</span>, <span class="number">1</span>, N, l, r) - i;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, N, i, F[i] + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, F[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="G-敏感的朋友"><a href="#G-敏感的朋友" class="headerlink" title="G. 敏感的朋友"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712769">G. 敏感的朋友</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/4mDhax5lfZ7IgOc.png" alt="image-20210509235629629"></p>

</details>


<p>$O(nm^2)$ 的DP，$f[i][j]$ 表示给前 $i$ 个人分 $j$ 块糖果的最大好感度，$f[i][j]=\max(f[i][k]+\frac{j-k}{m-k})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 10:58:52</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> F[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= M - j; ++k) &#123;</span><br><span class="line">                F[i][j + k] = <span class="built_in">max</span>(F[i][j + k], F[i - <span class="number">1</span>][j] + <span class="number">1.0</span> * k / (M - j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, F[N][M]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="H-天才麻将少女mlcd"><a href="#H-天才麻将少女mlcd" class="headerlink" title="H. 天才麻将少女mlcd"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712770">H. 天才麻将少女mlcd</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/Zy4pXwVPh3AxsaW.png" alt="image-20210509235814385"></p>

</details>


<p>签到题，然而写的时候不仔细，连WA两发。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 10:38:45O</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">string s, t, name[<span class="number">4</span>] = &#123;<span class="string">&quot;dong&quot;</span>, <span class="string">&quot;xi&quot;</span>, <span class="string">&quot;nan&quot;</span>, <span class="string">&quot;bei&quot;</span>&#125;;</span><br><span class="line">set&lt;string&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> type = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name[i] == s) type = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        st.<span class="built_in">insert</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (st.<span class="built_in">count</span>(t)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">4</span> == type) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;zimo!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; name[i % <span class="number">4</span>] &lt;&lt; endl; <span class="comment">// 忘了%4 !!!!</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;gan&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="I-迫近的NPY"><a href="#I-迫近的NPY" class="headerlink" title="I. 迫近的NPY"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712771">I. 迫近的NPY</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/09/NoDXfVpqB1jSZAe.png" alt="image-20210509235933002"></p>

</details>


<p>离散化所有点，然后对每行每列分别维护vector，存该行/列的点坐标。</p>
<p>枚举正方形的左下角和右上角，用<code>set</code>判断左上角和右下角的点是否存在。</p>
<p>至于它边上的限制，在正方形所在的行和列，<code>upper_bound</code>  左侧/下方的角坐标，如果得到的结果刚好是正方形的另一个角，说明这两个角之间没有其他点。</p>
<p>设正方形左下角坐标为 $(x_i,y_i)$，右上角坐标为 $(x_j,y_j)$。以正方形下面那条线举例，它处于第 $x_i$ 行，左下角坐标为 $y_i$，那么在第 $x_i$ 行存储的所有 $y$ 坐标中<code>upper_bound</code> $y_i$，若结果是 $y_j$，说明 $y_i$ 到 $y_j$ 之间没有其他点，也就是说这条边上没有其他点。</p>
<p>复杂度 $O(n^2\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 11:22:11</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> X[MAXN], Y[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vx, vy;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Ax[MAXN], Ay[MAXN];</span><br><span class="line">set&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Exist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIdX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(vx.<span class="built_in">begin</span>(), vx.<span class="built_in">end</span>(), x) - vx.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIdY</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(vy.<span class="built_in">begin</span>(), vy.<span class="built_in">end</span>(), x) - vy.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;X[i], &amp;Y[i]);</span><br><span class="line">        vx.<span class="built_in">push_back</span>(X[i]);</span><br><span class="line">        vy.<span class="built_in">push_back</span>(Y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(vx.<span class="built_in">begin</span>(), vx.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(vy.<span class="built_in">begin</span>(), vy.<span class="built_in">end</span>());</span><br><span class="line">    vx.<span class="built_in">erase</span>(<span class="built_in">unique</span>(vx.<span class="built_in">begin</span>(), vx.<span class="built_in">end</span>()), vx.<span class="built_in">end</span>());</span><br><span class="line">    vy.<span class="built_in">erase</span>(<span class="built_in">unique</span>(vy.<span class="built_in">begin</span>(), vy.<span class="built_in">end</span>()), vy.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Ax[<span class="built_in">getIdX</span>(X[i])].<span class="built_in">push_back</span>(Y[i]);</span><br><span class="line">        Ay[<span class="built_in">getIdY</span>(Y[i])].<span class="built_in">push_back</span>(X[i]);</span><br><span class="line">        Exist.<span class="built_in">insert</span>(&#123;X[i], Y[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vx.<span class="built_in">size</span>(); ++i) <span class="built_in">sort</span>(Ax[i].<span class="built_in">begin</span>(), Ax[i].<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vy.<span class="built_in">size</span>(); ++i) <span class="built_in">sort</span>(Ay[i].<span class="built_in">begin</span>(), Ay[i].<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> ii = i, jj = j;</span><br><span class="line">            <span class="keyword">if</span> (X[ii] &gt; X[jj]) <span class="built_in">swap</span>(ii, jj);</span><br><span class="line">            <span class="keyword">if</span> (Y[ii] &gt;= Y[jj]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (Y[jj] - Y[ii] != X[jj] - X[ii]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Exist.<span class="built_in">count</span>(&#123;X[ii], Y[jj]&#125;) || !Exist.<span class="built_in">count</span>(&#123;X[jj], Y[ii]&#125;)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> idx = <span class="built_in">getIdX</span>(X[ii]);</span><br><span class="line">            <span class="keyword">auto</span> it = <span class="built_in">upper_bound</span>(Ax[idx].<span class="built_in">begin</span>(), Ax[idx].<span class="built_in">end</span>(), Y[ii]);</span><br><span class="line">            <span class="keyword">if</span> (*it == Y[jj]) flag = <span class="number">1</span>;</span><br><span class="line">            idx = <span class="built_in">getIdX</span>(X[jj]);</span><br><span class="line">            it = <span class="built_in">upper_bound</span>(Ax[idx].<span class="built_in">begin</span>(), Ax[idx].<span class="built_in">end</span>(), Y[ii]);</span><br><span class="line">            <span class="keyword">if</span> (*it == Y[jj]) flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> idy = <span class="built_in">getIdY</span>(Y[ii]);</span><br><span class="line">            it = <span class="built_in">upper_bound</span>(Ay[idy].<span class="built_in">begin</span>(), Ay[idy].<span class="built_in">end</span>(), X[ii]);</span><br><span class="line">            <span class="keyword">if</span> (*it == X[jj]) flag = <span class="number">1</span>;</span><br><span class="line">            idy = <span class="built_in">getIdY</span>(Y[jj]);</span><br><span class="line">            it = <span class="built_in">upper_bound</span>(Ay[idy].<span class="built_in">begin</span>(), Ay[idy].<span class="built_in">end</span>(), X[ii]);</span><br><span class="line">            <span class="keyword">if</span> (*it == X[jj]) flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="J-合成玉"><a href="#J-合成玉" class="headerlink" title="J. 合成玉"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712772">J. 合成玉</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/10/fhRU2VLqok9Mg6K.png" alt="image-20210510000548882"></p>

</details>


<h3 id="K-ZYW的神奇背包"><a href="#K-ZYW的神奇背包" class="headerlink" title="K. ZYW的神奇背包"></a><a href="https://pintia.cn/problem-sets/1313154397137133568/problems/1391273533767712773">K. ZYW的神奇背包</a></h3><details class="note info no-icon"><summary><p>Statement</p>
</summary>
<p><img src="https://i.loli.net/2021/05/10/xqnEtKJpyfcAN8Z.png" alt="image-20210510000600151"></p>

</details>


<p>贪心取即可，优先拿重量小的。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-09 09:49:53</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, w, c;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;w, &amp;c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(A + <span class="number">1</span>, A + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; w &gt;= A[i]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum + A[i] &gt; c) <span class="keyword">break</span>;</span><br><span class="line">        ans += w - A[i];</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>BIT ACM</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 199 总结&amp;题解</title>
    <url>/2021/04/24/abc-199/</url>
    <content><![CDATA[<p>下午打完天梯赛，似乎最后一题数据假了，要重测。。</p>
<p>智能体对抗赛的见面会还没听完，ABC就开始了。</p>
<p>整体难度不大，可惜太久不写矩阵快速幂了，完全没有那个想法，于是F题没想出来。</p>
<p>最后rank 275，rating+901。</p>
<p>ABC题太简单了，就只放代码，不写题解了。</p>
<h3 id="A-Square-Inequality"><a href="#A-Square-Inequality" class="headerlink" title="A. Square Inequality"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_a">A. Square Inequality</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 19:52:29</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (a * a + b * b &lt; c * c) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-Intersection"><a href="#B-Intersection" class="headerlink" title="B. Intersection"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_b">B. Intersection</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 19:53:27</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> L = INT_MIN, R = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        L = <span class="built_in">max</span>(L, a[i]);</span><br><span class="line">        R = <span class="built_in">min</span>(R, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(<span class="number">0</span>, R - L + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-IPFL"><a href="#C-IPFL" class="headerlink" title="C. IPFL"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_c">C. IPFL</a></h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 23:43:50</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line">string S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; S &gt;&gt; Q;</span><br><span class="line">    S = <span class="string">&quot; &quot;</span> + S;</span><br><span class="line">    <span class="keyword">int</span> t, a, b, f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) f ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; N) a -= N;</span><br><span class="line">                <span class="keyword">else</span> a += N;</span><br><span class="line">                <span class="keyword">if</span> (b &gt; N) b -= N;</span><br><span class="line">                <span class="keyword">else</span> b += N;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(S[a], S[b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; S.<span class="built_in">substr</span>(N + <span class="number">1</span>, <span class="number">2</span> * N) &lt;&lt; S.<span class="built_in">substr</span>(<span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; S.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">2</span> * N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-RGB-Coloring-2"><a href="#D-RGB-Coloring-2" class="headerlink" title="D. RGB Coloring 2"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_d">D. RGB Coloring 2</a></h3><div class="note info"><p>给一张图的所有点染色，一共有三种颜色可选，要求每条边上的两个点颜色不同。求有多少种染色方法。</p>
<p>$N\leq 20$</p>
</div>

<p>若有 $k$ 个孤立的点，则答案 $\times 3^k$。</p>
<p>对于每个连通块，暴力求染色数即可，复杂度 $O(2^n\times n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:09:25</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_d</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> C[MAXN], D[MAXN][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (D[v[x]][i]) <span class="keyword">continue</span>;</span><br><span class="line">        C[v[x]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : G[v[x]]) ++D[u][i];</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : G[v[x]]) --D[u][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i].<span class="built_in">empty</span>()) base *= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> v.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, base);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, base * ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Permutation"><a href="#E-Permutation" class="headerlink" title="E. Permutation"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_e">E. Permutation</a></h3><div class="note info"><p>求有多少种 $1\sim n$ 的排列，要求满足 $m$ 个条件。第 $i$ 个条件是，排列的前 $x_i$ 个数中至多有 $z_i$ 个数不大于 $y_i$。</p>
<p>$n\leq 18,m\leq 100$</p>
</div>

<p>发现前缀只要确定选择哪些数后，其具体排列方式不影响后面的选择，结合数据范围想到状压DP。</p>
<p>把所有条件 $(y_i,z_i)$ 都挂在 $x_i$ 处。二进制状压当前选择的数的集合，然后枚举当前位置放的数，如果满足条件就转移。复杂度 $O(2^n\times m)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:20:40</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">bitset&lt;MAXN&gt; bt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[<span class="number">1</span> &lt;&lt; MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(&#123;y - <span class="number">1</span>, z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; N); ++i) &#123;</span><br><span class="line">        bt = i;</span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bt[j]) tmp.<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bt[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : v[tmp.<span class="built_in">size</span>() + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="built_in">upper_bound</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), x.first) - tmp.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="keyword">if</span> (num &gt; x.second || (num == x.second &amp;&amp; j &lt;= x.first)) &#123;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) F[i | (<span class="number">1</span> &lt;&lt; j)] += F[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, F[(<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="F-Graph-Smoothing"><a href="#F-Graph-Smoothing" class="headerlink" title="F. Graph Smoothing"></a><a href="https://atcoder.jp/contests/abc199/tasks/abc199_f">F. Graph Smoothing</a></h3><div class="note info"><p>在一张 $n$ 个点 $m$ 条边的图上，初始状态每个点有权值 $a_i$。每次随机选择一条边 $(u,v)$，将 $a_u,a_v$ 都修改为 $\frac{a_u+a_v}{2}$。求 $K$ 次操作后，每个点权值的期望值。</p>
<p>$n\leq 100, k\leq 10^9$</p>
</div>

<p>我们可以构造出一个 $n\times n$ 的矩阵 $p$ 来表示每次操作时，任意每个点对之间的转移概率，使得 $a’=a\times p$。</p>
<p>具体方法是，若 $u,v$ 之间存在一条边，则 $p[u][v]=p[v][u]=\frac{1}{2m}$，否则为 $0$。</p>
<p>设第 $i$ 个点与 $b_i$ 个点相连，则 $p[i][i]=\frac{m-b_i+\frac{b_i}{2}}{m}$。考虑有 $\frac{m-b_i}{m}$ 的概率不会选中与它相连的边，如此权值不变，有 $\frac{b_i}{m}$ 的概率选中与它相连的边，如此权值减半。</p>
<p>则 $a_k=a\times p^{k-1}$，对 $p$ 做矩阵快速幂，复杂度 $O(n^3\log{k})$。</p>
<p>注意 $k=0$ 时要特判。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-24 20:37:33</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/abc199/tasks/abc199_f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> Num[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A[MAXN][MAXN];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span> A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a, c;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(<span class="keyword">const</span> Matrix &amp;x, <span class="keyword">const</span> Matrix &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c.A, <span class="number">0</span>, <span class="keyword">sizeof</span> c.A);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N; ++k) &#123;</span><br><span class="line">                c.A[i][j] = (c.A[i][j] + x.A[i][k] * y.A[k][j] % MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">poww</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">poww</span><span class="params">(Matrix &amp;x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    Matrix res = x;</span><br><span class="line">    <span class="keyword">for</span> (--t; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">if</span> (!K) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">poww</span>(M, MOD - <span class="number">2</span>), two = <span class="built_in">poww</span>(<span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        ++Num[u], ++Num[v];</span><br><span class="line">        a.A[u][v] = a.A[v][u] = p * two % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        a.A[i][i] = p * (M - Num[i] + two * Num[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">poww</span>(a, K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            x = (x + A[j] * a.A[i][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;600 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1253/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/18。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1253">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/71489">Editorial</a></p>
</li>
</ul>
<h3 id="A-Single-Push"><a href="#A-Single-Push" class="headerlink" title="A. Single Push"></a>A. <a href="https://codeforces.com/contest/1253/problem/A">Single Push</a></h3><div class="note info"><p>$t$ 组数据。每组数据给定两个长为 $n$ 的数组 $A$ 和 $B$，可以选择 $A$ 的一个子序列 $A[l,r]$，将其中的每个数增加 $x(x &gt; 0)$，该操作至多进行一次。判断 $A$ 能否转化成 $B$。</p>
<p>$t\leq 20,n\leq 100000$</p>
</div>

<p>初始化 $C_i=A_i-B_i$，若 $C_i\not=0$ 且 $C_i\not = C_{i-1}$，说明这是一个需要操作的新子序列，判断这样的 $i$ 的个数是否小于 $2$ 个。如果出现 $C_i &lt; 0$，则一定不行。</p>
<p>复杂度 $O(t\cdot n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-24 20:54:20</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T, N, A[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>, tmp;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class="line">		A[i] -= tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (A[i] != A[i - <span class="number">1</span>] &amp;&amp; A[i]) ++cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt &lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">		<span class="built_in">puts</span>(<span class="built_in">solve</span>() ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-Silly-Mistake"><a href="#B-Silly-Mistake" class="headerlink" title="B. Silly Mistake"></a>B. <a href="https://codeforces.com/contest/1253/problem/B">Silly Mistake</a></h3><div class="note info"><p>给定一个序列 $A[1\cdots n]$，判断能否将其划分成若干区间，使每个区间 $A[l_i,r_i]$ ，</p>
<ul>
<li>对于一个正数 $x$，将 $x$ 插入集合 $S$</li>
<li>对于一个负数 $x$，将 $-x$ 从 $S$ 中取出</li>
</ul>
<p>要求每个正数至多被插入一次（在该区间内），且取出时存在于 $S$，最后 $S$ 为空。</p>
<p>如果存在满足条件的划分方法，输出每一段的长度，不存在输出<code>-1</code>。</p>
<p>$n\leq 10^5$</p>
</div>

<p>贪心，每次 $S$ 为空时将其划分成一个新区间，如此可以尽最大可能保证每个正整数 $x$ 只被插入一次。</p>
<p>然后用<code>std::set</code>或者直接哈希表维护区间即可。</p>
<p>复杂度 $O(n)$ 或 $O(n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-26 09:59:19</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, A[MAXN];</span><br><span class="line">std::set&lt;<span class="keyword">int</span>&gt; S, T;</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> total = <span class="number">0</span>, cnt = <span class="number">0</span>, lst = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (T.<span class="built_in">find</span>(A[i]) != T.<span class="built_in">end</span>()) &#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			S.<span class="built_in">insert</span>(A[i]);</span><br><span class="line">			T.<span class="built_in">insert</span>(A[i]);</span><br><span class="line">			total += A[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			A[i] = -A[i];</span><br><span class="line">			<span class="keyword">if</span> (S.<span class="built_in">find</span>(A[i]) == S.<span class="built_in">end</span>()) &#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			S.<span class="built_in">erase</span>(A[i]);</span><br><span class="line">			total -= A[i];</span><br><span class="line">			<span class="keyword">if</span> (total == <span class="number">0</span>) &#123;</span><br><span class="line">				++cnt;</span><br><span class="line">				v.<span class="built_in">push_back</span>(i - lst);</span><br><span class="line">				lst = i;</span><br><span class="line">				T.<span class="built_in">clear</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (total != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : v) </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">	<span class="built_in">Solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-Sweets-Eating"><a href="#C-Sweets-Eating" class="headerlink" title="C. Sweets Eating"></a>C. <a href="https://codeforces.com/contest/1253/problem/C">Sweets Eating</a></h3><div class="note info"><p>有 $n$ 颗糖果，其糖度值分别为 $A[1\cdots n]$，每天最多吃 $m$ 颗糖果，且每颗糖果只能被吃一次。</p>
<p>若在第 $i$ 天吃了糖果 $j$，则获得的甜度为 $i\times A_j$，吃多个糖获得的甜度叠加。</p>
<p>依次求出如果一共吃 $i(1\leq i\leq n)$ 颗糖果，获得的甜度最小值是多少。</p>
<p>$n\leq 200000$</p>
</div>

<p>先考虑对于 $t$ 颗糖果，如何吃使得甜度最小。显然吃甜度最小的 $t$ 颗，且将甜度大的放在前面吃。</p>
<p>具体而言，设 $C$ 为 $A$ 从小到大的有序排列。则吃法如下： $(C_t,\cdots,C_{t-m+1})$,$(C_{t-m},\cdots,C_{t-2m+1})$ $\cdots$ $(\cdots,C_1)$</p>
<p>当增加一颗糖果 $C_{t+1}$ 时，将 $C_{t+1}$ 放在最前面，然后其余的糖果依次往后挪是最优解。</p>
<p>可以意会出对于大部分糖果而言，增加一颗糖果后甜度不变，而位于每天尾端的糖果则会挪到下一天，甜度增加 $C_i$。</p>
<p>那么只要维护位于每天尾端糖果的甜度和 $s$，则可以快速计算出下一天的甜度 $T_i$，即 $T_i=T_{i-1}+C_i+s$。</p>
<p>现在考虑如何维护 $s$，不难想到它是 $m$ 个一循环，因为位于某一天尾端的糖果挪动 $m$ 次后又会到下一天的尾端，因而可以用一个数组 $s[0\cdots m-1]$ 来维护。</p>
<p>注意答案会超过<code>int</code>范围。</p>
<p>复杂度 $O(n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-26 11:30:12</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">	std::<span class="built_in">sort</span>(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cur = <span class="number">0</span>; i &lt;= N; ++i, (cur += <span class="number">1</span>) %= M) &#123;</span><br><span class="line">		total += A[i] + B[cur];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, total);</span><br><span class="line">		B[cur] += A[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-Harmonious-Graph"><a href="#D-Harmonious-Graph" class="headerlink" title="D. Harmonious Graph"></a>D. <a href="https://codeforces.com/contest/1253/problem/D">Harmonious Graph</a></h3><div class="note info"><p>给定 $n$ 个点 $m$ 条边的无向图，增加最少的边数，使得图满足：若点 $l,r(l &lt; r)$ 连通，则 $l$ 与 $i(l &lt; i &lt; r)$ 都连通。</p>
<p>$n,m\leq 200000$</p>
</div>

<p>先求出无向图的连通块，从小到大，对于 $i$ 所在的连通块，编号最小的点为 $i$（若有更小的点 $j$，则在 $j$ 时已经处理完该连通块，不会等到 $i$），最大的点 $b_i$。若 $i,j$ 不连通，将 $i$ 与 $j(i\ &lt; j &lt; b_i)$ 所在的连通块相连，并维护连通块的最大点编号 $b_i$。连通性用并查集维护。</p>
<p>复杂度 $O(n\alpha(n))$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-26 20:23:39</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; E[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	E[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">	E[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"><span class="keyword">bool</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Mx[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	++ans;</span><br><span class="line">	y = <span class="built_in">findFa</span>(y);</span><br><span class="line">	x = <span class="built_in">findFa</span>(x);</span><br><span class="line">	Fa[y] = x;</span><br><span class="line">	Mx[x] = std::<span class="built_in">max</span>(Mx[x], Mx[y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	Mx[x] = x;</span><br><span class="line">	Fa[x] = x;</span><br><span class="line">	Vis[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">static</span> std::queue&lt;<span class="keyword">int</span>&gt; Que;</span><br><span class="line">	Que.<span class="built_in">push</span>(x);</span><br><span class="line">	<span class="keyword">while</span> (!Que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = Que.<span class="built_in">front</span>();</span><br><span class="line">		Que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!Vis[v]) &#123;</span><br><span class="line">				Vis[v] = <span class="number">1</span>;</span><br><span class="line">				Fa[v] = x;</span><br><span class="line">				Mx[x] = std::<span class="built_in">max</span>(Mx[x], v);</span><br><span class="line">				Que.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; Mx[x]; ++i)</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">findFa</span>(i) != x) <span class="built_in">Union</span>(x, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, u, v; i &lt; M; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">addEdge</span>(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">if</span> (!Vis[i]) <span class="built_in">bfs</span>(i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">findFa</span>(i) == i) <span class="built_in">Solve</span>(i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Antenna-Coverage"><a href="#E-Antenna-Coverage" class="headerlink" title="E. Antenna Coverage"></a>E. <a href="https://codeforces.com/contest/1253/problem/E">Antenna Coverage</a></h3><div class="note info"><p>在数轴 $[1,m]$ 上，有 $n$ 盏灯，坐标依次为 $p_i$，范围为 $s_i$，即它可照亮 $[p_i-s_i,p_i+s_i]$ 。增加任意一盏灯的范围 $s_i\rightarrow s_i+1$ 花费为 $1$。求将 $[1,m]$ 全部照亮的最小花费（可以照亮 $[1,m]$ 以外的地方）。</p>
<p>$n\leq 80, m\leq 100000$</p>
</div>

<p>设 $f_{i,j}$ 为前 $i$ 盏灯照亮 $[1,j]$ 的最小花费，初始化 $f_{0,0}=0$</p>
<p>$f_{i,j}=min{f_{i-1,k}}(k \geq j)$，显然覆盖 $[1,k]$包含了覆盖 $[1,j]$ 的情况。</p>
<p>对于 $j &gt; p_i+s_i$，第 $i$ 盏灯覆盖的范围是 $[2p_i-j,j]$，因而前 $i-1$ 盏灯需要覆盖 $[1,k](2p_i-j-1\leq k\leq j-1)$，$f_{i,j}=j-p_i-s_i+min{f_{i-1,k}}$。</p>
<p>注意到 $f_{i,j}$ 只与 $f_{i-1,k}$ 有关，因而可以滚动 $i$ 。根据转移方程，发现可以直接用 $f_j$ 表示覆盖 $[1,j]$ 的花费，略去 $i$ 这一维。</p>
<p>复杂度 $O(nm)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-26 21:06:29</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">80</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; A[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;A[i].first, &amp;A[i].second);</span><br><span class="line">	std::<span class="built_in">sort</span>(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(F, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">	F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> p = A[i].first + A[i].second;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * M; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">			F[j] = std::<span class="built_in">min</span>(F[j + <span class="number">1</span>], F[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &lt;= <span class="number">2</span> * M; ++j)</span><br><span class="line">			F[j] = std::<span class="built_in">min</span>(F[j], j - p + F[std::<span class="built_in">max</span>(<span class="number">0</span>, <span class="number">2</span> * A[i].first - j - <span class="number">1</span>)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &lt;= M * <span class="number">2</span>; ++i) ans = std::<span class="built_in">min</span>(ans, F[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="F-Cheap-Robot"><a href="#F-Cheap-Robot" class="headerlink" title="F. Cheap Robot"></a>F. <a href="https://codeforces.com/contest/1253/problem/F">Cheap Robot</a></h3><div class="note info"><p>在 $n$ 个点 $m$ 条边的无向图上，每条边有边权 $w_i$，编号在 $[1,k]$ 的点为“中心点”。现有一辆小车在图上穿梭，其油箱大小为 $t$。若它某时剩余的油为 $s$，则它可以通过所有边权 $w_i\leq s$ 的边，且通过后 $s$ 减少 $w_i$。若小车到达“中心点”，油箱会加满（$s=t$）。有 $q$ 个询问，每次询问小车从中心点 $a_i$ 出发到中心点 $b_i$ 所需的最小油量 $t$ 。 </p>
<p>$k,n\leq 10^5,m\leq 3\times 10^5,w_i\leq 10^9$</p>
</div>

<p>由于小车的终点为“中心点”，因而小车在路径上的任意点都应该能抵达离它最近的“中心点”。</p>
<p>小车在任意点驶向离它最近的“中心点”不会使结果更劣，因为它可以通过该“中心点”加满油后原路返回，且剩余的油更多（或相等）。</p>
<p>设点 $i$ 与最近的中心点的距离为 $d_i$，可以通过Disjkstra在 $O(m\log{n})$ 求出。具体而言，将 $[1,k]$ 的距离设为 $0$，求达到其他点的最短距离。</p>
<p>设到达点 $i$ 时剩余油量为 $s$。</p>
<p>若 $s &lt; d_i$，则它无法到达终点。</p>
<p>若 $s \geq d_i$，则通过“中心点”加油回到点 $i$ 后 $s=t-d_i$。</p>
<p>如果要通过 $(i,j)$ 从 $i$ 走到 $j$，且满足到达 $j$ 后仍然能到达离 $j$ 最近的中心点，需满足 $s-d_i-w_{i,j}\geq d_j$，整理一下得 $s\geq d_i+d_j+w_{i,j}$。</p>
<p>因而对于一条 $a_i$ 到 $b_i$ 的路径，需满足初始油量 $t\geq max{d_i+d_j+w_{i,j}}$ 。</p>
<p>最小化 $t$，即最小化 $d_i+d_j+w_{i,j}$。将原图的所有边$(u,v)$ 权值重置为 $d_u+d_v+w_{u,v}$ ，然后构造最小生成树，如此使得任意两点间的最大距离最小。</p>
<p>构造完最小生成树后，$t$ 为树上两点边权的最大值，可以用倍增求得。</p>
<p>复杂度 $O(m\log{n}+m\log{m})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-27 23:44:52</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, Q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">		<span class="keyword">int</span> nxt;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; E[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> H[MAXN], cntE;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">long</span> <span class="keyword">long</span> w)</span> </span>&#123;</span><br><span class="line">		E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;;</span><br><span class="line">		H[u] = cntE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; G, T;</span><br><span class="line"></span><br><span class="line">std::priority_queue&lt;std::pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; Pq;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> Dis);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">		Pq.<span class="built_in">push</span>(std::<span class="built_in">make_pair</span>(<span class="number">0</span>, i));</span><br><span class="line">		Dis[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>() &amp;&amp; -Pq.<span class="built_in">top</span>().first &gt; Dis[Pq.<span class="built_in">top</span>().second]) &#123;</span><br><span class="line">            Pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u = Pq.<span class="built_in">top</span>().second; Pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = G.H[u]; i; i = G.E[i].nxt) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = G.E[i].v;</span><br><span class="line">			<span class="keyword">if</span> (Dis[v] &gt; Dis[u] + G.E[i].w) &#123;</span><br><span class="line">				Dis[v] = Dis[u] + G.E[i].w;</span><br><span class="line">				Pq.<span class="built_in">push</span>(std::<span class="built_in">make_pair</span>(-Dis[v], v));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.cntE; ++i)</span><br><span class="line">		G.E[i].w += Dis[G.E[i].u] + Dis[G.E[i].v];</span><br><span class="line">	std::<span class="built_in">sort</span>(G.E + <span class="number">1</span>, G.E + G.cntE + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Fa[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.cntE; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = G.E[i].u, v = G.E[i].v;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">findFa</span>(u) != <span class="built_in">findFa</span>(v)) &#123;</span><br><span class="line">			Fa[<span class="built_in">findFa</span>(v)] = <span class="built_in">findFa</span>(u);</span><br><span class="line">			T.<span class="built_in">addEdge</span>(u, v, G.E[i].w);</span><br><span class="line">			T.<span class="built_in">addEdge</span>(v, u, G.E[i].w);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Depth[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Mx[MAXN][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	Anc[x][<span class="number">0</span>] = fa;</span><br><span class="line">	Depth[x] = Depth[fa] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= Depth[x]; ++i) &#123;</span><br><span class="line">		Anc[x][i] = Anc[Anc[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">		Mx[x][i] = std::<span class="built_in">max</span>(Mx[x][i - <span class="number">1</span>], Mx[Anc[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = T.H[x]; i; i = T.E[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> v = T.E[i].v;</span><br><span class="line">		<span class="keyword">if</span> (fa != v) &#123;</span><br><span class="line">			Mx[v][<span class="number">0</span>] = T.E[i].w;</span><br><span class="line">			<span class="built_in">dfs</span>(v, x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (Depth[u] &gt; Depth[v]) std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= Depth[v]; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((Depth[u] - Depth[v]) &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			ans = std::<span class="built_in">max</span>(ans, Mx[v][i]);</span><br><span class="line">			v = Anc[v][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> ans;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (Anc[u][i] != Anc[v][i]) &#123;</span><br><span class="line">			ans = std::<span class="built_in">max</span>(ans, std::<span class="built_in">max</span>(Mx[u][i], Mx[v][i]));</span><br><span class="line">			u = Anc[u][i], v = Anc[v][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> std::<span class="built_in">max</span>(ans, std::<span class="built_in">max</span>(Mx[u][<span class="number">0</span>], Mx[v][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= M; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">		G.<span class="built_in">addEdge</span>(u, v, w);</span><br><span class="line">		G.<span class="built_in">addEdge</span>(v, u, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Dijkstra</span>();</span><br><span class="line">	<span class="built_in">Kruskal</span>();</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= Q; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">lca</span>(u, v));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;668 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1255/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/12。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1405">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/82366">Editorial</a></p>
</li>
</ul>
<h2 id="A-Changing-Volume"><a href="#A-Changing-Volume" class="headerlink" title="A. Changing Volume"></a>A. <a href="https://codeforces.com/contest/1255/problem/A">Changing Volume</a></h2><div class="note info"><p>$T$ 组数据，每次给定整数 $x,y$，每次可以将 $x$ 进行 $-5,-2,-1,+1,+2,+5$ 五种操作，注意 $x$ 在任意时刻都不能是负数。求 $x$ 转化到 $y$ 所需的最少操作数。</p>
<p>$T\leq 1000,x,y\leq 10^9$</p>
</div>

<p>显然 $x$ 先通过 $\pm5$ 的操作接近 $y$，需要$\lfloor\frac{|x-y|}{5}\rfloor$ 次。现在剩下的是 $\pm|x-y|%5$ 。可以发现 $\pm1,\pm2$ 需要 $1$ 次操作，而 $\pm3,\pm4$ 都需要两次（$+1+2\ or +5-2\ /\ +2+2\ or +5-1$）。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-31 10:09:52</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> A[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">		<span class="keyword">int</span> c = <span class="built_in">abs</span>(a - b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c / <span class="number">5</span> + A[c % <span class="number">5</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="B-Fridge-Lockers"><a href="#B-Fridge-Lockers" class="headerlink" title="B. Fridge Lockers"></a>B. <a href="https://codeforces.com/contest/1255/problem/B">Fridge Lockers</a></h2><div class="note info"><p>有 $n$ 个点，每个点有权值 $a_i$，在 $i,j$ 间增加一条边的花费为 $a_i+a_j$。位于点 $i$ 和点 $j$ 的人知道边 $(i,j)$ 的密码。如果有位于其他点的人知道连接点 $x$ 所有边的密码，则点 $x$ 就不安全。例如图上有 $2$ 个点 $1,2$ ，有 $1$ 条边 $(1,2)$，则点 $1,2$ 都不安全。</p>
<p>现在要在空有 $n$ 个点的图上增加 $m(m\leq n)$ 条边，求使所有点都安全的最小花费以及连边方案。若无解输出 <code>-1</code>。</p>
<p>$n\leq 1000$</p>
</div>

<p>先考虑什么时候无解。如果要保证每个点都安全，则每个点的度数至少为 $2$，则总边数至少为 $n$。因而 $m &lt; n$ 时无解。</p>
<p>而在题干中的例子可以看出，$n=2$ 时也无解，因为位于点 $1,2$ 的人互相知道对方所有边的密码。</p>
<p>现在考虑如何让花费最小。由于 $m=n$，因此唯一的合法解就是每个点的度数为 $2$。又因为所有边权都为对应的两个点的点权之和，因而我们不要考虑具体连边方法，每个点都要连两条边，所以边权和为两倍的点权和，即 $2\times \sum{a_i}$。</p>
<p>至于连边方案，连接 $(i,i+1)$ 形成一个大环，即是每个点的度数为 $2$ 的合法图。</p>
<p>复杂度 $O(n)$ 。 </p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-07-31 10:15:47</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) sum += <span class="number">2</span> * A[i];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, i + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, N, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">		<span class="keyword">if</span> (M &lt; N || N == <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="C-League-of-Leesins"><a href="#C-League-of-Leesins" class="headerlink" title="C. League of Leesins"></a>C. <a href="https://codeforces.com/contest/1255/problem/C">League of Leesins</a></h2><div class="note info"><p>将 $1,2,\cdots, n$ 的全排列 $p_1,p_2,\cdots,p_n$ 从首项开始每三个分成一组，得到 $(p_1,p_2,p_3),(p_2,p_3,p_4),\cdots,(p_{n-2},p_{n-1},p_n)$。现在将每组中的数以及组之间的顺序打乱，要求还原全排列。</p>
<p>例如原全排列 $(1,3,2,4,5)$ 得到 $(5,2,4)(1,2,3),(4,2,3)$ ，还原可得 $(1,3,2,4,5)$ 或 $(5,4,2,3,1)$（都可以）。</p>
<p>$5\leq n\leq 10^5$</p>
</div>

<p>观察这 $n-2$ 组中有哪些特殊的数。显然位于原全排列的首尾的两个数只出现 $1$ 次，而位于首尾的第二个数只出现 $2$ 次，其余数出现 $3$ 次。</p>
<p>那么我们不难通过这个性质得到全排列的前两个数 $p_1,p_2$，而同时出现 $p_1,p_2$ 的那个组中余下的数就是 $p_3$，再用 $p_2,p_3$ 得到 $p_4$，依次类推可以得到整个全排列。</p>
<p>我是通过 <code>map</code> 来维护不同组的，复杂度 $O(n\log{n})$ 。 </p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-01 00:01:59</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> Tms[MAXN], Ans[MAXN];</span><br><span class="line">map&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; x = <span class="built_in">mp</span>(<span class="built_in">min</span>(a, b), <span class="built_in">max</span>(a, b));</span><br><span class="line">	<span class="keyword">if</span> (Map.<span class="built_in">find</span>(x) != Map.<span class="built_in">end</span>()) Map[x] = <span class="built_in">mp</span>(Map[x].first, c);</span><br><span class="line">	<span class="keyword">else</span> Map[x] = <span class="built_in">mp</span>(c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a[<span class="number">3</span>]; i &lt;= N - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">			++Tms[a[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(a, a + <span class="number">3</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) <span class="built_in">add</span>(a[i], a[(i + <span class="number">1</span>) % <span class="number">3</span>], a[(i + <span class="number">2</span>) % <span class="number">3</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">if</span> (Tms[i] == <span class="number">1</span>) Ans[<span class="number">1</span>] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">		<span class="keyword">if</span> (Tms[i] == <span class="number">2</span> &amp;&amp; Map.<span class="built_in">find</span>(<span class="built_in">mp</span>(<span class="built_in">min</span>(Ans[<span class="number">1</span>], i), <span class="built_in">max</span>(Ans[<span class="number">1</span>], i))) != Map.<span class="built_in">end</span>()) Ans[<span class="number">2</span>] = i;</span><br><span class="line">	Ans[<span class="number">3</span>] = Map[<span class="built_in">mp</span>(<span class="built_in">min</span>(Ans[<span class="number">1</span>], Ans[<span class="number">2</span>]), <span class="built_in">max</span>(Ans[<span class="number">1</span>], Ans[<span class="number">2</span>]))].first;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; x = Map[<span class="built_in">mp</span>(<span class="built_in">min</span>(Ans[i - <span class="number">2</span>], Ans[i - <span class="number">1</span>]), <span class="built_in">max</span>(Ans[i - <span class="number">2</span>], Ans[i - <span class="number">1</span>]))];</span><br><span class="line">		<span class="keyword">if</span> (x.first == Ans[i - <span class="number">3</span>]) Ans[i] = x.second;</span><br><span class="line">		<span class="keyword">else</span> Ans[i] = x.first;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="D-Feeding-Chicken"><a href="#D-Feeding-Chicken" class="headerlink" title="D. Feeding Chicken"></a>D. <a href="https://codeforces.com/contest/1255/problem/D">Feeding Chicken</a></h2><div class="note info"><p>$T$ 组数据。在 $r\times c$ 的矩形中，有若干个格子为 <code>R</code>，其余格子为<code>.</code>。其中有 $k$ 只鸡，每只鸡的活动区域是个连通块，交集为空，并集为整个矩形。</p>
<p>要求最小化任意两只鸡活动区域中 <code>R</code> 的个数之差，给出一个每只鸡的活动区域的合法解。</p>
<p>$T\leq 100, r,c\leq 100$</p>
</div>

<p>贪心的想，平均分配 <code>R</code> 可以使差最小。具体而言，若有 $p$ 个 <code>R</code> ，则有 $p\bmod k$ 只鸡有 $\lceil\frac{p}{k}\rceil$ 个 <code>R</code>，其余的鸡有 $\lfloor{\frac{p}{k}}\rfloor$ 个 <code>R</code>，如此，差为 $0$ 或 $1$（取决于 $p$ 是否为 $k$ 的整数倍）。</p>
<p>那么如何构造解？有两种简单的方法，一是“S”形，二是“回”形。两种方法都可以保证每只鸡的活动区域是一个连通块。</p>
<p>沿着形状走，将格子置为当前鸡的活动区域，直到超过要求个 <code>R</code> 时，再转移到下一只鸡。</p>
<p>复杂度 $O(T\times r\times c)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-01 10:02:12</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, M, P;</span><br><span class="line">string S[MAXN];</span><br><span class="line"><span class="keyword">char</span> D[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">26</span>) <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span> + x;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">52</span>) <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span> + x - <span class="number">26</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> x - <span class="number">52</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; N &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; M &amp;&amp; !D[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N &gt;&gt; M &gt;&gt; P;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) cin &gt;&gt; S[i];</span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) </span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j)</span><br><span class="line">				total += S[i][j] == <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">		<span class="keyword">int</span> num = total % P, cnt = total / P;</span><br><span class="line">		<span class="keyword">int</span> cx = <span class="number">0</span>, cy = <span class="number">0</span>, pos = <span class="number">0</span>, cur = <span class="number">0</span>, dir = <span class="number">0</span>, step = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(D, <span class="number">0</span>, <span class="keyword">sizeof</span> D);</span><br><span class="line">		<span class="keyword">while</span> (step &lt; N * M) &#123;</span><br><span class="line">			++step;</span><br><span class="line">			<span class="keyword">if</span> (S[cx][cy] == <span class="string">&#x27;R&#x27;</span> &amp;&amp; cur == cnt + (pos &lt; num)) pos += <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">			cur += S[cx][cy] == <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">			D[cx][cy] = <span class="built_in">getX</span>(pos);</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">check</span>(cx + Dicx[dir], cy + Dicy[dir])) dir = (dir + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">			cx += Dicx[dir], cy += Dicy[dir];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) cout &lt;&lt; D[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E1-Send-Boxes-to-Alice-Easy-Version"><a href="#E1-Send-Boxes-to-Alice-Easy-Version" class="headerlink" title="E1.  Send Boxes to Alice (Easy Version)"></a>E1. <a href="https://codeforces.com/contest/1255/problem/E1"> Send Boxes to Alice (Easy Version)</a></h2><div class="note info"><p>一排有 $n$ 个盒子，第 $i$ 个盒子有 $a[i]$ 个球。每次可以将位于第 $i$ 个盒子里的球移动到第 $i-1$ 或第 $i+1$ 个盒子中，花费的时间为被移动的球的个数。要求最终每个盒子中的球个数都是某个数 $k(k&gt;1)$ 的倍数（或者为空），求最小时间。</p>
<p>$n\leq 10^5,0\leq a[i]\leq 1$</p>
</div>

<p>$k$ 的值只能为 $\sum{a[i]}$ 的质因数（显然质因数比其倍数更优）。由于盒子中要么只有 $1$ 个球，要么没有，因此具体移动方法为：将每相邻 $k$ 个有球的盒子里的球移动到中间的那个盒子。取每个 $k$ 对应时间的最小值。</p>
<p>复杂度 $O(n\times\omega{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-01 10:42:18</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/E1</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i += x) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = (i + i + x - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> j = i; j &lt; i + x; ++j) &#123;</span><br><span class="line">			ans += <span class="built_in">abs</span>(v[j] - v[m]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MAX;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span> (cur * cur &lt;= x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x % cur == <span class="number">0</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">cal</span>(cur));</span><br><span class="line">			<span class="keyword">while</span> (x % cur == <span class="number">0</span>) x /= cur;</span><br><span class="line">			++cur;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">1</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">cal</span>(x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		<span class="keyword">if</span> (x) v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(v.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E2-Send-Boxes-to-Alice-Hard-Version"><a href="#E2-Send-Boxes-to-Alice-Hard-Version" class="headerlink" title="E2. Send Boxes to Alice (Hard Version)"></a>E2. <a href="https://codeforces.com/contest/1255/problem/E2">Send Boxes to Alice (Hard Version)</a></h2><div class="note info"><p>在E1的基础上减少了限制：$n\leq 10^6,0\leq a[i]\leq 10^6$。</p>
</div>

<p>与E1相同，$k$ 的值仍然只能是 $\sum{a[i]}$ 的质因数。</p>
<p>假设处理完了前 $n-1$ 个盒子，现在到第 $n$ 个。有两种处理方法，一是将$\sum\limits_{i=1}^{n}{a_i}\bmod k$ 个球挪到第 $n+1$ 个盒子，或是将 $k-\sum\limits_{i=1}^{n}{a_i}\bmod k$ 个球从第 $n+1$ 个盒子挪到第 $n$ 个盒子。虽然我们不知道前 $n$ 个盒子中球的具体放置方法，但是若每个盒子中的球都是 $k$ 的倍数，其球的总数也得是 $k$ 的倍数，因而需要将多余的球向右挪走，或者将缺少的球从右补充。</p>
<p>无论选择哪一种，前 $n$ 个盒子的问题都已解决，且对后面的盒子都没有影响，因而当前操作选择两个方法中时间较短的那个。</p>
<p>为什么对右边没有影响？假设 $\sum\limits_{i=1}^{n}{a_i}\bmod k =p$，若使用方法一，$a[n+1]:=a[n+1]+p$；若使用方法二，$a[n+1]:=a[n+1]-k+p$，而增加或减少 $k$ 个球对其不会产生影响，因为$a[n+1] \bmod k$ 不变。</p>
<p>复杂度 $O(n\times\omega{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-01 12:52:44</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/E2</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		cur = (cur + A[i]) % x;</span><br><span class="line">		ans += <span class="built_in">min</span>(cur, x - cur);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MAX;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> cur = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span> (cur * cur &lt;= x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x % cur == <span class="number">0</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">cal</span>(cur));</span><br><span class="line">			<span class="keyword">while</span> (x % cur == <span class="number">0</span>) x /= cur;</span><br><span class="line">			++cur;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">1</span>) ans = <span class="built_in">min</span>(ans, <span class="built_in">cal</span>(x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">		sum += A[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(sum));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="F-Point-Ordering"><a href="#F-Point-Ordering" class="headerlink" title="F. Point Ordering"></a>F. <a href="https://codeforces.com/contest/1255/problem/F">Point Ordering</a></h2><div class="note info"><p>这是一条交互题。</p>
<p>在凸包上有 $n$ 个顶点，不知道每个顶点 $a_i$ 的坐标。</p>
<p>可以通过两种方式询问：</p>
<p><code>1 x y z</code>：返回 $a_x,a_y,a_z$ 为顶点的三角形的面积的二倍。</p>
<p><code>2 x y z</code>：返回$\vec{a_xa_y}$ 与 $\vec{a_xa_z}$ 叉乘结果的符号（$\pm1$）。</p>
<p>保证返回值为整数。</p>
<p>最多可以询问 $3n$ 次。</p>
<p>要求最终从顶点 $1$ 开始，逆时针顺序给出每个顶点编号。</p>
</div>

<p>首先已知起点是 $1$，可以通过 $n-2$ 次询问得到其逆时针方向的第一个点编号（$p_2$）。</p>
<p>询问<code>2 1 p2 i</code>，若返回 $-1$，说明 $i$ 相比当前 $p_2$ 更靠逆时针方向，置 $i$ 为新的 $p_2$。</p>
<p>然后通过 $n-2$ 次询问，得到 $1,p_2$ 与其他每个顶点组成的三角形面积的二倍。</p>
<p>由凸包的形状不难得出，顶点沿着逆时针方向，三角形面积应先变大，再减小。</p>
<p>设面积最大的顶点为 $x$，则通过 $n-3$ 次询问 <code>1 1 x i</code> 即可得到点 $i$ 在 $x$ 的顺时针方向还是逆时针方向。</p>
<p>输出 $1,p_2$，然后按照面积从小到大依次输出点 $x$ 顺时针方向的顶点编号，输出 $x$，再按照面积从大到小依次输出点 $x$ 逆时针方向的顶点编号。</p>
<p>总共 $3n-7$ 次询问。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-01 13:53:16</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1255/problem/F</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, P[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> D[MAXN];</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; v, f[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	P[<span class="number">1</span>] = <span class="number">1</span>, P[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2 1 %d %d\n&quot;</span>, P[<span class="number">2</span>], i); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">-1</span>) P[<span class="number">2</span>] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == P[<span class="number">2</span>]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1 1 %d %d\n&quot;</span>, P[<span class="number">2</span>], i); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;D[i]);</span><br><span class="line">		v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(D[i], i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> p = v.<span class="built_in">back</span>().second;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i == p || i == P[<span class="number">2</span>]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2 1 %d %d\n&quot;</span>, p, i); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		f[x == <span class="number">-1</span>].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(D[i], i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(f[<span class="number">0</span>].<span class="built_in">begin</span>(), f[<span class="number">0</span>].<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">sort</span>(f[<span class="number">1</span>].<span class="built_in">begin</span>(), f[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0 %d %d &quot;</span>, P[<span class="number">1</span>], P[<span class="number">2</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f[<span class="number">1</span>].<span class="built_in">size</span>(); ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, f[<span class="number">1</span>][i].second);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = f[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, f[<span class="number">0</span>][i].second);</span><br><span class="line">	<span class="built_in">fflush</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>交互</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;665 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1401/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/15。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1401">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/81700">Editorial</a></p>
</li>
</ul>
<h2 id="A-Distance-and-Axis"><a href="#A-Distance-and-Axis" class="headerlink" title="A. Distance and Axis"></a>A. <a href="https://codeforces.com/contest/1401/problem/A">Distance and Axis</a></h2><div class="note info"><p>$T$ 组数据，$O$ 为原点，$A$ 点在 $x=N$ 处，求最少让 $A$ 移动多少，使得x轴上存在点 $B$ 满足 $|OB|=|AB|=K$。</p>
<p>$T\leq 6000,0\leq N,K\leq 10^6$</p>
</div>

<p>多退少补。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-08-22 19:19:00</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1401/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">        <span class="keyword">if</span> (M &gt; N) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, M - N);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (N - M) &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="B-Ternary-Sequence"><a href="#B-Ternary-Sequence" class="headerlink" title="B. Ternary Sequence"></a>B. <a href="https://codeforces.com/contest/1401/problem/B">Ternary Sequence</a></h2><h2 id="C-Mere-Array"><a href="#C-Mere-Array" class="headerlink" title="C. Mere Array"></a>C. <a href="https://codeforces.com/contest/1401/problem/C">Mere Array</a></h2><h2 id="D-Maximum-Distributed-Tree"><a href="#D-Maximum-Distributed-Tree" class="headerlink" title="D. Maximum Distributed Tree"></a>D. <a href="https://codeforces.com/contest/1401/problem/D">Maximum Distributed Tree</a></h2><h2 id="E-Divide-Square"><a href="#E-Divide-Square" class="headerlink" title="E.  Divide Square"></a>E. <a href="https://codeforces.com/contest/1401/problem/E"> Divide Square</a></h2><h2 id="F-Reverse-and-Swap"><a href="#F-Reverse-and-Swap" class="headerlink" title="F. Reverse and Swap"></a>F. <a href="https://codeforces.com/contest/1401/problem/F">Reverse and Swap</a></h2>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;668 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1405/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/11。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1405">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/82366">Editorial</a></p>
</li>
</ul>
<h2 id="比赛状况"><a href="#比赛状况" class="headerlink" title="比赛状况"></a>比赛状况</h2><p>Solved: 4/5</p>
<p>Rank: 403</p>
<p>Rating change: +448 -&gt; 1175</p>
<h2 id="A-Permutation-Forgery"><a href="#A-Permutation-Forgery" class="headerlink" title="A. Permutation Forgery"></a>A. <a href="https://codeforces.com/contest/1405/problem/A">Permutation Forgery</a></h2><div class="note info"><p>输入一个长为 $n$ 的全排列 $[p_1,\cdots, p_n]$，定义 $F(p)=sort([p_1+p_2,\cdots,p_{n-1}+p_n])$。</p>
<p>输出一个长为 $n$ 的不同于 $p$ 的全排列 $[p’_1,\cdots,p’_n]$，满足 $F(p)=F(p’)$。</p>
<p>$n\leq 100$</p>
</div>

<p>作为div2 A，不可能多复杂。将 $p$ 翻转得到 $p’$，显然满足 $F(p)=F(p’)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-06 22:35:55</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) cout &lt;&lt; A[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="B-Array-Cancellation"><a href="#B-Array-Cancellation" class="headerlink" title="B. Array Cancellation"></a>B. <a href="https://codeforces.com/contest/1405/problem/B">Array Cancellation</a></h2><div class="note info"><p>输入一个长为 $n$ 的序列 $[a_1,\cdots,a_n]$，满足 $\sum{a_i}=0$。每次可以选择任意两个位置 $i,j$，使 $a_i:=a_i-1,a_j:=a_j+1$。若 $i &lt; j$，本次操作免费，反之代价为 $1$。</p>
<p>求最小代价使 $\forall a_i=0$。</p>
<p>$n\leq 10^5$</p>
</div>

<p>显然先尽可能做免费的操作，复杂度 $O(n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-06 22:40:54</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j2 = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (A[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">while</span> (A[i] &gt; <span class="number">0</span> &amp;&amp; j2 &lt;= N) &#123;</span><br><span class="line">					<span class="keyword">while</span> (j2 &lt;= i) ++j2;</span><br><span class="line">					<span class="keyword">while</span> (A[j2] &gt;= <span class="number">0</span> &amp;&amp; j2 &lt;= N) ++j2;</span><br><span class="line">					<span class="keyword">int</span> add = <span class="built_in">min</span>(A[i], -A[j2]);</span><br><span class="line">					A[i] -= add, A[j2] += add;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (A[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				ans += -A[i];</span><br><span class="line">				<span class="keyword">while</span> (A[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">while</span> (j &lt;= i) ++j;</span><br><span class="line">					<span class="keyword">while</span> (A[j] &lt;= <span class="number">0</span> &amp;&amp; j &lt;= N) ++j;</span><br><span class="line">					<span class="keyword">int</span> add = <span class="built_in">min</span>(-A[i], A[j]);</span><br><span class="line">					A[i] += add, A[j] -= add;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="C-Balanced-Bitstring"><a href="#C-Balanced-Bitstring" class="headerlink" title="C. Balanced Bitstring"></a>C. <a href="https://codeforces.com/contest/1405/problem/C">Balanced Bitstring</a></h2><div class="note info"><p>$T$ 组数据，每次输入一个字符串 $s$ 和整数 $k$，满足 $\forall s[i]\in {0,1,?}$。现要将所有 $?$ 指定为 $0$ 或 $1$，使得新串 $s’$ 满足所有长度为 $k$ 的子串中，各自 $0,1$ 的个数相等。如果不存在输出<code>-1</code>。</p>
<p>$T\leq 10^4,|s|,k\leq 3\cdot 10^5$</p>
</div>

<p>根据题意 $s[1,\cdots,k]$ 和 $s[2,\cdots,k+1]$ 的 $0,1$ 数量各自相同。由于 $s[2,\cdots,k]$ 是相同的，因此 $s[1]=s[k+1]$。推广一下，即 $s[1]=s[k+1]=s[2k+1],s[2]=s[k+2]=s[2k+2]\cdots$。</p>
<p>因而将 $s[1\cdots,n]$ 按照 $\bmod k$ 分组，现在要求每组全部是 $0$ 或全部是 $1$，如果同时出现，那显然无解，输出 <code>-1</code>。</p>
<p>那么现在要处理的是全是 $?$ 的组，显然只要 $s[1\cdots,k]$ 确定，$s$ 的所有位就确定了。那么统计 $s[1,\cdots,k]$ 中的 $0,1$ 数量，用 $?$ 去补缺口即可。</p>
<p>复杂度 $O(T\cdot n)$，我为了图方便用了set。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-06 23:01:08</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, K;</span><br><span class="line">string S;</span><br><span class="line">set&lt;<span class="keyword">char</span>&gt; V[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N &gt;&gt; K &gt;&gt; S;</span><br><span class="line">		S = <span class="string">&quot; &quot;</span> + S;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">			V[i].<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += K) V[i].<span class="built_in">insert</span>(S[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (V[i].<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>) != V[i].<span class="built_in">end</span>() &amp;&amp; V[i].<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>) != V[i].<span class="built_in">end</span>()) &#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (V[i].<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>) != V[i].<span class="built_in">end</span>()) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += K) S[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				++cnt;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (V[i].<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>) != V[i].<span class="built_in">end</span>()) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += K) S[j] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> A[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (S[i] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (cnt &lt; K / <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += K) S[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">					++cnt;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += K) S[j] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) A[S[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">		<span class="keyword">if</span> (A[<span class="number">0</span>] != A[<span class="number">1</span>]) flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = K + <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">			A[S[i - K] - <span class="string">&#x27;0&#x27;</span>]--;</span><br><span class="line">			A[S[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">			<span class="keyword">if</span> (A[<span class="number">0</span>] != A[<span class="number">1</span>]) &#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span> (!flag) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="D-Tree-Tag"><a href="#D-Tree-Tag" class="headerlink" title="D. Tree Tag"></a>D. <a href="https://codeforces.com/contest/1405/problem/D">Tree Tag</a></h2><div class="note info"><p>Alice和Bob在一棵树上，Alice开始在 $a$ 点，Bob在 $b$ 点。Alice每次可以移动到与当前点距离不超过 $da$ 的任意节点上（可以不动），而Bob的移动范围是 $db$。</p>
<p>Alice和Bob都绝顶聪明，求经过若干轮后Alice能否和Bob在同一点上。如果可以，则 <code>Alice</code>，反之输出 <code>Bob</code>。</p>
<p>$n\leq 10^5$</p>
</div>

<p>cf div2D 传统艺能博弈论。</p>
<p>先考虑最简单的情况，若 $a,b$ 距离不超过 $da$，则Alice可以一步到达 $b$ 点，此时Alice必胜。</p>
<p>如果直径不超过 $2\cdot da$，那么Alice可以先移动到直径的中点处，此时无论Bob怎么移动，Alice下一步都能抵达与Bob相同的点，此时Alice必胜。</p>
<p>现在考虑一条链的情况，从左端点依次编号 $1,\cdots, n$。假如Bob在点 $1$，Alice在点 $d$，若 $db&gt;2\cdot d$，$da\leq d$，那么Bob就可以在点 $1$ 和 点 $db+1$ 间反复横跳，Alice永远不可能与Bob到同一点，此时Bob胜。</p>
<p>那么拓展一下，假设没有 $db &gt; 2\cdot d$ 的条件，但仍满足 $db\geq 2\cdot da$。显然若 $2d &lt; db$，Bob可以采取同样的策略。 若 $2d &gt; db$，那么Alice可以每次都更靠近Bob，而Bob只能选择远离Alice的方向，但最后会被卡到端点处，所以若干轮后 $d$ 会满足 $2d &lt; db$，而Bob仍然采取反复横跳的方法，此时Bob胜。</p>
<p>再回到树的一般情况，我们可以把Bob的子树和父亲的子树视作链的左右两个方向，其实质与一条链的情况相同，最后Bob到达叶子节点处，Alice仍然无法追上他，此时Bob胜。</p>
<p>那若 $db &lt; 2 \cdot da$ 呐？显然Bob无法采取因为该方法，因为被卡在叶子节点后，他可以到达的所有节点都在Alice下一步的范围内，因此Alice胜。</p>
<p>总结一下，若 $dis(a,b) \leq da$，或树的直径不超过 $2\cdot da$，或 $2da \geq db$时，Alice胜，反之Bob胜。</p>
<p>复杂度 $O(n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-06 23:29:52</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, Sa, Sb, Da, Db;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> D[MAXN], mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (D[mx] &lt; D[x]) mx = x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> u : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (u == fa) <span class="keyword">continue</span>;</span><br><span class="line">		D[u] = D[x] + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(u, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N &gt;&gt; Sa &gt;&gt; Sb &gt;&gt; Da &gt;&gt; Db;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b; i &lt; N; ++i) &#123;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">			G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(D, <span class="number">0</span>, <span class="keyword">sizeof</span> D);</span><br><span class="line">		<span class="built_in">dfs</span>(Sa, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">int</span> dis = D[Sb];</span><br><span class="line">		D[mx] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(mx, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (dis &lt;= Da || <span class="number">2</span> * Da &gt;= Db || D[mx] &lt;= <span class="number">2</span> * Da) cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E-Fixed-Point-Removal"><a href="#E-Fixed-Point-Removal" class="headerlink" title="E. Fixed Point Removal"></a>E. <a href="https://codeforces.com/contest/1405/problem/E">Fixed Point Removal</a></h2><div class="note info"><p>输入一个长为 $n$ 的序列 $[a_1,\cdots,a_n]$。每次可以删除满足 $i=a_i$ 的 $a_i$ 。注意到删除 $a_i$ 后，在它后面所有数的下标会改变。序列的“重量”定义为它最多能删去的数的数量。</p>
<p>现有 $q$ 组询问，每次输入 $l,r$，意为初始下标为 $[1,\cdots,l]$ 和 $[n-r+1,\cdots,n]$ 的数不能被删除。求在该情况下序列的“重量”。</p>
<p>$n,q\leq 3\cdot 10^5$</p>
</div>

<p>令 $b_i=i-a_i$。为了删去尽可能多的数，我们显然会选择从后往前删。若 $a_i$ 前面有不少于 $b_i$ 个数可以被删除，那么 $a_i$ 也能被删除。</p>
<p>对于 $a_i$，求最靠右的左端点 $l_i$，表示仅凭删去 $a[l_i,i]$ 中的数即可使 $a_i$ 能被删除（即 $a_i$ 可在前 $l_i-1$ 个数不能被删除的情况下被删除）。</p>
<p>那么从左往右处理，则 $f_i$ 满足 $[f_i,i]$ 中有恰好 $b_i$ 个标记。可以通过二分+树状数组（$O(\log^2{n})$）或者在线段树二分（$O(\log{n})$）完成。</p>
<p>那么将所有查询按照右端点 $R_i:=n-r_i+1$ 排序，每次插入当前点，并求 $[l_i+1,R_i]$ 中的标记个数。</p>
<p>复杂度 $O(n\log{n})$ 或 $O(n\log^2{n})$。</p>
<h4 id="线段树上二分"><a href="#线段树上二分" class="headerlink" title="线段树上二分"></a>线段树上二分</h4><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-09 20:24:06</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/E</span></span><br><span class="line"><span class="comment"> * O(N*log(N))</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, A[MAXN];</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; V[MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> Sum[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ++Sum[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="built_in">add</span>(rt &lt;&lt; <span class="number">1</span>, l, m, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">add</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,m + <span class="number">1</span>, r, p);</span><br><span class="line">    Sum[rt] = Sum[rt &lt;&lt; <span class="number">1</span>] + Sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bquery</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (Sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &gt;= x) <span class="keyword">return</span> <span class="built_in">Bquery</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Bquery</span>(rt &lt;&lt; <span class="number">1</span>, l, m, x - Sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b) <span class="keyword">return</span> Sum[rt];</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= m) sum += <span class="built_in">querySum</span>(rt &lt;&lt; <span class="number">1</span>, l, m, a, b);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; b) sum += <span class="built_in">querySum</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; A[i];</span><br><span class="line">        A[i] = i - A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= M; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        V[N - r].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(l + <span class="number">1</span>, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == <span class="number">0</span>) <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>, N, i);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &gt; <span class="number">0</span> &amp;&amp; Sum[<span class="number">1</span>] &gt;= A[i]) <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>, N, <span class="built_in">Bquery</span>(<span class="number">1</span>, <span class="number">1</span>, N, A[i]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : V[i]) Ans[u.second] = <span class="built_in">querySum</span>(<span class="number">1</span>, <span class="number">1</span>, N, u.first, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) cout &lt;&lt; Ans[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="二分-树状数组"><a href="#二分-树状数组" class="headerlink" title="二分+树状数组"></a>二分+树状数组</h4><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-07 00:14:49</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1405/problem/E</span></span><br><span class="line"><span class="comment"> * O(N*log^2(N))</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, A[MAXN];</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v[MAXN];</span><br><span class="line"><span class="keyword">int</span> B[MAXN], Ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[MAXN];</span><br><span class="line"><span class="keyword">int</span> Sum[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (; pos &lt;= N; pos += <span class="built_in">lowbit</span>(pos)) Sum[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (; pos; pos -= <span class="built_in">lowbit</span>(pos)) val += Sum[pos];</span><br><span class="line">	<span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		cin &gt;&gt; A[i];</span><br><span class="line">		A[i] = i - A[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= M; ++i) &#123;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		v[N - r].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(l + <span class="number">1</span>, i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> l = <span class="number">1</span>, r = i, pos = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">				<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">query</span>(m) &gt;= A[i]) &#123;</span><br><span class="line">					l = m + <span class="number">1</span>;</span><br><span class="line">					pos = m;</span><br><span class="line">				&#125; <span class="keyword">else</span> r = m - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (pos) &#123;</span><br><span class="line">				<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">				<span class="built_in">add</span>(pos + <span class="number">1</span>, - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> u : v[i]) Ans[u.second] = <span class="built_in">query</span>(u.first);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) cout &lt;&lt; Ans[i] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;670 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1406/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/14。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1406">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/82560">Editorial</a></p>
</li>
</ul>
<h2 id="比赛状况"><a href="#比赛状况" class="headerlink" title="比赛状况"></a>比赛状况</h2><p>Solved: 3/5</p>
<p>Rank: 452</p>
<p>Rating change: +254 -&gt; 1647</p>
<h2 id="A-Subset-Mex"><a href="#A-Subset-Mex" class="headerlink" title="A. Subset Mex"></a>A. <a href="https://codeforces.com/contest/1406/problem/A">Subset Mex</a></h2><div class="note info"><p>$T$ 组数据，每次输入 $N$ 个数，将其分成两部分 $A, B$，使得 $mex(A)+mex(B)$ 最大，并输出这个最大值。</p>
<p>$T,N\leq 100$</p>
</div>

<p>从 $0$ 开始将数依次插入集合 $A$ 中，遇到断点后停下，即为 $mex(A)$，剩下的数求 $mex(B)$。</p>
<p>复杂度 $O(N)$。</p>
<p>多组数据记得<code>memset</code>。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-12 21:45:44</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1406/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, A[MAXN];</span><br><span class="line"><span class="keyword">int</span> Cnt[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="built_in">memset</span>(Cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> Cnt);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) ++Cnt[A[i]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) mx = <span class="built_in">max</span>(mx, A[i]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mx + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!Cnt[i]) &#123;</span><br><span class="line">				ans = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			--Cnt[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mx + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!Cnt[i]) &#123;</span><br><span class="line">				ans += i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="B-Maximum-Product"><a href="#B-Maximum-Product" class="headerlink" title="B. Maximum Product"></a>B. <a href="https://codeforces.com/contest/1406/problem/B">Maximum Product</a></h2><div class="note info"><p>$T$ 组数据，每次输入 $N$ 个数 $A[1\cdots N]$，从中选出 $5$ 个数，使得乘积最大，并输出这个乘积。</p>
<p>$T\leq 2\cdot 10^4,5\leq N\leq 10^5,-3\times 10^3\leq A_i\leq 3\times 10^3$，保证 $\sum{N}\leq 2\cdot 10^5$。</p>
</div>

<p>只有几种可能取到最大值：</p>
<ul>
<li>最大的五个正数相乘</li>
<li>最小的四个负数与最大的正数相乘</li>
<li>最小的两个负数与最大的三个正数相乘</li>
</ul>
<p>可能会存在没有那么多负数/正数的情况，但显然这三种情况至少会满足一种，因此取三种情况的最大值。</p>
<p>复杂度 $O(T\times N)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-12 21:52:23</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1406/problem/B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="built_in">sort</span>(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans1 = A[<span class="number">1</span>] * A[<span class="number">2</span>] * A[<span class="number">3</span>] * A[<span class="number">4</span>] * A[N];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans2 = A[<span class="number">1</span>] * A[<span class="number">2</span>] * A[N - <span class="number">2</span>] * A[N - <span class="number">1</span>] * A[N];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans3 = A[N] * A[N - <span class="number">1</span>] * A[N - <span class="number">2</span>] * A[N - <span class="number">3</span>] * A[N - <span class="number">4</span>];</span><br><span class="line">		cout &lt;&lt; <span class="built_in">max</span>(ans1, <span class="built_in">max</span>(ans2, ans3)) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="C-Link-Cut-Centroids"><a href="#C-Link-Cut-Centroids" class="headerlink" title="C. Link Cut Centroids"></a>C. <a href="https://codeforces.com/contest/1406/problem/C">Link Cut Centroids</a></h2><div class="note info"><p>$T$ 组数据，输入一棵 $N$ 个点的树。选择一条边删去，并连接一条新边，要求操作后仍然是一棵树，且只有一个重心。输出删除与增加的边上的两个节点。</p>
<p>$T\leq 10^4,N\leq 10^5$</p>
</div>

<p>只有当 $N$ 为偶数的时候才可能有两个重心，因而 $N$ 为奇数时可以不改变树的形态。</p>
<p>设两个重心为 $u,v$。将 $u,v$ 的其他子树简化为 $A, B$，则树的形态为 $A-u-v-B$。</p>
<p>由于 $u,v$ 都是重心，因此 $size(A)=\frac{N}{2}-1,size(B)=\frac{N}{2}-1$。</p>
<p>将 $A$ 中一个叶子 $x$ 断开并与 $v$ 相连，此时 $size(u+x+B)&gt;\frac{N}{2}$，因而 $u$ 不再是重心。而对于 $v$ 来说，$size(A+u-x),size(x),size(B)\leq \frac{N}{2}$，仍是重心。而如果对于 $B$ 中的点来说， $size(A+u+v+x) &gt; \frac{N}{2}$，因此不会是新的重心。</p>
<p>复杂度 $O(T\times N)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-12 22:00:29</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1406/problem/C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN], res;</span><br><span class="line"><span class="keyword">int</span> Sz[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	Sz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> u : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (u != fa) &#123;</span><br><span class="line">			<span class="built_in">dfs</span>(u, x);</span><br><span class="line">			Sz[x] += Sz[u];</span><br><span class="line">			flag &amp;= (Sz[u] &lt;= N / <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	flag &amp;= (N - Sz[x] &lt;= N / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag) res.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node1, node2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (G[x].<span class="built_in">size</span>() == <span class="number">1</span>) node1 = x, node2 = fa;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> u : G[x]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (u != fa) <span class="built_in">dfs2</span>(u, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">if</span> (N &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			cout &lt;&lt; u &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; u &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">		res.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; N; ++i) &#123;</span><br><span class="line">			cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">			G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (res.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; G[<span class="number">1</span>].<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; G[<span class="number">1</span>].<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">dfs2</span>(res.<span class="built_in">front</span>(), res.<span class="built_in">back</span>());</span><br><span class="line">			cout &lt;&lt; node1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node2 &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; res.<span class="built_in">back</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; node1 &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="D-Three-Sequences"><a href="#D-Three-Sequences" class="headerlink" title="D. Three Sequences"></a>D. <a href="https://codeforces.com/contest/1406/problem/D">Three Sequences</a></h2><div class="note info"><p>输入一个序列 $A[1\cdots N]$，构造出单点不减的序列 $B$ 和单调不升的序列 $C$，满足 $A[i]=B[i]+C[i]$。要使得 $max(B[i],C[i])$ 最小。</p>
<p>有 $Q$ 次修改，每次输入<code>l r x</code>，即将 $A[l,r]$ 增加 $x$，求修改后最小的 $max(B[i],C[i])$。</p>
<p>$N,Q\leq 10^5$</p>
</div>

<p>先尝试用 $B[i]$ 和 $A[i]$ 来表示 $C[i]$，显然 $C[1]=A[1]-B[1]$。</p>
<p>若 $A[2] &gt; A[1]$，由于 $C$ 单调不升，因而 $B[2]=A[2]-C[1]$ $=A[2]-A[1]+B[1]$, $C[2]=C[1]=A[1]-B[1]$。</p>
<p>若 $A[2] &lt; A[1]$，由于 $B$ 单调不降，因而 $C[2]=A[2]-B[1],B[2]=B[1]$。</p>
<p>通过观察即可发现，$B[i]=A[1]+\sum{max(0,A[i]-A[i-1])}-B[1]$。</p>
<p>而所谓的 $max(B[i],C[i])$ 即 $max(B[N],C[1])=max(A[1]+\sum{max(0,A[i]-A[i-1])}+B[1],A[1]-B[1])$。</p>
<p>使最大值最小，则 $A[1]+\sum{max(0,A[i]-A[i-1])}+B[1]=A[1]-B[1]$，得到 $\frac{A[1]+\sum{max(0,A[i]-A[i-1])}}{2}$。</p>
<p>$max(0, A[i]-A[i-1])$ 可以 $O(N)$ 求出。</p>
<p>而对于每次修改，只影响 $max(A[l]-A[l-1],0)$ 和 $max(A[r+1]-A[r],0)$ ，可以 $O(1)$ 修改。</p>
<p>复杂度 $O(N+Q)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-12 22:22:08</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1406/problem/D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p &gt; N) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span> (A[p] &gt; <span class="number">0</span>) sum -= A[p];</span><br><span class="line">	A[p] += x;</span><br><span class="line">	sum += <span class="built_in">max</span>((<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">0</span>, A[p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l, r, x;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) A[i] -= A[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) sum += <span class="built_in">max</span>((<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">0</span>, A[i]);</span><br><span class="line">	cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>((sum + A[<span class="number">1</span>]) / <span class="number">2.0</span>) &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; M;</span><br><span class="line">	<span class="keyword">while</span> (M--) &#123;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (l == <span class="number">1</span>) A[<span class="number">1</span>] += x;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">change</span>(l, x);</span><br><span class="line">		<span class="built_in">change</span>(r + <span class="number">1</span>, -x);</span><br><span class="line">		cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>((sum + A[<span class="number">1</span>]) / <span class="number">2.0</span>) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E-Deleting-Numbers"><a href="#E-Deleting-Numbers" class="headerlink" title="E. Deleting Numbers"></a>E. <a href="https://codeforces.com/contest/1406/problem/E">Deleting Numbers</a></h2><div class="note info"><p>这是一道交互题。</p>
<p>输入 $N$，有一个目标数 $M(1\leq M \leq  N)$。初始化集合 ${1,2,\cdots,N}$，用三种交互方式：</p>
<ul>
<li><code>A x</code>：查询集合中有多少个 $x$ 的倍数。</li>
<li><code>B x</code>：查询集合中有多少个 $x$ 的倍数，并删去所有 $x$ 的倍数（$M$ 除外）</li>
<li><code>C x</code>：告知 $M$ 的值为 $x$，结束交互。</li>
</ul>
<p>交互至多 $10000$ 次。</p>
<p>$N\leq 10^5$</p>
</div>

<p>将 $M$ 质因数分解为 $\prod{p_i^{a_i}}$。</p>
<p>对于 $p_i\leq \sqrt{M}$，$a_i \geq 1$，而对于 $p_i &gt; \sqrt{M}$，$a_i=1$。</p>
<p>用欧拉筛筛出 $[2,N]$ 的所有质数，对于 $p_i\leq \sqrt{M}$，可以先通过<code>B x</code> 删去其所有倍数，再用<code>A x</code> 判断 $M$ 是否为 $x$ 的倍数，并从 $1$ 向上枚举幂，直到 $M$ 不是 $p_i^{a_i+1}$ 的倍数，从而得到 $a_i$。</p>
<p>而对于 $p_i &gt; \sqrt{M}$，如果也这么做，势必会超过 $10000$ 次的限制。</p>
<p>但是考虑到 $a_i=1$，且最多只有一个 $p_i &gt; \sqrt{M}$，可以采取分块的方法。</p>
<p>定义块大小为 $B$，先查询 <code>A 1</code>，得到当前集合的大小 $num_1$，再连续 <code>B x</code> 删除掉 $B$ 个质数的倍数，并得到应该（不考虑 $M$）被删除的个数 $num_2$。再查询 <code>A 1</code>，得到集合中实际剩余的个数 $num_3$。</p>
<p>如果 $p_i$ 属于这个块，那么 $num_1-num_3\not = num_2$，再挨个 <code>A x</code> 判断是否为 $1$ 即可得到 $p_i$。</p>
<h3 id="简易交互器"><a href="#简易交互器" class="headerlink" title="简易交互器"></a>简易交互器</h3><p>假设选手代码为 <code>a.cpp</code>，交互库为 <code>b.cpp</code>，则可以这样实现自动交互：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ a.cpp -o a -O2</span><br><span class="line">g++ b.cpp -o b -O2</span><br><span class="line">(./b &lt; /dev/fd/3 | ./a) 3&gt;&amp;1 | :</span><br></pre></td></tr></table></figure>

<p>如果要看到额外的调试信息，可将其以输出到 <code>stderr</code>。</p>
<h4 id="选手"><a href="#选手" class="headerlink" title="选手"></a>选手</h4><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-13 12:53:11</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1406/problem/E</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, P = <span class="number">1</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Pri;</span><br><span class="line">bitset&lt;MAXN&gt; isnPri;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isnPri[i]) Pri.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> u : Pri) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * u;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; N) <span class="keyword">break</span>;</span><br><span class="line">            isnPri.<span class="built_in">set</span>(x);</span><br><span class="line">            <span class="keyword">if</span> (i % u == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkA</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A %d\n&quot;</span>, x); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkB</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;B %d\n&quot;</span>, x); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">checkB</span>(x);</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = x; c * P &lt;= N; c *= x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">checkA</span>(c)) <span class="keyword">break</span>;</span><br><span class="line">		ans *= x;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;C 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getPrime</span>();</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; Pri[i] * Pri[i] &lt;= N; ++i) P *= <span class="built_in">get</span>(Pri[r = i]);</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="built_in">sqrt</span>(Pri.<span class="built_in">size</span>() - r), num = <span class="built_in">checkA</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r + <span class="number">1</span>, cnt = <span class="number">0</span>; i &lt; Pri.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        num -= <span class="built_in">checkB</span>(Pri[i]);</span><br><span class="line">        <span class="keyword">if</span> (++cnt == sz || i == Pri.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nnum = <span class="built_in">checkA</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nnum != num) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i - cnt + <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">checkA</span>(Pri[j])) &#123;</span><br><span class="line">                        P *= Pri[j];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = nnum;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;C %d\n&quot;</span>, P); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="交互库"><a href="#交互库" class="headerlink" title="交互库"></a>交互库</h4><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt, x;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, N);</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%d\n&quot;</span>, N);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    cnt = N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c %d&quot;</span>, &amp;ch, &amp;x)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;A&#x27;</span> || ch == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%c %d\n&quot;</span>, ch, x);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">                <span class="built_in">fflush</span>(stdout);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= N; i += x) &#123;</span><br><span class="line">                total += !Vis[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%d\n&quot;</span>, total);</span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= N; i += x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!Vis[i]) <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= N; i += x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != M) Vis[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cnt += !Vis[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            cerr &lt;&lt; M &lt;&lt; <span class="string">&quot; vs &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;669 (Div. 2) 解题报告</title>
    <url>/2021/04/01/cf-1407/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/14。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1407">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/82417">Editorial</a></p>
</li>
</ul>
<h2 id="比赛状况"><a href="#比赛状况" class="headerlink" title="比赛状况"></a>比赛状况</h2><p>Solved: 2/5</p>
<p>Rank: 2720</p>
<p>Rating change: +218 -&gt; 1393（第三场base +250，所以实则掉了）</p>
<p>C题交互想歪了，D题由于两行if顺序写反了直接FST，怎一个惨字了得。。</p>
<h2 id="A-Ahahahahahahahaha"><a href="#A-Ahahahahahahahaha" class="headerlink" title="A. Ahahahahahahahaha"></a>A. <a href="https://codeforces.com/contest/1407/problem/A">Ahahahahahahahaha</a></h2><div class="note info"><p>$T$ 组数据，每次输入长为 $N$ 为 01序列 $A[1\cdots N]$，可以删除至多 $\frac{N}{2}$ 个数，要求删除后的新序列满足 $A[1]+A[3]+\cdots=A[2]+A[4]+\cdots$。</p>
<p>输出新序列的长度以及新序列。</p>
<p>$T\leq 10^3,\sum{n}\leq 10^3$，$N$ 为偶数。</p>
</div>

<p>注意到序列中只有 $0$ 和 $1$，因此必有一个数的数量不超过 $\frac{N}{2}$。将这些数（若个数相等选择删除 $0$）全部删除，则新序列只有 $0$ 或 $1$。若新序列长度为奇数且都由 $1$ 组成，则需要再删去一个 $1$。由此新序列要么都是 $0$，要么由偶数个 $1$ 构成，满足条件。</p>
<p>复杂度 $O(\sum{N})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-08 22:35:33</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1407/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="keyword">if</span> (A[i] == <span class="number">1</span>) ++cnt;</span><br><span class="line">		<span class="keyword">if</span> (cnt &gt; N / <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt % <span class="number">2</span>) --cnt;</span><br><span class="line">			cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; N - cnt &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N - cnt; ++i) cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>



<h2 id="B-Big-Vova"><a href="#B-Big-Vova" class="headerlink" title="B. Big Vova"></a>B. <a href="https://codeforces.com/contest/1407/problem/B">Big Vova</a></h2><div class="note info"><p>$T$ 组数据，每次输出一个长为 $N$ 的序列 $A[1\cdots N]$，可以将其重新排列得到 $B[1\cdots N]$，定义 $C[i]=gcd(B[1],\cdots,B[i])$。现要 $C$ 的字典序最小，求 $B$。</p>
<p>$T,\sum{N},A_i\leq 10^3$</p>
</div>

<p>字典序是诸位比较，因此可以从第 $1$ 位开始贪心，显然 $C[1]=max(A[i])$。然后暴力找到 $A[i]$ 中 $gcd(A[i],C[1])$ 最大的，插入 $C$ 的末位，然后找到$gcd(A[i],gcd(C[1],\cdots,C[j]))$ 中最大的 $A[i]$，直到插满为止。</p>
<p>复杂度不低，但数据范围很小。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-08 22:43:39</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1407/problem/B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, A[MAXN];</span><br><span class="line"><span class="keyword">int</span> B[MAXN], C[MAXN], D[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(B, <span class="number">0</span>, <span class="keyword">sizeof</span> B);</span><br><span class="line">		<span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span> C);</span><br><span class="line">		<span class="built_in">memset</span>(D, <span class="number">0</span>, <span class="keyword">sizeof</span> D);</span><br><span class="line">		cin &gt;&gt; N;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">		<span class="built_in">sort</span>(A + <span class="number">1</span>, A + N + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">		<span class="keyword">int</span> cur = A[<span class="number">1</span>], pos = <span class="number">2</span>;</span><br><span class="line">		C[<span class="number">1</span>] = A[<span class="number">1</span>], D[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (pos &lt;= N) &#123;</span><br><span class="line">			<span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (D[i]) <span class="keyword">continue</span>;</span><br><span class="line">				B[i] = __gcd(cur, A[i]);</span><br><span class="line">				<span class="keyword">if</span> (B[i] &gt; B[mx]) mx = i;</span><br><span class="line">			&#125;</span><br><span class="line">			cur = B[mx];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) <span class="keyword">if</span> (B[i] == B[mx]) C[pos++] = A[i], D[i] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cout &lt;&lt; C[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="C-Chocolate-Bunny"><a href="#C-Chocolate-Bunny" class="headerlink" title="C. Chocolate Bunny"></a>C. <a href="https://codeforces.com/contest/1407/problem/C">Chocolate Bunny</a></h2><div class="note info"><p>这是一道交互题。</p>
<p>有一个长为 $N$ 的全排列 $P[1\cdots N]$，要通过至多 $2\cdot N$ 次询问得到它。</p>
<ul>
<li><code>? x y</code>：返回 $P[x]\bmod P[y]$</li>
</ul>
<p>$N\leq 10^4$</p>
</div>

<p>对于任意两个数 $x,y$，考虑相互取模能得到什么。</p>
<p>若 $x &gt; y$，则 $x\bmod y=p_x,y\bmod x=y$，而 $p_x &lt; y$。</p>
<p>若 $y &gt; x$，则 $x\bmod y=x,y\bmod x=p_y$，而 $p_y &lt; x$。</p>
<p>因而可以得到 $x,y$ 中谁是较小的值，以及值是几，同时也就知道了谁是未知的较大数。</p>
<p>那么可以通过“打擂台”的方式求出这个序列。</p>
<p>每次查询 <code>? i j</code> 和 <code>? j i</code>，假设 $P[i] &gt; P[j]$，则得到了 $P[j]$ 的值，然后再用同样的方法查询 $i$ 和下一个数。</p>
<p>如此通过 $2\cdot(n-1)$ 次可以得到较小的 $n-1$ 个数的值，由于它是全排列，未出现的数即为剩下数的值。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-09 13:57:53</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1407/problem/C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, A[MAXN], B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">flush</span>();</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) <span class="built_in">swap</span>(x, y), <span class="built_in">swap</span>(a, b);</span><br><span class="line">    A[y] = b, B[b] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;! 1&quot;</span> &lt;&lt; endl; cout.<span class="built_in">flush</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; ++i) cur = <span class="built_in">get</span>(cur, i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="keyword">if</span> (!B[i]) A[cur] = i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;! &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cout &lt;&lt; A[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl; cout.<span class="built_in">flush</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="D-Discrete-Centrifugal-Jumps"><a href="#D-Discrete-Centrifugal-Jumps" class="headerlink" title="D. Discrete Centrifugal Jumps"></a>D. <a href="https://codeforces.com/contest/1407/problem/D">Discrete Centrifugal Jumps</a></h2><div class="note info"><p>输入长为 $N$ 的序列 $A[1\cdots N]$，从 $1$ 开始跳跃，到 $N$ 结束。</p>
<p>一次合法的从 $i$ 到 $j$ 的跳跃满足以下条件之一：</p>
<ul>
<li>$j=i+1$</li>
<li>$max(A[i],A[j]) &lt; min(A[i+1],\cdots,A[j-1])$</li>
<li>$min(A[i],A[j]) &gt; max(A[i+1],\cdots,A[j-1])$</li>
</ul>
<p>求从 $1$ 到 $N$ 最少经过几次跳跃。</p>
</div>

<p>可以通过单调栈预处理出来 $A[i]$ 左右侧第一个大于等于/小于等于它的数的位置 $Lmax[i]$,$Lmin[i]$,$Rmax[i]$,$Rmin[i]$，那么一次合法的转移即是$Lmin[i]\rightarrow i$,$Lmax[i]\rightarrow i$,$i\rightarrow Rmax[i]$,$i\rightarrow Rmin[i]$。</p>
<p>然后从 $1$ 开始DP即可。</p>
<p>复杂度 $O(n)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-08 23:37:18</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1407/problem/D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, A[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[MAXN];</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> Lx[MAXN], Ln[MAXN], Rx[MAXN], Rn[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span> &lt;= x &amp;&amp; x &lt;= N; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">bool</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> c ? x &gt;= y : x &lt;= y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> inc, <span class="keyword">int</span> B[], <span class="keyword">bool</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) S.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="keyword">int</span> cur = inc == <span class="number">-1</span> ? N : <span class="number">1</span>;</span><br><span class="line">	S.<span class="built_in">push</span>(cur);</span><br><span class="line">	cur += inc;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">check</span>(cur)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!S.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">cmp</span>(A[cur], A[S.<span class="built_in">top</span>()], c)) &#123;</span><br><span class="line">			B[S.<span class="built_in">top</span>()] = cur; S.<span class="built_in">pop</span>();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			S.<span class="built_in">push</span>(cur);</span><br><span class="line">			cur += inc;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cin &gt;&gt; A[i];</span><br><span class="line">	<span class="built_in">get</span>(<span class="number">1</span>, Rx, <span class="number">1</span>); <span class="built_in">get</span>(<span class="number">1</span>, Rn, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">get</span>(<span class="number">-1</span>, Lx, <span class="number">1</span>); <span class="built_in">get</span>(<span class="number">-1</span>, Ln, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">memset</span>(F, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">	F[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (Ln[i])	F[i] = <span class="built_in">min</span>(F[i], F[Ln[i]] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (Lx[i])	F[i] = <span class="built_in">min</span>(F[i], F[Lx[i]] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (Rx[i])	F[Rx[i]] = <span class="built_in">min</span>(F[Rx[i]], F[i] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (Rn[i])	F[Rn[i]] = <span class="built_in">min</span>(F[Rn[i]], F[i] + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; F[N] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E-Egor-in-the-Republic-of-Dagestan"><a href="#E-Egor-in-the-Republic-of-Dagestan" class="headerlink" title="E. Egor in the Republic of Dagestan"></a>E. <a href="https://codeforces.com/contest/1407/problem/E">Egor in the Republic of Dagestan</a></h2><div class="note info"><p>输入 $N,M$，给定一张有向图，每条边有边权 $0$ 或 $1$。现要将每个点的点权 $A[i]$ 指定为 $0$ 或 $1$。对于一条边 $(u,v,w)$，如果 $A[u]\not =w$，则不能经过。</p>
<p>要让新图从 $1$ 到 $N$ 的最短路径最长（或无法到达），输出这个距离（无法到达输出<code>-1</code>），以及每个点的点权。</p>
<p>$N,M\leq 500000$</p>
</div>

<p>将原图翻转，即 $(u,v,w)$ 转化为 $(v,u,w)$，则 $A[v]\not =w$ 的边不能经过。</p>
<p>以 $N$ 为起点跑最短路，由于边长为 $1$，故只需要BFS。</p>
<p>令 $F[u][0/1]$ 表示 $u$ 的点权为 $0/1$ 时到 $u$ 的最短路长度，对于所有 $(u,v,w)$，$F[u][0/1]=max(F[v][w])+1$。</p>
<p>答案为 $max(F[1][0],F[1][1])$。</p>
<p>而每个点的点权为 $F[i][0],F[i][1]$ 较大的那个所对应的下标 。</p>
<p>复杂度 $O(N+M)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-09 14:50:39</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1407/problem/E</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Dis[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> Inq[MAXN];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Que;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>); cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= M; ++i) &#123;</span><br><span class="line">		cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">		G[v][w].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> Dis);</span><br><span class="line">	Dis[N][<span class="number">0</span>] = Dis[N][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	Que.<span class="built_in">push</span>(N);</span><br><span class="line">	<span class="keyword">while</span> (!Que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = Que.<span class="built_in">front</span>(); Que.<span class="built_in">pop</span>();</span><br><span class="line">		Inq[x] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> d = <span class="built_in">max</span>(Dis[x][<span class="number">0</span>], Dis[x][<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> u : G[x][i]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Dis[u][i] &lt;= d) <span class="keyword">continue</span>;</span><br><span class="line">				Dis[u][i] = d;</span><br><span class="line">				<span class="keyword">if</span> (!Inq[u]) &#123;</span><br><span class="line">					Que.<span class="built_in">push</span>(u);</span><br><span class="line">					Inq[u] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="built_in">max</span>(Dis[<span class="number">1</span>][<span class="number">0</span>], Dis[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span> (ans == INF) ans = <span class="number">-1</span>;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) cout &lt;&lt; (Dis[i][<span class="number">0</span>] &lt; Dis[i][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;667 (Div. 3) 解题报告</title>
    <url>/2021/04/01/cf-1409/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/09/14。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>比赛链接：<a href="https://codeforces.com/contest/1409">Dashboard</a></p>
</li>
<li><p>官方题解：<a href="https://codeforces.com/blog/entry/82284">Editorial</a></p>
</li>
</ul>
<h2 id="比赛状况"><a href="#比赛状况" class="headerlink" title="比赛状况"></a>比赛状况</h2><p>Solved: 6/6</p>
<p>Rank: 53</p>
<p>Rating change: +727 -&gt; 727</p>
<h2 id="A-Yet-Another-Two-Integers-Problem"><a href="#A-Yet-Another-Two-Integers-Problem" class="headerlink" title="A. Yet Another Two Integers Problem"></a>A. <a href="https://codeforces.com/contest/1409/problem/A">Yet Another Two Integers Problem</a></h2><div class="note info"><p>$T$ 组数据，每次输入 $a$ 和 $b$。求至少多少次操作可以将 $a$ 转化为 $b$。一次操作指的是 $a:=a\pm k(k\in[1,10])$。</p>
<p>$T\leq 2\cdot 10^4,1\leq a,b\leq 10^9$</p>
</div>

<p>显然尽可能先用 $10$，最后处理一下剩余的部分。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 22:35:20</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T, a, b;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		cout &lt;&lt; (<span class="built_in">abs</span>(a - b) / <span class="number">10</span> + (<span class="built_in">abs</span>(a - b) % <span class="number">10</span> != <span class="number">0</span>)) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="B-Minimum-Product"><a href="#B-Minimum-Product" class="headerlink" title="B. Minimum Product"></a>B. <a href="https://codeforces.com/contest/1409/problem/B">Minimum Product</a></h2><div class="note info"><p>$T$ 组数据，每次输入 $a,b,x,y,n$，每次可以选择 $a$ 或 $b$ 将其减一，但必须时刻满足 $a\geq x,b\geq y$，该操作至多进行 $n$ 次。求 $a\cdot b$ 的最小值。</p>
<p>$T\leq 2\cdot 10^4,1\leq a,b,x,y,n\leq 10^9$</p>
</div>

<p>“和一定，差越小，积越大”，要最小化乘积，就要先将一个数减到最小，然后再减另一个。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 22:38:02</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T, a, b, x, y, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">	a -= n;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; x) &#123;</span><br><span class="line">		b -= (x - a);</span><br><span class="line">		a = x;</span><br><span class="line">	&#125;</span><br><span class="line">	b = <span class="built_in">max</span>(b, y);</span><br><span class="line">	<span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; x &gt;&gt; y &gt;&gt; n;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">min</span>(<span class="built_in">get</span>(a, b, x, y), <span class="built_in">get</span>(b, a, y, x)) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="C-Yet-Another-Array-Restoration"><a href="#C-Yet-Another-Array-Restoration" class="headerlink" title="C. Yet Another Array Restoration"></a>C. <a href="https://codeforces.com/contest/1409/problem/C">Yet Another Array Restoration</a></h2><div class="note info"><p>有一个未知的长为 $N$ 的等差序列 $A[1\cdots N]$，其中都是正数。已知 $x,y\in A[1\cdots N]$，求 $max(A[1\cdots N])$ 的最小值。</p>
</div>

<p>枚举 $y-x$ 的因数为公差，然后在保证最小值为正数的前提下将 $x,y$ 尽可能放到最后。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 22:47:41</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, x, y, z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (z / a + <span class="number">1</span> &gt; n) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">	<span class="keyword">int</span> mn = x - x / a * a;</span><br><span class="line">	<span class="keyword">if</span> (!mn) mn += a;</span><br><span class="line">	<span class="keyword">int</span> num = (y - mn) / a + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (num &gt;= n) <span class="keyword">return</span> y;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> y + (n - num) * a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		z = y - x;</span><br><span class="line">		<span class="keyword">int</span> ans = INT_MAX, dv;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(z) + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (z % i == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> tmp = <span class="built_in">get</span>(i);</span><br><span class="line">				<span class="keyword">if</span> (ans &gt; tmp) &#123;</span><br><span class="line">					ans = tmp;</span><br><span class="line">					dv = i;</span><br><span class="line">				&#125;</span><br><span class="line">				tmp = <span class="built_in">get</span>(z / i);</span><br><span class="line">				<span class="keyword">if</span> (ans &gt; tmp) &#123;</span><br><span class="line">					ans = tmp;</span><br><span class="line">					dv = z / i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = ans - dv * (n - <span class="number">1</span>); i &lt;= ans; i += dv) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="D-Decrease-the-Sum-of-Digits"><a href="#D-Decrease-the-Sum-of-Digits" class="headerlink" title="D. Decrease the Sum of Digits"></a>D. <a href="https://codeforces.com/contest/1409/problem/D">Decrease the Sum of Digits</a></h2><div class="note info"><p>$T$ 组数据，每次输入一个数 $x$。令 $z=x+y$，求非负数 $y$ 的最小值，满足 $z$ 的各位数字之和不大于 $s$。</p>
<p>$T\leq 2\cdot 10^4,1\leq x\leq 10^{18},1\leq s\leq 162$</p>
</div>

<p>从个位开始，每次进一位并将该位置为 $0$，直到满足各位数字之和不大于 $s$ 为止。</p>
<p>复杂度 $O(\log{x})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 23:06:31</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t, x, y;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="built_in">sprintf</span>(a, <span class="string">&quot;%lld&quot;</span>, x);</span><br><span class="line">		len = <span class="built_in">strlen</span>(a);</span><br><span class="line">		s[<span class="number">0</span>] = a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) s[i] = s[i - <span class="number">1</span>] + a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (s[len - <span class="number">1</span>] &lt;= y) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == <span class="string">&#x27;9&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">int</span> cur = s[i - <span class="number">1</span>] + a[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (cur &lt;= y) &#123;</span><br><span class="line">				a[i] += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; ++j) a[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">&#x27;9&#x27;</span> &amp;&amp; a[<span class="number">0</span>] + <span class="number">1</span> - <span class="string">&#x27;0&#x27;</span> &lt;= y) &#123;</span><br><span class="line">				a[<span class="number">0</span>]++;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) a[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				a[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) a[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				++len;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> z = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) z = z * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		cout &lt;&lt; z - x &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="E-Two-Platforms"><a href="#E-Two-Platforms" class="headerlink" title="E. Two Platforms"></a>E. <a href="https://codeforces.com/contest/1409/problem/E">Two Platforms</a></h2><div class="note info"><p>$T$ 组数据，输入 $N$ 个点的坐标 $(x_i,y_i)$，以及 $K$。可以选择任意两个横坐标 $x_a,x_b$，则横坐标位于 $[x_a,x_a+K]$ 和 $[x_b,x_b+K]$ 的所有点会被收集。求最多收集多少个点。</p>
<p>$T\leq 2\cdot 10^4,\sum{N}\leq 2\cdot 10^5,K\leq 10^5,1\leq x_i\leq 10^9$</p>
</div>

<p>对坐标离散化，预处理出所有 $[x_i,x_i+K]$ 的点个数 $P_i$。从左往右枚举 $x_a$，然后算出 $[x_a+K,+\infty]$ 中最大的 $P_i$ 对应 $[x_b,x_b+K]$。</p>
<p>复杂度 $O(T\cdot N)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 23:27:56</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/E</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, k;</span><br><span class="line"><span class="keyword">int</span> x[MAXN], y[MAXN];</span><br><span class="line"><span class="keyword">int</span> r[MAXN], num[MAXN];</span><br><span class="line"><span class="keyword">int</span> id[MAXN], ans[MAXN], mx[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">upper_bound</span>(x + <span class="number">1</span>, x + n + <span class="number">1</span>, a) - x - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; x[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; y[i];</span><br><span class="line">		<span class="built_in">sort</span>(x + <span class="number">1</span>, x + n + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x[i] == x[i - <span class="number">1</span>]) id[i] = id[i - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> id[i] = id[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			++num[id[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		n = <span class="built_in">unique</span>(x + <span class="number">1</span>, x + n + <span class="number">1</span>) - x - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) num[i] += num[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			ans[i] = num[r[i] = <span class="built_in">get</span>(x[i] + k)] - num[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		mx[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">			mx[i] = <span class="built_in">max</span>(mx[i + <span class="number">1</span>], ans[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			res = <span class="built_in">max</span>(res, ans[i] + mx[r[i] + <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="F-Subsequences-of-Length-Two"><a href="#F-Subsequences-of-Length-Two" class="headerlink" title="F. Subsequences of Length Two"></a>F. <a href="https://codeforces.com/contest/1409/problem/F">Subsequences of Length Two</a></h2><div class="note info"><p>输入母串 $S$ 和子串 $T$，以及整数 $K$。要求修改 $S$ 的至多 $K$ 位，使得 $S$ 的与 $T$ 相同的子序列的数量最大。</p>
<p>$K\leq |S|\leq 200, |T|=2$</p>
</div>

<p>定义 $F[i][j][k]$ 表示 $S$ 的前 $i$ 位，进行了 $j$ 次修改，当前有 $k$ 个 $T[0]$ 的子序列为 $T$ 的数量，然后转移即可。</p>
<p>复杂度 $O(|S|^2\cdot K)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2020-09-04 23:50:14</span></span><br><span class="line"><span class="comment"> * Url: https://codeforces.com/contest/1409/problem/F</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="keyword">int</span> f[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> b[MAXN][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; K &gt;&gt; s &gt;&gt; t;</span><br><span class="line">	s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">	<span class="keyword">if</span> (t[<span class="number">0</span>] == t[<span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == t[<span class="number">0</span>]) ++num;</span><br><span class="line">		&#125;</span><br><span class="line">		num = <span class="built_in">min</span>(num + K, N);</span><br><span class="line">		cout &lt;&lt; num * (num - <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		b[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(i, K); ++j) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">					<span class="keyword">if</span> (s[i] == t[<span class="number">1</span>] &amp;&amp; b[i - <span class="number">1</span>][j][k]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j][k] + k);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (s[i] != t[<span class="number">1</span>] &amp;&amp; b[i - <span class="number">1</span>][j - <span class="number">1</span>][k]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + k);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (s[i] != t[<span class="number">1</span>] &amp;&amp; b[i - <span class="number">1</span>][j][k]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j][k]);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (s[i] == t[<span class="number">0</span>] &amp;&amp; b[i - <span class="number">1</span>][j][k - <span class="number">1</span>]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j][k - <span class="number">1</span>]);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (s[i] != t[<span class="number">0</span>] &amp;&amp; b[i - <span class="number">1</span>][j - <span class="number">1</span>][k - <span class="number">1</span>]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j - <span class="number">1</span>][k - <span class="number">1</span>]);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (s[i] != t[<span class="number">0</span>] &amp;&amp; b[i - <span class="number">1</span>][j][k]) &#123;</span><br><span class="line">						f[i][j][k] = <span class="built_in">max</span>(f[i][j][k], f[i - <span class="number">1</span>][j][k]);</span><br><span class="line">						b[i][j][k] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">				ans = <span class="built_in">max</span>(ans, f[N][i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;716 (Div. 2) 总结&amp;题解</title>
    <url>/2021/04/20/cf-1514/</url>
    <content><![CDATA[<p>晚上在上强化学习技术与应用时，无意间发现九点半有一场Div 2的CF，一看时间还挺合适，就报名了。</p>
<p>然而没想到半年过去了，打Div 2还是掉分。。</p>
<p>upd: 喜提rank2306、rating -50。</p>
<h3 id="A-Perfectly-Imperfect-Array"><a href="#A-Perfectly-Imperfect-Array" class="headerlink" title="A - Perfectly Imperfect Array"></a><a href="https://codeforces.com/contest/1514/problem/A">A - Perfectly Imperfect Array</a></h3><div class="note info"><p>给定序列，问其中是否存在一个子序列，使得它的乘积不是完全平方数。</p>
</div>

<p>若序列存在一个数不是完全平方数，则存在（该数），否则不存在（完全平方数的乘积还是完全平方数）。</p>
<p>21:36 PP，喜提498分。本以为是个良好的开局，没想到竟是巅峰……</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">int</span> y = <span class="built_in">sqrt</span>(x);</span><br><span class="line">            <span class="keyword">if</span> (y * y != x) flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-AND-0-Sum-Big"><a href="#B-AND-0-Sum-Big" class="headerlink" title="B - AND 0, Sum Big"></a><a href="https://codeforces.com/contest/1514/problem/B">B - AND 0, Sum Big</a></h3><div class="note info"><p>给定 $n$ 和 $k$，求有多少个长为 $n$ 的序列 $A[1\cdots n]$，满足 $A_i\in [0,2^k)$，所有数的AND值为$0$，且 $\sum{A_i}$ 最大。</p>
</div>

<p>一直在推式子，但是我对和的最大值的认识是错的，因此第二个样例死都过不去。几十分钟过去了，决定暴力DFS找规律。结果一下就找到了，答案是 $n^k$。果然我还是再一次高估了我的数学水平，再说作为Div. 2 B，规律肯定不难找，又naive了。</p>
<p>原理是这样的。由于所有数的AND为 $0$，因此对于二进制的每一位，都至少有一个数在这一位是 $0$。又因为要和最大，因此是每一位恰好有一个数是 $0$。一共有 $k$ 位，每位有 $n$ 个数可选择，因此是 $n^k$。</p>
<p>于是本题在 22:23 才过，这波就完全离谱。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">poww</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">poww</span>(N, K));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-Product-1-Modulo-N"><a href="#C-Product-1-Modulo-N" class="headerlink" title="C - Product 1 Modulo N"></a><a href="https://codeforces.com/contest/1514/problem/C">C - Product 1 Modulo N</a></h3><div class="note info"><p>在序列 $1,2,\cdots, n$ 中找到最长子序列 $a_i$，使得 $\prod{a_i}\bmod n=1$。</p>
<p>$n\leq 10^5$</p>
</div>

<p>根据乘法逆元的知识，若$a\times b\bmod{n}=1$，必然满足 $gcd(a,n)=gcd(b,n)=1$。</p>
<p>因此 $\forall gcd(a_i,n)=1$。找到 $[1,n]$ 所有满足 $gcd(i,n)=1$ 的 $i$，若它们的乘积是 $x(x\not =1)$，则去掉 $x$ 即可得到结果，反之全部输出。</p>
<p>其实我早就想到这儿了，我观察到乘积要么是 $1$ 要么是 $n-1$，于是我判定了若乘积为 $n-1$，则删掉 $n-1$。但是一直WA on test 3。懵逼途中，突然意识到当 $n=2$ 的时候，$n-1=1$，我的特判使得我输出了 $0$。</p>
<p>于是在贡献了四发Wrong answer on pretest 3后，最终在23:02才过。</p>
<p>我一看排名到了2k+，我就知道这次掉分估计是跑不掉了，除非做出来D。</p>
<p>然而屋漏偏逢连夜雨，此时理教楼又开始赶人了，我被迫收拾东西，最终搬到了更靠近大门的104。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !y ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1\n1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(i, N) == <span class="number">1</span>) s.<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : s) res = res * a % N;</span><br><span class="line">    <span class="keyword">if</span> (res == N - <span class="number">1</span>) s.<span class="built_in">erase</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)s.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : s) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger"><p><strong>Bonus task: $n\leq 10^{12}$ 的做法</strong></p>
</div>

<p>坑代填。</p>
<h3 id="D-Cut-and-Stick"><a href="#D-Cut-and-Stick" class="headerlink" title="D - Cut and Stick"></a><a href="https://codeforces.com/contest/1514/problem/D">D - Cut and Stick</a></h3><div class="note info"><p>给定长为 $n$ 的序列和 $m$ 个询问。每次询问区间 $[l,r]$ 至少拆分成几个子区间，使得每个子区间中不存在出现次数超过区间长度一半（向上取整）的数。</p>
<p>$n,m\leq 3\times 10^5$</p>
</div>

<p>首先不难发现，一个区间中最多出现一个这样的数，而这个数也是区间的众数。</p>
<p>因此第一步就是求区间众数的出现次数。这个可以用莫队算法维护，复杂度 $O(n\sqrt{n})$。</p>
<p>然后考虑如何拆分。</p>
<p>若 $[l,r]$ 中众数的出现次数不到长度的一半，则输出 $1$，即不用拆分。</p>
<p>若区间众数出现的次数超过一半，记为 $f$ 次，设区间长度为 $l$。</p>
<p>则有结论，该区间最少分成 $2f - l$ 个子区间。</p>
<p>这个证明其实很简单，虽然我考场上还在想着怎么二分去拆。。</p>
<p>对于一个合法区间，众数 $x$ 的出现次数至多比其他数多 $1$。而在原区间中，众数的出现次数比其他数多了 $f-(l-f)=2f-l$。</p>
<p>因此需要至少划分出 $2f-l$ 个子区间才能满足条件。</p>
<p>而这个下限是一定可以取到的。构造方法是，从左往右，每次找到一个非 $x$ 的数，计数器=1，然后向两边为遍历到的数延伸，遇到 $x$ -1，反之+1。当计数器为-1时，划分区间。如此下来，所有非 $x$ 数都有区间，且每个区间都满足 $x$ 比其他数的出现次数大 $1$。而对于剩下的 $x$，每个数一个区间。此时恰好 $2f-l$ 个区间。</p>
<p>因此划分的复杂度为 $O(m)$，总复杂度为 $O(n\sqrt{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: Skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-19 21:35:00</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], Pos[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pos[l] == Pos[x.l] ? (r == x.r ? <span class="number">0</span> : (Pos[l] &amp; <span class="number">1</span>) ^ (r &lt; x.r)) : l &lt; x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; B[MAXN];</span><br><span class="line"><span class="keyword">int</span> mx, Cnt[MAXN], Num[MAXN], Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;cx = Cnt[x];</span><br><span class="line">    --Num[cx];</span><br><span class="line">    ++Num[++cx];</span><br><span class="line">    mx = <span class="built_in">max</span>(mx, cx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;cx = Cnt[x];</span><br><span class="line">    <span class="keyword">if</span> (mx == cx &amp;&amp; Num[cx] == <span class="number">1</span>) --mx;</span><br><span class="line">    --Num[cx];</span><br><span class="line">    ++Num[--cx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">int</span> sz = N / <span class="built_in">sqrt</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">        Pos[i] = i / sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;B[i].l, &amp;B[i].r);</span><br><span class="line">        B[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(B + <span class="number">1</span>, B + M + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; B[i].l) <span class="built_in">add</span>(A[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; B[i].r) <span class="built_in">add</span>(A[++r]);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; B[i].r) <span class="built_in">del</span>(A[r--]);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; B[i].l) <span class="built_in">del</span>(A[l++]);</span><br><span class="line">        <span class="keyword">if</span> (mx &lt;= (B[i].r - B[i].l + <span class="number">2</span>) / <span class="number">2</span>) Ans[B[i].id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> Ans[B[i].id] = mx * <span class="number">2</span> - (B[i].r - B[i].l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger no-icon"><p><strong>Bonus task: $O(n\log{n})$ 做法​</strong></p>
</div>

<p>坑代填。</p>
<h3 id="E-Baby-Ehab’s-Hyper-Apartment"><a href="#E-Baby-Ehab’s-Hyper-Apartment" class="headerlink" title="E - Baby Ehab’s Hyper Apartment"></a><a href="https://codeforces.com/contest/1514/problem/E">E - Baby Ehab’s Hyper Apartment</a></h3><p>还不会做，坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35;717 (Div. 2) 总结&amp;题解</title>
    <url>/2021/04/22/cf-1516/</url>
    <content><![CDATA[<p>又看到了一场CF，还是在九点半，抱着一雪前耻的心态，于是我又报名了。作者居然还是上次的<strong>mohammedehab2002</strong>。</p>
<p>就说同样是2002年的，为什么就我这么菜呐？</p>
<p>这次rank 762，rating +40。</p>
<h3 id="A-Perfectly-Imperfect-Array"><a href="#A-Perfectly-Imperfect-Array" class="headerlink" title="A - Perfectly Imperfect Array"></a><a href="https://codeforces.com/contest/1514/problem/A">A - Perfectly Imperfect Array</a></h3><p>莫名其妙WA了一发，真佛了。。</p>
<div class="note info"><p>给一个长为 $n$ 的序列，每次操作可以选择两个数，使一个+1,另一个-1，但要保证序列中的数时刻非负。</p>
<p>求至多 $k$ 次操作后，能得到的字典序最小的序列。</p>
</div>

<p>每次操作都使最后一个数+1，-1则从第一个数开始，减到 $0$ 就到下一个数。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/A</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> T, N, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line">        v.<span class="built_in">resize</span>(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N &amp;&amp; K; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="built_in">min</span>(v[i], K);</span><br><span class="line">            v[i] -= cur;</span><br><span class="line">            v[N - <span class="number">1</span>] += cur;</span><br><span class="line">            K -= cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-AGAGA-XOOORRR"><a href="#B-AGAGA-XOOORRR" class="headerlink" title="B - AGAGA XOOORRR"></a><a href="https://codeforces.com/contest/1516/problem/B">B - AGAGA XOOORRR</a></h3><div class="note info"><p>给一个长为 $n$ 的序列，每次可以将相邻的两个合并成它们的XOR值，长度-1。求经过若干次操作后，能否得到所有元素相等（序列至少剩下两个数）。</p>
<p>$n\leq 2000$</p>
</div>

<p>贡献了2发WA，才醒悟过来，开始的想法就是错误的。</p>
<p>首先，如果所有元素的XOR为 $0$，那么一定能得到两个相同的数。</p>
<p>若XOR不为零，考虑能否剩下三个相同的数。</p>
<p>我们发现如果能剩下 $x$ 个相同的数，则一定能剩下 $x-2$ 个相同的数（将相邻的三个数合并即可）。因而能剩下奇数个相同的数，等价于能剩下三个相同的数。</p>
<p>那么三个数应该分别为 $A[1]\oplus\cdots A[l]$，$A[l+1]\oplus\cdots A[r]$ 和 $A[r+1]\oplus\cdots A[n]$。</p>
<p>因此枚举 $l,r$，判断这三个值是否相同即可，复杂度 $O(n^2)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/B</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">        v.<span class="built_in">resize</span>(N);</span><br><span class="line">        v2.<span class="built_in">resize</span>(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">            v2[i] = v[i];</span><br><span class="line">            <span class="keyword">if</span> (i) v2[i] ^= v2[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!v2.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; N; ++l) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = l; r &lt; N - <span class="number">1</span>; ++r) &#123;</span><br><span class="line">                <span class="keyword">int</span> ll = v2[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> mid = v2[r] ^ v2[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> rr = v2.<span class="built_in">back</span>() ^ v2[r];</span><br><span class="line">                <span class="keyword">if</span> (ll == mid &amp;&amp; mid == rr) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<div class="note danger"><p><strong>Bonus task1: $O(n)$ 解法</strong></p>
</div>

<p>坑代填。</p>
<div class="note danger"><p><strong>Bonus task2: 当要求最终序列剩余至少 $k(k&gt;2)$ 个数的解法</strong></p>
</div>

<p>坑代填。</p>
<h3 id="C-Baby-Ehab-Partitions-Again"><a href="#C-Baby-Ehab-Partitions-Again" class="headerlink" title="C - Baby Ehab Partitions Again"></a><a href="https://codeforces.com/contest/1516/problem/C">C - Baby Ehab Partitions Again</a></h3><div class="note info"><p>给一个长为 $n$ 的序列 $A[1\cdots n]$，求至少删除哪几个数，使它不能被拆分成两个和相等的子序列。</p>
<p>$n\leq 100, 0\leq A[i]\leq 2000$</p>
</div>

<p>久违的1A，拯救了我的排名。。</p>
<p>首先若 $\sum{A[i]}$ 是奇数，答案显然是 $0$，否则跑个背包DP，如果无法凑出 $\frac{\sum{A[i]}}{2}$，则也输出 $0$。</p>
<p>此时 $\sum{A[i]}$ 为偶数。若存在 $A[p]$ 为奇数，则删去 $A[p]$ 后， $\sum{A[i]}$ 为奇数，必然无法拆分。此时答案为 $1$。</p>
<p>此时 $\forall A[i]$ 都是偶数。我们发现若 $A$ 存在一种拆分方法，则 ${\frac{A[i]}{2}}$ 也有相同的拆分方法。因此可以令<code>A[i] /= 2</code> 再重复之前的判断，然后再除以二，直到出现某个数为奇数为止。</p>
<p>可见至多只需要删除一个数。</p>
<p>事实上，记 $g=gcd(A[1],\cdots,A[n])$，则 ${\frac{A[1]}{g},\cdots,\frac{A[n]}{g}}$ 与 $A$ 有相同的解。一定存在某个 $\frac{A[p]}{g}$ 为奇数，即为被删除的数。</p>
<p>复杂度 $O(n\sum{A[i]}+n\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/C</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) sum += x;</span><br><span class="line">    <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s[<span class="number">0</span>].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; N; ++i, t ^= <span class="number">1</span>) &#123;</span><br><span class="line">            s[t ^ <span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : s[t]) &#123;</span><br><span class="line">                s[t ^ <span class="number">1</span>].<span class="built_in">insert</span>(x + v[i]);</span><br><span class="line">                s[t ^ <span class="number">1</span>].<span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="keyword">if</span> (x + v[i] == sum / <span class="number">2</span>) flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cur = <span class="number">2</span>; ; cur *= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sum - v[i]) / <span class="number">2</span> % cur) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-Cut"><a href="#D-Cut" class="headerlink" title="D - Cut"></a><a href="https://codeforces.com/contest/1516/problem/D">D - Cut</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $A[1\cdots n]$，有 $m$ 个询问。每次给定区间 $[l,r]$，求 $A[l,r]$ 至少分成几个子区间，使得每个子区间满足 $\prod{A[i]}=lcm(A[i])$。</p>
<p>$n,m,A[i]\leq 10^5$</p>
</div>

<p>对于满足的条件的子区间，显然满足 $\forall \gcd\limits_{i\not =j}(A[i],A[j])=1$。</p>
<p>对于一个查询区间 $A[l,r]$，可以贪心地去求最少划分数。即从 $A[l]$ 开始向右拓展，每次当区间不满足任意两数互质时，另起一个新的区间，直到 $A[r]$ 为止。</p>
<p>也就是说如果左端点 $l$ 确定，则每次划分的子区间都是相同的，而子区间的数量取决于 $A[r]$ 的位置。</p>
<p>因此想到了倍增，预处理出 $f[i][j]$ 表示第 $i$ 个数开始，通过 $2^j$ 个子区间能拓展到的右端点。那么查询即可用 $O(\log{n})$ 的复杂度完成，类似倍增求LCA。</p>
<p>现在的问题变成如何求出以 $A[i]$ 开始第一次拓展到的右端点，即 $f[i][0]$。</p>
<p>从右往左更新。对每个数分解质因数，$g[i]$ 表示质因数 $i$ 上一次出现的位置。</p>
<p>那么 <code>f[i][0]=min(f[i+1][0],g[j]),g[j]=i</code>，其中 $j$ 遍历 $A[i]$ 的所有质因数。</p>
<p>分解质因数的时候，可以采取埃氏筛预处理出每个数的质因数：</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i) v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>但是这仅限于 $A[i]$ 的范围较小时可用。</p>
<p>也可以欧拉筛预处理所有质数，然后暴力拆：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : pri) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % p == <span class="number">0</span>) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(p);</span><br><span class="line">            <span class="keyword">while</span> (x % p == <span class="number">0</span>) x /= p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这样的复杂度高达 $O(\frac{x}{\log{x}})$，我一直没有注意到这一点，直到今天改题的时候TLE on test 22。</p>
<p>正确的做法应该是将 $p$ 枚举到 $\sqrt{x}$ 时退出循环，若此时 $x$ 不是 $1$，则它也是一个质因数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v; v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : pri) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % p == <span class="number">0</span>) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(p);</span><br><span class="line">            <span class="keyword">while</span> (x % p == <span class="number">0</span>) x /= p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p * p &gt; x) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) v.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度 $O(m\log{n}+\frac{n\sqrt{n}}{\log{n}})$ （用Pollard_rho可以做到 $O(m\log{n}+n^{\frac{5}{4}})$）。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-21 21:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1516/problem/D</span></span><br><span class="line"><span class="comment"> * Problem: CF 1516 D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">20</span>][MAXN], Nxt[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            Nxt[i] = N + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; MAXN; j += i) p[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>][N + <span class="number">1</span>] = N + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        F[<span class="number">0</span>][i] = F[<span class="number">0</span>][i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : p[A[i]]) &#123;</span><br><span class="line">            F[<span class="number">0</span>][i] = <span class="built_in">min</span>(F[<span class="number">0</span>][i], Nxt[y]);</span><br><span class="line">            Nxt[y] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">ceil</span>(<span class="built_in">log2</span>(N));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (F[i - <span class="number">1</span>][j] &gt; N) F[i][j] = F[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> F[i][j] = F[i - <span class="number">1</span>][F[i - <span class="number">1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (F[i][l] &lt;= r) &#123;</span><br><span class="line">                ans += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                l = F[i][l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Baby-Ehab-Plays-with-Permutations"><a href="#E-Baby-Ehab-Plays-with-Permutations" class="headerlink" title="E - Baby Ehab Plays with Permutations"></a><a href="https://codeforces.com/contest/1516/problem/E">E - Baby Ehab Plays with Permutations</a></h3><p>还不会做，坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 14 总结&amp;题解</title>
    <url>/2021/05/03/cf-1515/</url>
    <content><![CDATA[<p>急急忙忙赶完军事理论课的论文，开打CF。</p>
<p>开始立了个慢慢做尽量不要犯脑瘫错误的flag，结果又成功-100。。</p>
<p>rank 1015/22554，rating+43，到了紫名。。</p>
<h3 id="A-Phoenix-and-Gold"><a href="#A-Phoenix-and-Gold" class="headerlink" title="A - Phoenix and Gold"></a><a href="https://codeforces.com/contest/1515/problem/A">A - Phoenix and Gold</a></h3><div class="note info"><p>$T$ 组数据。</p>
<p>每次给定长为 $n$ 的序列 $a$ 和整数 $m$，保证序列中任意两个数都不同。先要将这 $n$ 个数重新排列，得到序列 $b$，使得 $\forall r\in[1,n], \sum\limits_{i=1}^{r}{b_i}\not= m$。如果无解，输出 <code>-1</code>。</p>
<p>$T\leq 1000, n\leq 100, m\leq 10^4$ </p>
</div>

<p>不难发现，除非 $\sum\limits_{1}^{n}{a_i}=m$，否则都有方案满足条件。</p>
<p>按照原顺序输出 $a$，并记录当前前缀和 $s$，如果 $s+a_i=m$，则交换 $a_i$ 和 $a_{i+1}$。由于 $a_i\not= a_{i+1}$，因此 $s+a_{i+1}\not= m$。由于 $\sum\limits_{1}^{n}{a_i}\not =m$，所以一直这么做，不会出现前缀和为 $m$ 的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-05-02 22:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1515/problem/A</span></span><br><span class="line"><span class="comment"> * Problem: CF 1515 A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        v.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) sum += x;</span><br><span class="line">        <span class="keyword">if</span> (sum == m) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            sum += v[i];</span><br><span class="line">            <span class="keyword">if</span> (sum == m) <span class="built_in">swap</span>(v[i], v[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B-Phoenix-and-Puzzle"><a href="#B-Phoenix-and-Puzzle" class="headerlink" title="B - Phoenix and Puzzle"></a><a href="https://codeforces.com/contest/1515/problem/B">B - Phoenix and Puzzle</a></h3><div class="note info"><p>给你 $n$ 个边长为 $1$ 的等腰直角三角形，求能否拼成一个正方形。</p>
</div>

<p>如果拼出边长为 $1$ 的正方形，需要两个三角形。因而拼出边长为 $x$ 的三角形，需要 $2\times x^2$ 个三角形。</p>
<p>如果拼出边长为 $\sqrt{2}$ 的正方形，需要四个三角形。因而拼出边长为 $x\sqrt{2}$ 的三角形，需要 $4\times x^2$ 个三角形。 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-05-02 22:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1515/problem/B</span></span><br><span class="line"><span class="comment"> * Problem: CF 1515 B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">sqrt</span>(n / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (x * x == n / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">sqrt</span>(n / <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">if</span> (x * x == n / <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-Phoenix-and-Towers"><a href="#C-Phoenix-and-Towers" class="headerlink" title="C - Phoenix and Towers"></a><a href="https://codeforces.com/contest/1515/problem/C">C - Phoenix and Towers</a></h3><div class="note info"><p>将 $n$ 个数（$a_i\leq x$）分成 $m$ 组，每组的权值为其中的数之和。要求任意两组权值之差不能超过 $x$，求一种分组方案。如果无解，输出<code>NO</code>。</p>
</div>

<p>前面还小心翼翼的，结果这题贡献了一发resubmission。关键是重交完之后才发现前一份就是对的，尴尬。。</p>
<p>其实可以发现，是不可能无解的，因为每个数都不超过 $x$。</p>
<p>可惜我开始为了调试，在判断无解的时候写了 <code>if (... &amp; 0) puts(&quot;NO&quot;);</code>，没想到过了pretest。为了不FST，只能删掉了<code>&amp; 0</code>重新交了一份，交完才意识到过pretest并不是因为pretest中没有无解的情况，而是任何数据都不可能无解。。</p>
<p>于是当时排名直接从300+掉到500+。</p>
<p>做法是个很trivial的贪心，将所有数从大到小排序，每次将当前数插入到权值最小的组中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-05-02 22:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1515/problem/C</span></span><br><span class="line"><span class="comment"> * Problem: CF 1515 C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, k;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; f, g;</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        v.<span class="built_in">resize</span>(n);</span><br><span class="line">        f.<span class="built_in">resize</span>(m, <span class="number">0</span>);</span><br><span class="line">        g.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i].first);</span><br><span class="line">            v[i].second = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; m) &#123;</span><br><span class="line">                f[cur] = v[i].first;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;-f[cur], cur&#125;);</span><br><span class="line">                g[v[i].second] = cur;</span><br><span class="line">                ++cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> idx = pq.<span class="built_in">top</span>().second; pq.<span class="built_in">pop</span>();</span><br><span class="line">                f[idx] += v[i].first;</span><br><span class="line">                g[v[i].second] = idx;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;-f[idx], idx&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mn = INT_MAX, mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : f) &#123;</span><br><span class="line">            mn = <span class="built_in">min</span>(mn, x);</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : g) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="D-Phoenix-and-Socks"><a href="#D-Phoenix-and-Socks" class="headerlink" title="D - Phoenix and Socks"></a><a href="https://codeforces.com/contest/1515/problem/D">D - Phoenix and Socks</a></h3><div class="note info"><p>有 $2n$ 只袜子，其中 $l$ 只左袜，$r$ 只右袜。每个袜子有颜色 $c_i$。颜色相同的一只左袜和一只右袜可以配对成一双袜子。</p>
<p>现在有 $3$ 种操作，花费都是 $1$：</p>
<ul>
<li>改变一只袜子的颜色，方向不变</li>
<li>将某只袜子从左袜变成右袜，颜色不变</li>
<li>将某只袜子从右袜变成左袜，颜色不变</li>
</ul>
<p>求最小花费完成这 $2n$ 只袜子的配对。</p>
</div>

<p>血泪教训，直接复制粘贴结构相似的代码，改变量名的时候一定看仔细了，我就是忘了把<code>numr</code> 改成 <code>numl</code> 喜提一发wa on test 2。。</p>
<p>把能配对的袜子都配对，那么剩下若干无法匹配的袜子。</p>
<p>假设剩下 $numl$ 只左袜，$numr$ 只右袜。</p>
<p>记录 $|f[i]|$ 表示颜色为 $i$ 的袜子剩下几只，$f[i]&gt;0$ 表示剩下的是左袜， $f[i]&lt;0$ 表示剩下的是右袜。</p>
<p>如果 $numl\not= numr$，则需要把数量多的袜子换个方向。对于颜色 $i$，将 $\lfloor\frac{|f[i]|}{2}\rfloor$ 只袜子换方向，这样它们就可以直接与剩下 $\lceil\frac{f[i]}{2}\rceil$ 只袜子配对，此时 $|numl-numr|$ 减小 $\lfloor\frac{|f[i]|}{2}\rfloor$ 。</p>
<p>但是可能对所有颜色都执行完，$numl$ 仍然与 $numr$ 不相等，那就只能暴力改了，这会使每只多的袜子花费 $2$，需要先换方向，再换颜色。花费为 $\frac{|numl-numr|}{2}+\frac{numl+numr}{2}$。</p>
<p>那么总花费就能算出来了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-05-02 22:35:54</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1515/problem/D</span></span><br><span class="line"><span class="comment"> * Problem: CF 1515 D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, l, r;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, f, vl, vr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">        v.<span class="built_in">resize</span>(n);</span><br><span class="line">        f.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : f) x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">            ++f[v[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; n; ++i) &#123;</span><br><span class="line">            --f[v[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, numl = <span class="number">0</span>, numr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[i] &gt; <span class="number">0</span>) numl += f[i];</span><br><span class="line">            <span class="keyword">if</span> (f[i] &lt; <span class="number">0</span>) numr += -f[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numl &gt; numr) &#123;</span><br><span class="line">            <span class="keyword">int</span> more = numl - numr;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = <span class="built_in">min</span>(more, f[i] / <span class="number">2</span> * <span class="number">2</span>);</span><br><span class="line">                    ans += tmp / <span class="number">2</span>;</span><br><span class="line">                    more -= tmp;</span><br><span class="line">                    numl -= tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numr &gt; numl) &#123;</span><br><span class="line">            <span class="keyword">int</span> more = numr - numl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = <span class="built_in">min</span>(more, -f[i] / <span class="number">2</span> * <span class="number">2</span>);</span><br><span class="line">                    ans += tmp / <span class="number">2</span>;</span><br><span class="line">                    more -= tmp;</span><br><span class="line">                    numr -= tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + <span class="built_in">abs</span>(numl - numr) / <span class="number">2</span> + (numl + numr) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="E-Phoenix-and-Computers"><a href="#E-Phoenix-and-Computers" class="headerlink" title="E - Phoenix and Computers"></a><a href="https://codeforces.com/contest/1515/problem/E">E - Phoenix and Computers</a></h3><div class="note info"><p>有 $n$ 台电脑摆成一排，现在想要将它们全部开机。</p>
<p>每次可以选择一台没有开机的电脑开机，而电脑有个特性，就是如果它左侧和右侧那台电脑都开机了，那么它会自动开机（也就是说不能再选择它开机）。</p>
<p>求有多少种不同的开机方案，答案对 $m$ 取模。</p>
<p>$n\leq 400, 10^8\leq m\leq 10^9$。</p>
</div>

<p>太马了，挣扎了俩小时也没做出来，其实就差临门一脚了。。</p>
<p>开始想的是区间DP，但是发现没法合并，如果要强行合并的话复杂度又太高。。</p>
<p>考虑这样一个子问题，我要打开 $[1,x]$ 的所有电脑，要求没有电脑自动开机的方案数。</p>
<p>那么选择第一个开机的电脑 $y$ 后，下一步要么开 $y-1$，要么开 $y+1$，没有其他选择。因为如果开其他的电脑，那么一定存在某台电脑被自动开机（它被两边夹住了）。</p>
<p>也就是说在任意时刻，开机的电脑都是个连续区间 $[l,r]$，而下一步只能选择 $l-1$ 或者 $r+1$。</p>
<p>那么有多少种方案呐？</p>
<p>对于区间 $[1,x]$，第一步选择 $y$ 后，可以往左延伸 $y-1$ 次，则方案数为 $\binom{y-1}{x}$。</p>
<p>取 $y=1,2,\cdots,x$，那么总方案数为 $\binom{x}{0}+\binom{x}{1}+\cdots+\binom{x}{x}=2^{x-1}$。</p>
<p>那么对于任意一个合法的开机方案，都可以划分为若干个区间 $[l_i,r_i]$ 分别开机，其中 $r_i=l_{i+1}-1$，相邻两个区间中间的那台电脑被自动开机。</p>
<p>令 $f_{x,y}$ 表示开机了 $[1,x-1]$ 的所有电脑，其中 $y$ 台为手动开机的方案数，则 $f_{x+k+1,y+k}=f_{x,y}\times 2^k\times \binom{y+k}{y}$，其中 $2^{k-1}$ 表示开机区间 $[x+1,x+k]$ 的方案数，而由于不同区间是相互独立的，可以按照任意顺序开机，因此 $C^k_{y+k}$ 表示将新区间的 $k$ 次开机可以在总共 $y+k$ 次开机中任意选择。</p>
<p>这等价于合并两个序列，第一个序列有 $f_{x,y}$ 种情况，长为 $y$，第二个序列有 $2^k$ 种情况，长为 $k$。则合并后得到的长为 $y+k$ 的新序列有 $f_{x,y}\times 2^{k-1}\times \binom{y+k}{y}$ 种不同情况。</p>
<p>最终答案为 $\sum\limits_{1}^{n}{f_{n+1,i}}$，复杂度 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-05-02 22:35:54</span></span><br><span class="line"><span class="comment"> * Source:</span></span><br><span class="line"><span class="comment"> * Problem:</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">400</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[MAXN][MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Bin[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    Bin[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Bin[i] = Bin[i - <span class="number">1</span>] * <span class="number">2</span> % M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % M;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; i + k &lt;= N; ++k) &#123;</span><br><span class="line">                F[i + k + <span class="number">1</span>][j + k] += F[i][j] * Bin[k - <span class="number">1</span>] % M * C[j + k][k] % M;</span><br><span class="line">                F[i + k + <span class="number">1</span>][j + k] %= M;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) ans = (ans + F[N + <span class="number">1</span>][i]) % M;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其余坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Contest 2050 and Codeforces Round &amp;#35;718 (Div. 1 + Div. 2) 总结&amp;题解</title>
    <url>/2021/04/24/cf-1517/</url>
    <content><![CDATA[<p>晚上困得要死，担心比赛的时候起不来。查了一下发现报名了只要不提交就不掉rating，于是就报名了。</p>
<p>然后就一觉从八点睡到十点半。。。</p>
<h3 id="A-Sum-of-2050"><a href="#A-Sum-of-2050" class="headerlink" title="A - Sum of 2050"></a><a href="https://codeforces.com/contest/1517/problem/A">A - Sum of 2050</a></h3><div class="note info"><p>形如 $2050,2050\times 10,\cdots, 2050\times 10^n$ 都是2050-number。$t$ 组数据，每次输入 $x$，问它能拆成至少多少个2050-number之和，拆不出来输出<code>-1</code>。</p>
</div>

<p>如果 $x$ 不是 $2050$ 的倍数，输出<code>-1</code>。否则就类似求十进制数的各位数之和的做法，区别是这次的底是 $2050$，复杂度 $O(t\log{x})$ 。</p>
<p>针不戳，00:01就pp了，暗示着一个好开头（？）</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/A</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 A</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2050</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            ll y = <span class="number">2050</span>;</span><br><span class="line">            <span class="keyword">while</span> (y &lt;= x) y *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                ans += x / y;</span><br><span class="line">                x %= y;</span><br><span class="line">                y /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="B-Morning-Jogging"><a href="#B-Morning-Jogging" class="headerlink" title="B - Morning Jogging"></a><a href="https://codeforces.com/contest/1517/problem/B">B - Morning Jogging</a></h3><div class="note info"><p>$t$ 组数据。有 $n$ 组数，每组有 $m$ 个数。现在要将每组的 $m$ 个数分别标号为 $1,\cdots m$。则每个编号在每个组都有一个数，记编号 $i$ 在第 $j$ 组的数为 $a_{i,j}$ 。求 $\sum\limits_{i=1}^{m}{\min\limits_{j=1}^{n}{a_{i,j}}}$ 的最小值。 </p>
<p>$1\leq \sum{n},\sum{m}\leq 10^4$</p>
</div>

<p>多组数据不清空，爆零两行泪。</p>
<p>很明显的贪心，用优先队列维护最小值。每次取出这 $n$ 组中的最小值，那它和其他 $n-1$ 个组中的最大值凑成一个编号的 $n$ 个数，如此操作显然会使和最小。</p>
<p>复杂度 $O(n\log{m}+m\log{n})$。</p>
<p>然而多组数据一定要记得对容器清空！！这不，我就忘清空priority_queue了，喜提<code>wa on test 2</code>。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/B</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 B</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> N, M, B[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN][MAXN];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Pq;</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">        <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>()) Pq.<span class="built_in">pop</span>(); <span class="comment">//!</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;B[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">sort</span>(B[i] + <span class="number">1</span>, B[i] + M + <span class="number">1</span>);</span><br><span class="line">            Pq.<span class="built_in">push</span>(&#123;-B[i][<span class="number">1</span>], i&#125;);</span><br><span class="line">            R[i] = M;</span><br><span class="line">            L[i] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= M; ++m) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = -Pq.<span class="built_in">top</span>().first, y = Pq.<span class="built_in">top</span>().second; Pq.<span class="built_in">pop</span>();</span><br><span class="line">            Ans[y][m] = x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y != i) Ans[i][m] = B[i][R[i]--];</span><br><span class="line">            &#125;</span><br><span class="line">            Pq.<span class="built_in">push</span>(&#123;-B[y][L[y]++], y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Ans[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="C-Fillomino-2"><a href="#C-Fillomino-2" class="headerlink" title="C - Fillomino 2"></a><a href="https://codeforces.com/contest/1517/problem/C">C - Fillomino 2</a></h3><div class="note info"><p>有一个 $n\times n$ 的棋盘。输入棋盘的左对角线上的 $n$ 个数，它们组成了一个 $1\sim n$ 的排列。现在要用若干个 $1\sim n$ 填入棋盘左侧的格子（即对角线左侧的格子），要求编号相同的格子联通，且连通块的大小恰好等于其格子的编号。</p>
<p>$n\leq 500$</p>
</div>

<p>思路不难想，但是刚做的时候一直没完全想明白，写了几次被我用随机数据肉眼发现错误后，又改了这一版就过了。。</p>
<p>直观上理解，从对角线向左拓展，右下角的点最难走到，而如果只在对角线附近拓展，可能把其他点的拓展路径阻断（因为一个点的第一步拓展只有向左和向下两种途径）。</p>
<p>因此在对角线上从第一行开始拓展，拓展方式是先向左，若左侧格子已有数，则向下拓展，然后继续向左，直到联通块大小和其格子上的数相同为止。</p>
<p>不过我不会证明其正确性。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/C</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 C</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> B[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> &amp;num, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    --num;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">1</span> &amp;&amp; !B[x][y - <span class="number">1</span>]) --y;</span><br><span class="line">        <span class="keyword">else</span> ++x;</span><br><span class="line">        B[x][y] = p;</span><br><span class="line">        --num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;B[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = B[i][i];</span><br><span class="line">        <span class="built_in">move</span>(i, i, num, B[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, B[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="D-Explorer-Space"><a href="#D-Explorer-Space" class="headerlink" title="D - Explorer Space"></a><a href="https://codeforces.com/contest/1517/problem/D">D - Explorer Space</a></h3><div class="note info"><p>有一个 $n\times m$ 的棋盘上，给定任意两个左右相邻和上下相邻的格子之间的距离。求以每个格子为起点，走恰好 $k$ 步后返回起点的最小距离，若无法回到起点，输出 <code>-1</code>。</p>
<p>$n,m\leq 500,k\leq 20$</p>
</div>

<p>感觉这个比C简单多了。</p>
<p>当 $k$ 为奇数的时候，显然回不到起点，输出<code>-1</code>。</p>
<p>然后我们可以将路径分成两部分，前 $\frac{k}{2}$ 步探索最短路径，而后 $\frac{k}{2}$ 步原路返回。</p>
<p>因此可以DP，令 $f(i,j,k)$ 表示通过 $k$ 步到达 $(i,j)$ 的最小距离，从相邻四个点转移。则点 $(i,j)$ 的答案为 $2\times f(i,j,\frac{k}{2})$。</p>
<p>复杂度 $O(nmk)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Code Information</span></span><br><span class="line"><span class="comment"> * Author: little_skqliao</span></span><br><span class="line"><span class="comment"> * Time: 2021-04-23 22:35:03</span></span><br><span class="line"><span class="comment"> * Source: https://codeforces.com/contest/1517/problem/D</span></span><br><span class="line"><span class="comment"> * Problem: CF 1517 D</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> F[MAXK][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">if</span> (K &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i][j][<span class="number">0</span>]);</span><br><span class="line">            A[i][j + <span class="number">1</span>][<span class="number">2</span>] = A[i][j][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i][j][<span class="number">1</span>]);</span><br><span class="line">            A[i + <span class="number">1</span>][j][<span class="number">3</span>] = A[i][j][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    K /= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(F, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">    <span class="built_in">memset</span>(F[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> F[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= K; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; ++d) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + Dicx[d];</span><br><span class="line">                    <span class="keyword">int</span> y = j + Dicy[d];</span><br><span class="line">                    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; N || y &gt; M) <span class="keyword">continue</span>;</span><br><span class="line">                    F[k][i][j] = <span class="built_in">min</span>(F[k][i][j], F[k - <span class="number">1</span>][x][y] + A[i][j][d]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, F[K][i][j] * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="E-Group-Photo"><a href="#E-Group-Photo" class="headerlink" title="E - Group Photo"></a><a href="https://codeforces.com/contest/1517/problem/E">E - Group Photo</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $a$，现要将 $a$ 分成划两个子序列 $p,q$，要求满足 $\sum{a_{p_i}}&lt;\sum{a_{q_i}}$，且 $p_i-p_{i-1}\leq p_{i+1}-p_i$，$q_i-q_{i-1}\geq q_{i+1}-q_i$。</p>
<p>求有多少种划分方案。</p>
<p>$n\leq 200000$</p>
</div>

<p>其实思路核心都推出来了，但是不太敢交。。</p>
<p>坑代填。</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>Educational Codeforces Round 108 (Rated for Div. 2) 总结&amp;题解</title>
    <url>/2021/05/01/cf-1519/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>团体程序天梯赛2021 游记&amp;代码</title>
    <url>/2021/04/24/gplt-2021/</url>
    <content><![CDATA[<p>毫无准备就去了，似乎因为选拔赛考的还行于是混进了1队？。。</p>
<p>双机位监考感觉没啥用，手机端上传网速不足1kb/s，这是哪门子监考？。。</p>
<p>听考过的学长说，天梯赛刚开始的时候会特别卡。于是果不其然就崩了，开局十分钟愣是一直在空白的网页上刷新，差评。</p>
<p>不过没想到能实时看到分数和排名，包括个人、团队和学校三个榜，好评。</p>
<p>题除了倒数俩题都很简单，这俩题会单独写一发题解，其他的没必要题解了，就发个代码。</p>
<p><del><mark class="label warning">总分265，除了最后一题5分</mark></del>，其他都是满分，无一血。<mark class="label info">（upd：重测后变成了261，最后一题1分）</mark></p>
<p><del><mark class="label warning">bit1队在最后一分钟rush了一波，喜提团队榜金牌最后一名（比福州大学1队就高了1分）</mark></del>，bit喜提学校榜银牌第一名<del><mark class="label warning">（差了100多分）</mark></del>，skqliao摸了个个人榜金牌。</p>
<mark class="label info">upd：重测后，3-3的5分变1分了。不过在bit1队里，zzq直接了A次此题，lk等变成了7分，而PKU原本30的全挂了。最终bit1队也因此从金尾冲到了金牌第五，福州大学1队也顺势苟入金牌，而PKU1队惨得银牌榜首。 不过BIT的学校排名仍然稳居银牌第一，只是分差从100+变成了70。。</mark>

<h3 id="1-1"><a href="#1-1" class="headerlink" title="1-1"></a>1-1</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;To iterate is human, to recurse divine.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-2"><a href="#1-2" class="headerlink" title="1-2"></a>1-2</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a - b * c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-3"><a href="#1-3" class="headerlink" title="1-3"></a>1-3</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(s) == <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">6</span>; ++i) <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + s[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;20%c%c-%c%c&quot;</span>, s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;19%c%c-%c%c&quot;</span>, s[<span class="number">0</span>], s[<span class="number">1</span>], s[<span class="number">2</span>], s[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-4"><a href="#1-4" class="headerlink" title="1-4"></a>1-4</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; M) <span class="built_in">printf</span>(<span class="string">&quot;On Sale! %.1lf\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-5"><a href="#1-5" class="headerlink" title="1-5"></a>1-5</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">23</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[x] &gt; <span class="number">50</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d Yes\n&quot;</span>, A[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d No\n&quot;</span>, A[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-6"><a href="#1-6" class="headerlink" title="1-6"></a>1-6</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, s);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;qiandao&quot;</span>) != string::npos || s.<span class="built_in">find</span>(<span class="string">&quot;easy&quot;</span>) != string::npos) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (M-- == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Wo AK le&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-7"><a href="#1-7" class="headerlink" title="1-7"></a>1-7</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        ++Num[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, Num.<span class="built_in">begin</span>()-&gt;first, Num.<span class="built_in">begin</span>()-&gt;second);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, (--Num.<span class="built_in">end</span>())-&gt;first, (--Num.<span class="built_in">end</span>())-&gt;second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="1-8"><a href="#1-8" class="headerlink" title="1-8"></a>1-8</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) v.<span class="built_in">push_back</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;v[<span class="number">1</span>], &amp;v[<span class="number">2</span>], &amp;N);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (v.<span class="built_in">size</span>() &lt;= N) &#123;</span><br><span class="line">        <span class="built_in">add</span>(v[cur] * v[cur - <span class="number">1</span>]);</span><br><span class="line">        ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, v[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">char</span>&gt; Q[MAXN];</span><br><span class="line">string s;</span><br><span class="line">stack&lt;<span class="keyword">char</span>&gt; stk;</span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">    s.<span class="built_in">push_back</span>(stk.<span class="built_in">top</span>());</span><br><span class="line">    stk.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) Q[i].<span class="built_in">push</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) &amp;&amp; ~x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[x].<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">size</span>() == K) <span class="built_in">pop</span>();</span><br><span class="line">            stk.<span class="built_in">push</span>(Q[x].<span class="built_in">front</span>());</span><br><span class="line">            Q[x].<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"><span class="keyword">int</span> Nxt[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (G[x].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> hx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">        <span class="keyword">int</span> hv = <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (hv &gt; hx) &#123;</span><br><span class="line">            hx = hv;</span><br><span class="line">            Nxt[x] = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hv == hx) &#123;</span><br><span class="line">            Nxt[x] = <span class="built_in">min</span>(Nxt[x], v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hx + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="built_in">memset</span>(Fa, <span class="number">-1</span>, <span class="keyword">sizeof</span> Fa);</span><br><span class="line">    <span class="built_in">memset</span>(Nxt, <span class="number">-1</span>, <span class="keyword">sizeof</span> Nxt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        G[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : G[i]) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            Fa[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Fa[i] == <span class="number">-1</span>) rt = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(rt) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; rt;</span><br><span class="line">    rt = Nxt[rt];</span><br><span class="line">    <span class="keyword">while</span> (~rt) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; rt;</span><br><span class="line">        rt = Nxt[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-3"><a href="#2-3" class="headerlink" title="2-3"></a>2-3</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != x.num) <span class="keyword">return</span> num &gt; x.num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] != x.v[i]) <span class="keyword">return</span> v[i] &lt; x.v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a;</span><br><span class="line">vector&lt;Node&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod1 = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod2 = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">set&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; Ext;</span><br><span class="line">map&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">hash1</span><span class="params">(Node &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        a = (a * <span class="number">101</span> + x.v[i]) % mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">hash2</span><span class="params">(Node &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        a = (a * <span class="number">103</span> + x.v[i]) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    a.v.<span class="built_in">resize</span>(M);</span><br><span class="line">    a.num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a.v) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="built_in">hash1</span>(a);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> y = <span class="built_in">hash2</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (Ext.<span class="built_in">find</span>(&#123;x, y&#125;) == Ext.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            Ext.<span class="built_in">insert</span>(&#123;x, y&#125;);</span><br><span class="line">            Map[&#123;x, y&#125;] = A.<span class="built_in">size</span>();</span><br><span class="line">            A.<span class="built_in">push_back</span>(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++A[Map[&#123;x, y&#125;]].num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)A.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : A) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a.num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a.v[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, a.v[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="2-4"><a href="#2-4" class="headerlink" title="2-4"></a>2-4</h3><details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Save;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, n; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        v[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v[i]) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        --y;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            now = v[now][y];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            Save[y] = now;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">            now = Save[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, now);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h3><p>这个题有一点小坑。要特判通过中介点无法联通的情况。将dis设为inf没有用，因为inf做一次除法后可能很小。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; G[<span class="number">2</span>][MAXN];</span><br><span class="line"><span class="keyword">int</span> N, M, Q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[<span class="number">2</span>][MAXN];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; Pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Dis[id][i] = <span class="number">1e18</span>;</span><br><span class="line">    Dis[id][s] = <span class="number">0</span>;</span><br><span class="line">    Pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!Pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d = -Pq.<span class="built_in">top</span>().first;</span><br><span class="line">        <span class="keyword">int</span> x = Pq.<span class="built_in">top</span>().second;</span><br><span class="line">        Pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (Dis[id][x] != d) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : G[id][x]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e.first, w = e.second;</span><br><span class="line">            <span class="keyword">if</span> (Dis[id][v] &gt; Dis[id][x] + w) &#123;</span><br><span class="line">                Dis[id][v] = Dis[id][x] + w;</span><br><span class="line">                Pq.<span class="built_in">push</span>(&#123;-Dis[id][v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;Q);</span><br><span class="line">    <span class="keyword">int</span> u, v, c, d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;c, &amp;d);</span><br><span class="line">        G[<span class="number">0</span>][u].<span class="built_in">push_back</span>(&#123;v, c&#125;);</span><br><span class="line">        G[<span class="number">1</span>][v].<span class="built_in">push_back</span>(&#123;u, d&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dijkstra</span>(N, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dis[<span class="number">0</span>][i] &gt; <span class="number">1e17</span> || Dis[<span class="number">1</span>][i] &gt; <span class="number">1e17</span>) <span class="keyword">continue</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;-(Dis[<span class="number">0</span>][i] + (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span> * Dis[<span class="number">1</span>][i] / A[i])), &#123;i, A[i]&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (y != A[x] &amp;&amp; Dis[<span class="number">0</span>][x] &lt; <span class="number">1e18</span> &amp;&amp; Dis[<span class="number">1</span>][x] &lt; <span class="number">1e18</span>) &#123;</span><br><span class="line">            A[x] = y;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;-(Dis[<span class="number">0</span>][x] + (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span> * Dis[<span class="number">1</span>][x] / A[x])), &#123;x, A[x]&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (A[pq.<span class="built_in">top</span>().second.first] != pq.<span class="built_in">top</span>().second.second) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, -pq.<span class="built_in">top</span>().first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h3><p>感觉做法不太对，因为我是贪心的，但是AC了。我觉得如果出现多个前缀相同的串可能会挂掉。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line">set&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; ss;</span><br><span class="line">map&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, n; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        v[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v[i]) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = v[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            x = (x * <span class="number">11</span> + v[i][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        Map[x] = i;</span><br><span class="line">        ss.<span class="built_in">insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (now &lt; N) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = now; i &lt;= N; ++i) &#123;</span><br><span class="line">            x = (x * <span class="number">11</span> + A[i]) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (ss.<span class="built_in">find</span>(x) != ss.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                now = i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Map[x]);</span><br><span class="line">                <span class="keyword">if</span> (now &lt; N) <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                ss.<span class="built_in">erase</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h3><p>目测是莫比乌斯反演，<del><mark class="label warning">但是就是不对。</mark></del></p>
<p>输出<code>1</code>获得1分。<del><mark class="label warning">然后我看个人榜有人获得264、265分，估计还有个点比较简单。于是暴力跑了 $n$ 比较小的情况，得到了几个分数，依次输出，发现 $\frac{13}{6}$ 过了第一个点。但是似乎实际数据点不是这个 $n$ ，就有点迷惑。</mark></del></p>
<p>还不会，坑代填。</p>
<mark class="label info">upd：数据锅了，原题是<a href = https://codeforces.com/problemset/problem/1139/D>CF 1139 D</a>，莫比乌斯反演是正确的。</mark>]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>蓝桥杯2021省赛 游记&amp;题解</title>
    <url>/2021/04/19/lanqiao-2021/</url>
    <content><![CDATA[<p>虽然之前一直听说这个比赛很水，但是比赛前一天做了下去年的题，发现最后俩题也只能搞到一半的分。</p>
<p>我必须先对吐槽一下机房的电脑，4G内存的win7，这配置放到10年前都不过分吧？打开个devCpp和Chrome花了5分钟，不过好在没有在比赛中途去世。</p>
<p>填空题感觉还行。</p>
<p>第一题开始以为是输出<code>3182</code>（被样例的<code>11</code>蒙蔽了），考试结束前最后10秒神游的时候，突然想到了什么，把它改成了<code>3181</code>。</p>
<p>这个真的惊险刺激。我考前发现电脑的时间不对，于是就调了一下小时和分钟，但是秒针校正有点麻烦，所以我就没调。因此电脑时间实际上快了20秒。在比赛结束前30秒我在神游的时候，突然意识到第一题似乎有点奇怪，仔细一看发现果然不对。想改的时候一看时间刚好从12:59变成13:00，心想彻底凉了。但是我抱着侥幸的心理尝试去修改答案，没想到真的成功修改了，我这才想起来这个时间快了20秒。真是大起大落。</p>
<p>第二题，把所有直线表示成 $y=\frac{a}{b}\times x + \frac{c}{d}$ 的形式，用<code>vector</code> 去存这俩分数。然而我第一次写的时候翻了个脑瘫错误，对分数约分的时候是这么写的：</p>
<p><code>u /= __gcd(u, d), d /= __gcd(u, d);</code></p>
<p>这里的第二个<code>gcd(u,d)</code>的<code>u</code>已经不是原来的<code>u</code>了。好在最后半个小时手动去数在<code>x=3 y=4</code>情况下所有直线的时候，发现了奇怪的分数$y=\frac{1}{-1}\times x+\frac{1}{2}$，而这条线肯定不存在。修正后结果是<code>40257</code>。</p>
<p>第三题，欧拉筛$\sqrt{n}$以下的质数，然后对$n$做质因数分解。我发现因数很少，于是直接dfs枚举ABC，得到<code>2430</code>。</p>
<p>第四题建图，然后写个最短路，结果是<code>10266837</code>。</p>
<p>第五题开始做的时候还没清醒，想要暴力DFS慢慢跑，但是跑了几十分钟也没跑出来。后来回过神来一看，TSP问题不是可以状压吗？于是 $O(n\times 2^n)$ 写了一发，1秒就跑出来了。和之前dfs的做法在$n$比较小的时候对拍了一下，一模一样美滋滋，得到结果<code>881012367360</code>。</p>
<p>代码题我就naive了。</p>
<p>第一题天平，开始写了个<code>set</code>来回跑，造了个大数据发现跑的好慢。后来发现还不如直接数组遍历，复杂度 $O(n\sum{w_i})$。</p>
<p>第二题博弈论，一看异或我就想到了从高位往低位跑。得到结论，如果所有数异或值为 $0$，则平局，否则Alice胜。我还以为终于碰到了我会做的博弈论。然而赛后在群里讨论，发现我的结论出了问题，没有考虑出现$0$意味着交换先后手，所以Bob可能赢。这还多组数据，我估计要爬了。</p>
<p>第三题左儿子右兄弟，普及组的树形DP。每次把深度最大的儿子放在最下面，那么它的高度就是它的儿子个数+最高的儿子的高度。$f(x)=|son(x)|+\max\limits_{v\in son(x)}{f(v)}$，复杂度 $O(n)$。</p>
<p>第四题括号序，看了一眼本来想分段，但是思路不太清晰没有讨论出来。最后干脆输出<code>0</code>。感觉我确实菜。</p>
<p>第五题分糖果，数据范围说$w$随机生成我就觉得很有灵性，但是并不知道怎么做，感觉像是个分段的DP。写了个dfs，发现$n=30$跑起来也飞快，估计能搞到一点分。</p>
<p>估分45+15+0+20+0+25*0.5=90。</p>
<p>总的来说，感觉比去年的题难不少，没啥送分题。不过金牌爷们都打EC Final去了，大概捞个奖问题不大。</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>第 238 场力扣周赛 总结&amp;题解</title>
    <url>/2021/04/25/lc-wc-238/</url>
    <content><![CDATA[<p>大周日的，为了五一的调休还上课，真离谱。。</p>
<p>九点三十五从床上爬起来拔腿就跑去上电分课，然而老师并没有点名。。</p>
<p>不太适应这个用类的提交方法， 感觉本地不好调试。。</p>
<p>一直说Leetcode很简单，结果没想到还翻车了。最后一题有个细节写错了，但是因为不好调试加上电分下课了也就不想写了。。</p>
<p>最后全球rank是426，咋跟上次abc似的，最后一题挂了。。</p>
<h3 id="K-进制表示下的各位数字总和"><a href="#K-进制表示下的各位数字总和" class="headerlink" title="K 进制表示下的各位数字总和"></a><a href="https://leetcode-cn.com/problems/sum-of-digits-in-base-k/">K 进制表示下的各位数字总和</a></h3><p>没啥好说的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumBase</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt;= n) m *= k;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            ans += n / m;</span><br><span class="line">            n %= m;</span><br><span class="line">            m /= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="最高频元素的频数"><a href="#最高频元素的频数" class="headerlink" title="最高频元素的频数"></a><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">最高频元素的频数</a></h3><p>扔到map里暴力跑过的，然而正解是two pointers。显然对于一个合法的区间，随着 $r$ 递增，$l$ 是不递减的。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFrequency</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nums.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">            sum += nums[r];</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1ll</span> * nums[r] * (r - l + <span class="number">1</span>) - sum &gt; k) &#123;</span><br><span class="line">                sum -= nums[l++];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="所有元音按顺序排布的最长子字符串"><a href="#所有元音按顺序排布的最长子字符串" class="headerlink" title="所有元音按顺序排布的最长子字符串"></a><a href="https://leetcode-cn.com/problems/longest-substring-of-all-vowels-in-order/">所有元音按顺序排布的最长子字符串</a></h3><p>从左往右数就好了，符合条件就统计，不符合条件就清零，否则长度++。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestBeautifulSubstring</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, now = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> *s = <span class="string">&quot; aeiou &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word[i] == s[cur]) &#123;</span><br><span class="line">                ++now;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (word[i] == s[cur + <span class="number">1</span>]) &#123;</span><br><span class="line">                ++cur, ++now;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur == <span class="number">5</span>) ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">                cur = now = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (word[i] == <span class="string">&#x27;a&#x27;</span>) now = cur = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">5</span>) ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="最高建筑高度"><a href="#最高建筑高度" class="headerlink" title="最高建筑高度"></a><a href="https://leetcode-cn.com/problems/maximum-building-height/">最高建筑高度</a></h3><div class="note info"><p>构造一个长为 $n$ 的序列 $a$，要求满足 $a[1]=0,|a[i]-a[i-1]|\leq 1$，且有 $m$ 个条件，第 $i$ 个条件要求 $a[p_i]\leq h_i$ 。求 $\max{a[i]}$ 的最大值。</p>
<p>$n\leq 10^9,m\leq 10^6$</p>
</div>

<p>其实思路不难想，即对于这 $m$ 个有限制的点，分别从左往右和从右往左，计算出来两个方向的限制下的最大高度。</p>
<p>设第 $i$ 个点的最大高度是 $h_i$，间距为 $d_i$，则在第 $i$ 和第 $i+1$ 个点之间可以达到的最大高度是 $\frac{h_i+h_{i+1}+d}{2}$。</p>
<p>则答案为第 $n$ 个点的最大高度和相邻两点间最大高度的最大值，复杂度 $O(m\log{m})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxBuilding</span><span class="params">(<span class="keyword">int</span> n, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = r.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!m) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Mx</span><span class="params">(m)</span></span>;</span><br><span class="line">        Mx[<span class="number">0</span>] = <span class="built_in">min</span>(r[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>, r[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            Mx[i] = <span class="built_in">min</span>(Mx[i - <span class="number">1</span>] + r[i][<span class="number">0</span>] - r[i - <span class="number">1</span>][<span class="number">0</span>], r[i][<span class="number">1</span>]);</span><br><span class="line">        Mx[m - <span class="number">1</span>] = <span class="built_in">min</span>(Mx[m - <span class="number">1</span>], r[m - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            Mx[i] = <span class="built_in">min</span>(Mx[i + <span class="number">1</span>] + r[i + <span class="number">1</span>][<span class="number">0</span>] - r[i][<span class="number">0</span>], Mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (Mx[i] + Mx[i + <span class="number">1</span>] + r[i + <span class="number">1</span>][<span class="number">0</span>] - r[i][<span class="number">0</span>]) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, n - r[m - <span class="number">1</span>][<span class="number">0</span>] + Mx[m - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>一种基于状压的 $O(n)-O(1)$ 的在线RMQ做法</title>
    <url>/2021/05/02/o-n-rmq/</url>
    <content><![CDATA[<p>这是一篇老文章，写于2020/8/24。</p>
<h2 id="隐性要求"><a href="#隐性要求" class="headerlink" title="隐性要求"></a>隐性要求</h2><ul>
<li>序列的长度 $n$ 满足 $\log_2{n} \leq 64$ <del>（<code>long long</code> 范围的 $n$ 能出现？）</del></li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><p><a href="https://oi-wiki.org/ds/sparse-table/">Sparse Table</a></p>
</li>
<li><p>基本位运算</p>
</li>
<li><p>前后缀极值</p>
</li>
</ul>
<h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>将原序列 $A[1\cdots n]$ 分成每块长度为 $O(\log_2{n})$ 的 $O(\frac{n}{\log_2{n}})$ 块。</p>
<blockquote>
<p>听说令块长为 $1.5\times \log_2{n}$ 时常数较小。</p>
</blockquote>
<p>记录每块的最大值，并用ST表维护块间最大值，复杂度 $O(n)$。</p>
<p>记录块中每个位置的前、后缀最大值 $Pre[1\cdots n], Sub[1\cdots n]$ （ $Pre[i]$ 即 $A[i]$ 到其所在块的块首的最大值），复杂度 $O(n)$。</p>
<p>若查询的 $l,r$ 在两个不同块上，分别记为第 $bl,br$ 块，则最大值为 $[bl+1,br-1]$ 块间的最大值，以及 $Sub[l]$ 和 $Pre[r]$ 这三个数的较大值。</p>
<p>现在的问题在于若 $l,r$ 在同一块中怎么办。</p>
<p>将 $A[1\cdots r]$ 依次插入单调栈中，记录下标和值，满足值从栈底到栈顶递减，则 $A[l,r]$ 中的最大值为从栈底往上，单调栈中第一个满足其下标 $p \geq l$ 的值。</p>
<p>由于 $A[p]$ 是 $A[l,r]$ 中的最大值，因而在插入 $A[p]$ 时， $A[l\cdots p-1]$ 都被弹出，且在插入 $A[p+1\cdots r]$ 时不可能将 $A[p]$ 弹出。</p>
<p>而如果用 $0/1$ 表示每个数是否在栈中，就可以用整数状压，则 $p$ 为第 $l$ 位后的第一个 $1$ 的位置。</p>
<p>由于块大小为 $O(\log_2{n})$，因而最多不超过 $64$ 位，可以用一个整数存下（即隐性条件的原因）。</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RMQ</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> N, A[MAXN];</span><br><span class="line">    <span class="keyword">int</span> blockSize;</span><br><span class="line">    <span class="keyword">int</span> S[MAXN][MAXM], Pow[MAXM], Log[MAXN];</span><br><span class="line">    <span class="keyword">int</span> Belong[MAXN], Pos[MAXN];</span><br><span class="line">    <span class="keyword">int</span> Pre[MAXN], Sub[MAXN];</span><br><span class="line">    <span class="keyword">int</span> F[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>, id = <span class="number">1</span>;</span><br><span class="line">        Pos[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            S[id][<span class="number">0</span>] = std::<span class="built_in">max</span>(S[id][<span class="number">0</span>], A[i]);</span><br><span class="line">            Belong[i] = id;</span><br><span class="line">            <span class="keyword">if</span> (Belong[i - <span class="number">1</span>] != Belong[i])</span><br><span class="line">                Pos[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Pos[i] = Pos[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (++cur == blockSize) &#123;</span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">                ++id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N % blockSize == <span class="number">0</span>) --id;</span><br><span class="line">        Pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXM; ++i) Pow[i] = Pow[i - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= id; ++i) Log[i] = Log[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Log[id]; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + Pow[i] - <span class="number">1</span> &lt;= id; ++j) &#123;</span><br><span class="line">                S[j][i] = std::<span class="built_in">max</span>(S[j][i - <span class="number">1</span>], S[j + Pow[i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSubPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Belong[i] != Belong[i - <span class="number">1</span>])</span><br><span class="line">                Pre[i] = A[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Pre[i] = std::<span class="built_in">max</span>(Pre[i - <span class="number">1</span>], A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Belong[i] != Belong[i + <span class="number">1</span>])</span><br><span class="line">                Sub[i] = A[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Sub[i] = std::<span class="built_in">max</span>(Sub[i + <span class="number">1</span>], A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> S[MAXN], top;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Belong[i] != Belong[i - <span class="number">1</span>])</span><br><span class="line">                top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                F[i] = F[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; A[S[top]] &lt;= A[i])</span><br><span class="line">                F[i] &amp;= ~(<span class="number">1</span> &lt;&lt; Pos[S[top--]]);</span><br><span class="line">            S[++top] = i;</span><br><span class="line">            F[i] |= (<span class="number">1</span> &lt;&lt; Pos[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">        blockSize = <span class="built_in">log2</span>(N) * <span class="number">1.5</span>;</span><br><span class="line">        <span class="built_in">buildST</span>();</span><br><span class="line">        <span class="built_in">buildSubPre</span>();</span><br><span class="line">        <span class="built_in">buildBlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bl = Belong[l], br = Belong[r];</span><br><span class="line">        <span class="keyword">if</span> (bl != br) &#123;</span><br><span class="line">            <span class="keyword">int</span> ans1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (br - bl &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = Log[br - bl - <span class="number">1</span>];</span><br><span class="line">                ans1 = std::<span class="built_in">max</span>(S[bl + <span class="number">1</span>][p], S[br - Pow[p]][p]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans2 = std::<span class="built_in">max</span>(Sub[l], Pre[r]);</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">max</span>(ans1, ans2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> A[l + __builtin_ctz(F[r] &gt;&gt; Pos[l])];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;R.N, &amp;M);</span><br><span class="line">    R.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, l, r; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, R.<span class="built_in">queryMax</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>基于位运算的一个 O(n)-O(1) RMQ 做法 - JKLover（原理完全来自此博客，但代码独立实现）</p>
 <mark class="label info">upd：博客已无法访问</mark>

<h2 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h2><ul>
<li><a href="https://loj.ac/problem/3298">[BJOI 2020]封印</a> ：SAM+RMQ</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>肝到两点半真快乐，luogu和loj的新rk1有点爽，老年人开始连ST表都写错了。</p>
]]></content>
      <categories>
        <category>data structure</category>
      </categories>
      <tags>
        <tag>RMQ</tag>
        <tag>ST表</tag>
        <tag>分块</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>双栈维护Two Pointers Method的区间信息</title>
    <url>/2021/04/27/two-interval-stacks/</url>
    <content><![CDATA[<p>这两天思考了一波，发现CF EDU上的这个双栈结构确实很powerful，可以快速维护大部分双指针算法所需的区间信息。</p>
<p>初稿可见<a href="/2021/04/25/ITMO-Academy-pilot-course-Two-Pointers-Method/">Two Pointers Method 学习记录</a> 的Coprime Segment那节，解释了如何用它来维护区间GCD，但是写的很乱，感觉没有说清楚。二稿见同篇的Segment with the Required Subset那节，解释了如何用它维护区间背包，可能相对更清晰一些。</p>
<p>而我在写这两篇题解的时候，对该结构有了更加深刻的理解。鉴于它的实用性很强，故单独成篇更加系统地阐述这一结构的原理和适用范围。</p>
<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>对于该问题，首先要符合two pointers method的使用条件，即对于所有合法区间 $[l,r]$，随着 $r$ 递增，$l$ 单调不减。</p>
<p>问题通常对区间有某种限制，我们记为 $g[l:r]$。而我们可以通过某个数（或者其他类型变量） $f[l:r]$ 概括区间 $[l,r]$ 的状态，而 $f[l:r]$ 可以用于判断 $g[l:r]$ 是否成立。</p>
<p>例如要求区间最大值不超过 $s$，则我们可以定义 $f[l:r]=\max(a_l,\cdots,a_r)$来概括区间 $[l,r]$ 的状态，通过 $f[l:r]\leq s$ 来判断区间是否符合要求。</p>
<p>又例如要求区间中存在两数互质，我们可以定义 $f[l:r]=gcd(a_l,\cdots,a_r)$ 来概括区间 $[l,r]$ 的状态，若 $f[l:r]=1$ 则说明该区间符合要求。</p>
<p>但是，$f[l:r]$ 不一定是唯一的，也不是题目告诉我们的。我们要需要找到一个好的 $f$ 将原问题形式化，而维护 $f$ 的复杂度直接决定了整道题的复杂度。</p>
<p>那么什么样的 $f$ 才是好的呐？</p>
<p>当然是维护的复杂度尽可能低的 $f$。</p>
<p>由于two pointers method的限制，区间 $[l,r]$ 单次移动只会变成 $[l,r+1]$ 或者 $[l+1,r]$。</p>
<p>换言之，每次最多插入或删除一个数。那么维护 $f$ 的复杂度，应该是以下二者的较大值：</p>
<ul>
<li>已知 $f[l:r]$，求 $f[l:r+1]$，插入一个数</li>
<li>已知 $f[l:r]$，求 $f[l+1:r]$，删除一个数</li>
</ul>
<p>根据我们的做题经验，对于大部分操作，求插入一个数的新 $f$ 值的复杂度较低，很多都可以 $O(1)$ 完成。</p>
<p>例如 $f\rightarrow min/max/gcd/and/or$，$f[l:r+1]=f(f[l:r],a_{r+1})$。我们记插入一个数的复杂度为 $\alpha$。</p>
<p>而对于很多操作，我们难以快速求出删除一个数后的 $f$ 值。</p>
<p>作为极少的反例，令 $f\rightarrow sum$，我们可以做“插入一个数”时使用的 $+$ 的逆运算 $-$，$O(1)$ 维护 $f[l+1:r]=f[l:r]-a_l$。</p>
<p>但是，更多的 $f$ 并没有逆运算，例如 $min/max/gcd/and/or$ 等。如果没有其他变量辅助，计算 $f[l+1:r]$ 只能通过往空集中依次插入 $a_{l+1},\cdots,a_r$，通过做区间长度次“插入一个数”得到。而这样的复杂度为 $O((r-l)\alpha)$，也就是 $O(n\alpha)$。</p>
<p>由此我们不难看出，维护 $f$ 的复杂度瓶颈通常为“删除一个数”，若不存在“插入一个数”的逆运算，暴力维护“删除一个数”，会导致维护 $f$ 的复杂度飙升到 $O(n\alpha)$。那整体复杂度达到了 $O(n^2\alpha)$，对于 $n$ 动辄 $1e5$ 的数据范围，是完全不能接受的。</p>
<p>总结一下，若 $f$ 满足结合律，则它能快速计算“插入一个数”，即区间加法、移动 $r$ 的情况。但是若 $f$ 无法快速维护“删除一个数”，即区间减法、移动 $l$ 的情况，Two Pointers Method基本无法使用。</p>
<h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>双栈的引入，就是为了解决 $f$ 满足结合律，但是无法快速维护区间减法的情况。</p>
<p>基本的思路是，既然无法快速计算区间减法，那么就改用一个栈预先存储好每次做完区间减法后的答案。</p>
<p>将区间 $[l,r]$ 拆分成两个子区间 $[l,m],[m+1,r]$，我们用两个栈 $s1,s2$ 分别维护这两个区间的 $f$ 值。</p>
<p>$s1$ 从栈顶到栈底，依次存储了 $f[l:m]$,$f[l+1:m]$,$\cdots$,$f[m:m]$，而 $s2$ 存储了 $f[m+1:m+1]$,$f[m+1:m+2]$,$\cdots$,$f[m+1:r]$。</p>
<p>既然 $f$ 符合结合律，那么 $f[l:r]$ 可以通过合并 $f[l:m]$ 和 $f[m+1:r]$ 得到，复杂度记为 $O(\beta)$（当合并两个区间信息与向区间插入一个数的情况相同时，$O(\beta)=O(\alpha)$），而它们分别就是 $s1$ 和 $s2$ 的栈顶。</p>
<p>移动 $r$ 的时候，对 $s1$ 没有影响，$s2$ 只需要插入 $f[m+1:r+1]$。由于 $s2$ 当前的栈顶为 $f[m+1:r]$，因此可以用 $O(\alpha)$ 的复杂度计算出将 $a_r+1$ 插入 $f[m+1:r]$ 得到的结果，即 $f[m+1:r+1]$。</p>
<p>而移动 $l$ 的时候，对 $s2$ 没有影响，$s1$ 只需要弹出栈顶，那么弹出后 $s1$ 的栈顶就是 $f[l+1:m]$，与 $s2$ 的栈顶 $f[m+1:r]$ 合并就能得到 $f[l+1:r]$ 。</p>
<p>聪明的你应该也发现了，$s1$ 弹出后不一定是 $f[l+1:m]$，而可能为空（即 $l=m$ 的情况）。</p>
<p>对于这种情况，我们将 $s2$ 依次弹出，并逐个插入到 $s1$ 中。此时 $s2$ 的栈顶是 $a_r,f[m+1:r]$（前文没有说明，栈中存的其实是pair，每次向 $s2$ 插入 $a_r$ 时，不仅计算了 $f[m+1:r]$，还绑在一起存储了 $a_r$），我们只需要插入 $f(a_r,\emptyset)$，其实就是 $f[r:r]$ 。弹出后的新栈顶是 $a_{r-1},f[m+1:r-1]$，类似像 $s2$ 插入 $a_r$ 的做法， 我们插入 $f(f[r:r],a_{r-1})$，得到了 $f[r-1:r]$。依次类推，将 $s2$ 弹空时，$s1$ 从栈顶到栈底依次为 $f[m+1:r]$,$f[m+2:r]$,$\cdots$,$f[r:r]$，也就是说，新的 $m$ 就是原来的 $r$，区间又重新被划分成了两部分。</p>
<h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><div class="note success"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">f</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原区间插入一个新数，函数返回新区间的f值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">ff</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对两个区间的f值做合并，但仅用于判断条件是否成立，不一定需要真合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v; <span class="comment">// 存的是 v</span></span><br><span class="line">    stack&lt;T&gt; val; <span class="comment">// 存的是 f</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">        val.<span class="built_in">push</span>(<span class="built_in">f</span>(val.<span class="built_in">top</span>(), x)) <span class="comment">// 由f[l:r]插入x得到f[l:r+1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = v.<span class="built_in">top</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> tmp; <span class="comment">// 返回v</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>(); <span class="comment">// f[l:m] 或 f[m+1:r]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123; <span class="comment">//若s1为空，将s2逐个插入到s1中</span></span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();<span class="comment">//删除f[l:m]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于判断 ff(s1.top(), s2.top()) 是否合法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>; <span class="comment">// 原序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>, l = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r]); <span class="comment">// 向s2插入v[r]，即移动r指针</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">check</span>()) &#123; <span class="comment">// 判断当前区间是否合法</span></span><br><span class="line">            <span class="comment">// 更新答案</span></span><br><span class="line">            <span class="built_in">remove</span>(); <span class="comment">//移动l指针</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div>

<p>在这里，我区分了往区间插入一个数（$f$），和合并两个区间 （$ff$）。因为对于某些运算，向区间里插入一个数和合并两个区间是不一样的（T不是<code>int</code>时显然不一样，因为 $f$ 是关于<code>int</code>和T的函数，而 $ff$ 是关于两个T的函数）。</p>
<p>设 $f$ 的复杂度为 $\alpha$，$ff$ 的复杂度为 $\beta$。由于check和 $s1,s2$ 的插入弹出至多各执行 $n$ 次，故整体复杂度为 $O(n(\alpha+\beta))$。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="区间互质"><a href="#区间互质" class="headerlink" title="区间互质"></a>区间互质</h3><p>求最短的区间，使得区间中存在两数互质。</p>
<p>则 $f\rightarrow gcd$，$ff$ 与 $f$ 相同，$\alpha=\beta=\log{max(v_i)}$。故复杂度为 $O(n\log{\max{v_i}})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 14:25:57</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; stk, val = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        val.<span class="built_in">push_back</span>(__gcd(val.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = stk.<span class="built_in">back</span>();</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (__gcd(s1.<span class="built_in">top</span>(), s2.<span class="built_in">top</span>()) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="区间背包"><a href="#区间背包" class="headerlink" title="区间背包"></a>区间背包</h3><p>求最短的区间，满足区间存在一个子集，其元素之和恰好为 $m$。</p>
<p>具体过程详见上一篇博客。</p>
<p>$f$ 为bitset位运算，$ff$ 为合并两个bitset。$\alpha=\beta=O(\frac{m}{w})$，故整体复杂度 $O(\frac{nm}w)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 16:14:21</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    stack&lt;bitset&lt;MAXM&gt;&gt; val;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bitset&lt;MAXM&gt; b = <span class="number">0</span>;</span><br><span class="line">        b[x] = <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">push</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t) val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &lt;&lt; x);</span><br><span class="line">        <span class="keyword">else</span> val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &gt;&gt; x);</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.<span class="built_in">top</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bitset&lt;MAXM&gt; <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    s1.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">    s2.<span class="built_in">init</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> ((s1.<span class="built_in">top</span>() &amp; s2.<span class="built_in">top</span>()).<span class="built_in">any</span>()) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>若对于一个two pointers method问题的区间函数 $f$，如果我们可以快速维护<strong>插入一个数计算新 $f$ <strong>和</strong>合并两个区间的$f$用于判断是否满足条件</strong>这两个操作，我们就可以使用双栈的方法进行维护。</p>
<p>需要注意的一点是，合并两个区间的 $f$ 不一定需要真的合并，只要能判断是否满足条件即可。例如区间背包时，我们并没有真正意义上对两个bitset进行合并，只是实现了利用两个bitset来判断是否能凑出 $m$ 而已。</p>
]]></content>
      <categories>
        <category>data structure</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder 競プロ典型 90 問 做题记录</title>
    <url>/2021/05/04/%E7%AB%B6%E3%83%97%E3%83%AD%E5%85%B8%E5%9E%8B-90-%E5%95%8F/</url>
    <content><![CDATA[<p>只有日语版的AtCoder才能看到这个题集，没有英语翻译。。</p>
<p>吐槽下，日语真难翻译，各个翻译器翻译出来的都不是人话。。</p>
<h3 id="001-Yokan-Party（★4）"><a href="#001-Yokan-Party（★4）" class="headerlink" title="001 - Yokan Party（★4）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_a">001 - Yokan Party（★4）</a></h3><div class="note info"><p>在一个长为 $l$ 的绳子上有 $n$ 个点，坐标依次为 $a_i$，可以选择其中 $k$ 个点将绳子分成 $k+1$ 段，长度分别为 $b_i$，其得分为 $\min{b_i}$，求得分的最大值。</p>
<p>$k\leq n\leq 100000,l\leq 10^9$</p>
</div>

<p>二分答案，复杂度 $O(n\log{l})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-04 23:19:28</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, L, K;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lst = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i] - lst &gt;= l) &#123;</span><br><span class="line">            ++num;</span><br><span class="line">            lst = v[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num &gt;= K + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;L, &amp;K);</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v.<span class="built_in">push_back</span>(L);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = L, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(m)) &#123;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">            ans = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="002-Encyclopedia-of-Parentheses（★3）"><a href="#002-Encyclopedia-of-Parentheses（★3）" class="headerlink" title="002 - Encyclopedia of Parentheses（★3）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_b">002 - Encyclopedia of Parentheses（★3）</a></h3><div class="note info"><p>输入 $n$，输出所有长度为 $n$ 的合法括号序。</p>
<p>$n\leq 20$</p>
</div>

<p>爆搜就完了。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-04 23:36:01</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == N) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    s[x] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>, num + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (num) &#123;</span><br><span class="line">        s[x] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>, num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">if</span> (N &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="003-Longest-Circular-Road（★4）"><a href="#003-Longest-Circular-Road（★4）" class="headerlink" title="003 - Longest Circular Road（★4）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_c">003 - Longest Circular Road（★4）</a></h3><div class="note info"><p>给定一棵树，边权皆为 $1$。可以任意插入一条边 $(u,v)$，新图的权值为图中最大环的边数。求新图权值的最大值。</p>
<p>$n\leq 10^5$</p>
</div>

<p>复习了一下树的直径。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 09:56:51</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; E[MAXN];</span><br><span class="line"><span class="keyword">int</span> Depth[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : E[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        Depth[v] = Depth[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        E[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        E[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="keyword">if</span> (Depth[i] &gt; Depth[mx]) mx = i;</span><br><span class="line">    Depth[mx] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(mx, <span class="number">0</span>);</span><br><span class="line">    mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) mx = <span class="built_in">max</span>(mx, Depth[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mx + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="004-Cross-Sum（★2）"><a href="#004-Cross-Sum（★2）" class="headerlink" title="004 - Cross Sum（★2）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_d">004 - Cross Sum（★2）</a></h3><div class="note info"><p>给定二维数组 $A[1\cdots n][1\cdots m]$，求二维数组 $B$，其中 $B[i][j]$ 为与 $A[i][j]$ 同一行或同一列的所有数之和。</p>
<p>$N\leq 2000$ </p>
</div>

<p>预处理第 $i$ 行的和 $R[i]$，第 $j$ 行的和 $C[j]$，则 $B[i][j]=R[i]+C[j]-A[i][j]$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 10:29:09</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_d</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN], C[MAXN], R[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i][j]);</span><br><span class="line">            R[i] += A[i][j];</span><br><span class="line">            C[j] += A[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, C[j] + R[i] - A[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="005-Restricted-Digits（★7）"><a href="#005-Restricted-Digits（★7）" class="headerlink" title="005 - Restricted Digits（★7）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_e">005 - Restricted Digits（★7）</a></h3><div class="note info"><p>求 $n$ 位数中，$m$ 的倍数有多少个，要求 $n$ 位数的每一位都由 $c_1,\cdots,c_k(c_i\leq 9)$ 构成。</p>
<p>$n\leq 10^{18},m\leq 1000$</p>
<p>Subtask1：$n\leq 10000,m\leq 30$ 1pts</p>
<p>Subtask2：$m\leq 30$ 3pts</p>
<p>Subtask3：完整数据范围 3pts</p>
</div>

<h4 id="Subtask1"><a href="#Subtask1" class="headerlink" title="Subtask1"></a>Subtask1</h4><p>数位DP， $f_{x,y}$ 表示 $x$ 位数中，$\bmod m=y$ 的数有多少个，则 $f_{x,y}$ 可以转移到 $f_{x+1,(10\times y+c_j)\bmod m}$。</p>
<p>答案为 $f_{n,0}$，复杂度 $O(nmk)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 10:38:49</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXB = <span class="number">30</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, B, K;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> F[MAXN][MAXB];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;B, &amp;K);</span><br><span class="line">    v.<span class="built_in">resize</span>(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    F[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!F[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">                F[i + <span class="number">1</span>][(j * <span class="number">10</span> + x) % B] += F[i][j];</span><br><span class="line">                F[i + <span class="number">1</span>][(j * <span class="number">10</span> + x) % B] %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, F[N][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h4 id="Subtask2"><a href="#Subtask2" class="headerlink" title="Subtask2"></a>Subtask2</h4><p>发现每次转移的系数是确定的，即 $f_{x,y}\rightarrow f_{x+1,z}$ 的所有 $(y,z)$ 每次都是相同的。</p>
<p>因此可以预处理出来一个 $(m+1)\times (m+1)$ 的转移矩阵 $a$，$a[i][j]=x$ 表示有 $x$ 种方法，从上一位 $\bmod m=i$ 转移到下一位 $\bmod m=j$。</p>
<p>对 $a$ 做矩阵快速幂，复杂度 $O(\log{n}\times m^3)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 10:38:49</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXB = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> N;</span><br><span class="line"><span class="keyword">int</span> B, K;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> A[MAXB][MAXB], n, m;</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span> A);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span> A);</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;x) &#123;</span><br><span class="line">        Matrix c = <span class="built_in">Matrix</span>(n, x.m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c.n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c.m; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) &#123;</span><br><span class="line">                    c.A[i][j] += <span class="number">1ll</span> * A[i][k] * x.A[k][j] % MOD;</span><br><span class="line">                    c.A[i][j] %= MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">poww</span><span class="params">(Matrix x, <span class="keyword">long</span> <span class="keyword">long</span> t)</span> </span>&#123;</span><br><span class="line">    Matrix y = x;</span><br><span class="line">    <span class="keyword">for</span> (--t; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) y = y * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%d&quot;</span>, &amp;N, &amp;B, &amp;K);</span><br><span class="line">    v.<span class="built_in">resize</span>(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    Matrix a = <span class="built_in">Matrix</span>(B + <span class="number">1</span>, B + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = (i * <span class="number">10</span> + x) % B;</span><br><span class="line">            a.A[y + <span class="number">1</span>][i + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="built_in">poww</span>(a, N);</span><br><span class="line">    Matrix b = <span class="built_in">Matrix</span>(B + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    b.A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a = a * b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a.A[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h4 id="Subtask-3"><a href="#Subtask-3" class="headerlink" title="Subtask 3"></a>Subtask 3</h4><p>倍增的想法是正确的，但是没必要通过矩阵乘法的形式。想复杂了，尴尬。。</p>
<p>设 $f[i][j]$ 表示 $2^i$ 位数中 $\bmod m=j$ 的方案数，则 $f[i][j]\rightarrow f[i+1][(j*10^{2^i}+k)\bmod m]$。</p>
<p>每次转移的复杂度是 $O(m^2)$ 的，整体复杂度为 $O(\log{n}\times m^2)$。</p>
<p>用FFT可以做到单次转移 $O(m\log{m})$，不过我不太会。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 10:38:49</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXB = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> N;</span><br><span class="line"><span class="keyword">int</span> B, K;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; f;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> P[LOG];</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">trans</span><span class="params">(vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &amp;f, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &amp;g, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">h</span><span class="params">(B + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">fill</span>(h.<span class="built_in">begin</span>(), h.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B; ++j) &#123;</span><br><span class="line">            h[(i * P[len] + j) % B] += f[i] * g[j] % MOD;</span><br><span class="line">            h[(i * P[len] + j) % B] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">poww</span><span class="params">(vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &amp;f, <span class="keyword">long</span> <span class="keyword">long</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">g</span><span class="params">(f)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ff = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (--t; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) g = <span class="built_in">trans</span>(g, f, ff);</span><br><span class="line">        f = <span class="built_in">trans</span>(f, f, ff++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%d&quot;</span>, &amp;N, &amp;B, &amp;K);</span><br><span class="line">    v.<span class="built_in">resize</span>(K);</span><br><span class="line">    P[<span class="number">1</span>] = <span class="number">10</span> % B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; LOG; ++i) P[i] = P[i - <span class="number">1</span>] * P[i - <span class="number">1</span>] % B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    f.<span class="built_in">resize</span>(B + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) f[x % B]++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">poww</span>(f, N));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="006-Smallest-Subsequence（★5）"><a href="#006-Smallest-Subsequence（★5）" class="headerlink" title="006 - Smallest Subsequence（★5）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_f">006 - Smallest Subsequence（★5）</a></h3><div class="note info"><p>给定长为 $n$ 的字符串 $s$，求长度为 $k$ 的字典序最小的子序列。<br>$k\leq n\leq 100000$</p>
</div>

<p>既然是字典序最小，贪心取每一位就好了。</p>
<p>只要保证取完当前这位，假设是 $s[p]$ 作为第 $q$ 位子序列，满足 $n-p\geq k-q$ （即后面的字符串还有足够的长度用来取余下的子序列）。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 11:42:53</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line">string S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K &gt;&gt; S;</span><br><span class="line">    <span class="keyword">int</span> cur = K, mn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (N - i &lt; cur) &#123;</span><br><span class="line">            cout &lt;&lt; S[mn];</span><br><span class="line">            i = mn;</span><br><span class="line">            mn = i + <span class="number">1</span>;</span><br><span class="line">            --cur;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (S[mn] &gt; S[i]) mn = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; S[mn] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="007-CP-Classes（★3）"><a href="#007-CP-Classes（★3）" class="headerlink" title="007 - CP Classes（★3）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_g">007 - CP Classes（★3）</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $v$ 。$m$ 次查询，每次给定一个数 $x$，求 $\min{|x-v_i|}$。</p>
<p>$n,m\leq 300000$</p>
</div>

<p>给 $v$ 排序，然后二分呗。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 11:54:57</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_g</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    v.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x);</span><br><span class="line">        <span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x - *--it);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (it == v.<span class="built_in">begin</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *it - x);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = *it - x;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">min</span>(ans, x - *--it));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="008-AtCounter（★4）"><a href="#008-AtCounter（★4）" class="headerlink" title="008 - AtCounter（★4）"></a><a href="https://atcoder.jp/contests/typical90/tasks/typical90_h">008 - AtCounter（★4）</a></h3><div class="note info"><p>给定一个长为 $n$ 的字符串 $s$，求 $s$ 有多少个子序列可以组成<code>atcoder</code>。</p>
<p>$n\leq 10^5$</p>
</div>

<p>暴力转移就好，$f[i][j]$ 表示 $s$ 的前 $i$ 位匹配到<code>atcoder</code> 的第 $j$ 位的方案数，然后发现还能滚动第一维。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-05 12:08:36</span></span><br><span class="line"><span class="comment"> * @source:https://atcoder.jp/contests/typical90/tasks/typical90_h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> s[MAXN], *t = <span class="string">&quot;atcoder&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;N, s);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == t[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j) F[j] = (F[j] + F[j - <span class="number">1</span>]) % MOD;</span><br><span class="line">                <span class="keyword">else</span> F[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, F[<span class="number">6</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>2021.05.01 个人训练赛 总结&amp;题解</title>
    <url>/2021/05/02/traning-2021-05-01/</url>
    <content><![CDATA[<p>本来五一是直接回家的，但是好不容易找到队友，寻思着那就打一场吧，谁知道居然是个人赛。。</p>
<p>结果疯狂罚时，动不动就-3真是要人命。。</p>
<p><img src="https://i.loli.net/2021/05/02/fVzR6rsuDUCjWJk.png" alt="image-20210502115852421"></p>
<p>总体感觉难度不是很大，M题和O题都是可做的，不过没来得及，被E题卡了老半天。</p>
<table>
<thead>
<tr>
<th align="center">Stat</th>
<th align="center">#</th>
<th align="center">Origin</th>
<th align="center">Title</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//A/1/">1</a> / <a href="https://vjudge.net/contest/435307#status//A/0/">9</a></td>
<td align="center">A</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-102956D/origin">Gym 102956D</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/A">Bank Security Unification</a></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//B/1/">0</a> / <a href="https://vjudge.net/contest/435307#status//B/0/">4</a></td>
<td align="center">B</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103048B/origin">Gym 103048B</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/B">Bracelet</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//C/1/">9</a> / <a href="https://vjudge.net/contest/435307#status//C/0/">51</a></td>
<td align="center">C</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-102956M/origin">Gym 102956M</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/C">Brilliant Sequence of Umbrellas</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//D/1/">16</a> / <a href="https://vjudge.net/contest/435307#status//D/0/">69</a></td>
<td align="center">D</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103055C/origin">Gym 103055C</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/D">Cube</a></td>
</tr>
<tr>
<td align="center"><strong>Attempted</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//E/1/">2</a> / <a href="https://vjudge.net/contest/435307#status//E/0/">14</a></td>
<td align="center">E</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103055F/origin">Gym 103055F</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/E">Fair Distribution</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//F/1/">17</a> / <a href="https://vjudge.net/contest/435307#status//F/0/">31</a></td>
<td align="center">F</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103055J/origin">Gym 103055J</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/F">Grammy and Jewelry</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//G/1/">6</a> / <a href="https://vjudge.net/contest/435307#status//G/0/">11</a></td>
<td align="center">G</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103048G/origin">Gym 103048G</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/G">Group QQ Speed</a></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//H/1/">2</a> / <a href="https://vjudge.net/contest/435307#status//H/0/">9</a></td>
<td align="center">H</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-102946H/origin">Gym 102946H</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/H">Halting Problem</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//I/1/">26</a> / <a href="https://vjudge.net/contest/435307#status//I/0/">42</a></td>
<td align="center">I</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103048I/origin">Gym 103048I</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/I">I Love You</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//J/1/">18</a> / <a href="https://vjudge.net/contest/435307#status//J/0/">98</a></td>
<td align="center">J</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103029C/origin">Gym 103029C</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/J">John, Katya, no nuts</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//K/1/">19</a> / <a href="https://vjudge.net/contest/435307#status//K/0/">49</a></td>
<td align="center">K</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103048K/origin">Gym 103048K</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/K">K-Primes</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//L/1/">21</a> / <a href="https://vjudge.net/contest/435307#status//L/0/">39</a></td>
<td align="center">L</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-102985D/origin">Gym 102985D</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/L">Peter Piper Picked the Perfect Piece of Pizza</a></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//M/1/">2</a> / <a href="https://vjudge.net/contest/435307#status//M/0/">8</a></td>
<td align="center">M</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103061A/origin">Gym 103061A</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/M">stral Reflection</a></td>
</tr>
<tr>
<td align="center"><strong>Solved</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//N/1/">6</a> / <a href="https://vjudge.net/contest/435307#status//N/0/">11</a></td>
<td align="center">N</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-103055G/origin">Gym 103055G</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/N">Wall Game</a></td>
</tr>
<tr>
<td align="center"><strong>Attempted</strong></td>
<td align="center"><a href="https://vjudge.net/contest/435307#status//O/1/">2</a> / <a href="https://vjudge.net/contest/435307#status//O/0/">8</a></td>
<td align="center">O</td>
<td align="center"><a href="https://vjudge.net/problem/Gym-102946D/origin">Gym 102946D</a></td>
<td><a href="https://vjudge.net/contest/435307#problem/O">Yet another interactive</a></td>
</tr>
</tbody></table>
<h3 id="C-Brilliant-Sequence-of-Umbrellas"><a href="#C-Brilliant-Sequence-of-Umbrellas" class="headerlink" title="C - Brilliant Sequence of Umbrellas"></a><a href="https://vjudge.net/problem/Gym-102956M">C - Brilliant Sequence of Umbrellas</a></h3><div class="note info"><p>给定整数 $n$，构造出一个长度为 $\lceil\frac{2}{3}\sqrt{n}\rceil$ 的序列 $a$ ，满足 </p>
<ul>
<li>$a_i\gt a_{i-1}$，$\forall i\geq 2$</li>
<li> $\gcd(a_{i+1},a_{i})&gt;\gcd(a_i,a_{i-1})$，$\forall i\geq 2$</li>
<li>$a_i\leq n$，$\forall i\geq 1$</li>
</ul>
<p>$n\leq 10^{12}$</p>
</div>

<p>开始一直没看到第三个条件，还不知道为什么WA，结果还连交了4发。。</p>
<p>最直观的想法是，令 $p_i$ 为第 $i$ 个质数，则 $a_i=p_{i}\times p_{i-1}$，这样构造出的序列满足前两个条件。但是它增长的有点快，$a_n$ 都到 $10n$ 量级了，因此不满足第三个条件。</p>
<p>那么延续着上面的思路，令 $a_i=i\times(i+1)$ 呐？列举了一下发现 $\gcd(a_3=6,a_4=12)=6$，而我们希望它是 $3$，不然无法满足第二个条件。</p>
<p>其实可以隐约发现，问题就出现在偶数上。 $a_{2i}=2i\times(2i+1),a_{2i+1}=(2i+1)\times(2i+2)$，则 $\gcd(a_{2i},a_{2i+1})=2(2i+1)$，而我们希望它是 $2i+1$。再结合 $\frac{2}{3}\sqrt{n}$ 这个奇怪的 $\frac{2}{3}$ 的系数，可以想到，跳过一些偶数即可实现，即通过 $1,2,3,(4),5,(6),7,8,9,(10),11,(12),13,14$ 构造出 $1,2,6,15,56,72,99$。</p>
<p>不过我在考场上并没有意识到。我的想法是，既然每个数都是 $a_i=b_i\times c_i$ 的形式，且 $c_i=b_{i+1}$ 作为相邻两数的最大公因数，那么我们只要保证 $\gcd(a_i,c_{i+1})\not= 1$ 即可，所以 $c_i$ 就从 $b_i+1$ 开始往上枚举，直到符合条件为止。这样构造出来的序列与上文是一样的。</p>
<p>我是在赛后，经队友题型才注意到 $\frac{2}{3}$ 是个提示。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 13:50:17</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    m = <span class="built_in">ceil</span>(<span class="number">2.0</span> / <span class="number">3</span> * <span class="built_in">sqrt</span>(n));</span><br><span class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> nxt = now + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (__gcd(<span class="number">1ll</span> * nxt, A[i - <span class="number">1</span>]) != <span class="number">1</span>) ++nxt;</span><br><span class="line">        A[i] = <span class="number">1ll</span> * now * nxt;</span><br><span class="line">        now = nxt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, A[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="D-Cube"><a href="#D-Cube" class="headerlink" title="D - Cube"></a><a href="https://vjudge.net/problem/Gym-103055C">D - Cube</a></h3><div class="note info"><p>给你八个点的坐标，求它们能否构成一个正方体的八个顶点。</p>
</div>

<p>设正方体的边长为 $a$ ，它的一个顶点与其他七个顶点的距离的平方为三个 $a^2$，三个$2a^2$ 和一个 $3a^2$。</p>
<p>于是检验一下这八个点的距离是否符合该性质即可，注意 $a\not= 0$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 12:02:27</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">10</span>], t[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqr</span>(a[x][<span class="number">0</span>] - a[y][<span class="number">0</span>]) + <span class="built_in">sqr</span>(a[x][<span class="number">1</span>] - a[y][<span class="number">1</span>]) + <span class="built_in">sqr</span>(a[x][<span class="number">2</span>] - a[y][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) s[i] = <span class="built_in">cal</span>(<span class="number">0</span>, i);</span><br><span class="line">        <span class="built_in">sort</span>(s, s + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">                t[j] = <span class="built_in">cal</span>(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">sort</span>(t, t + <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] != t[j]) flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="number">0</span>) flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>] != s[<span class="number">2</span>] || s[<span class="number">2</span>] != s[<span class="number">3</span>]) flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">4</span>] != s[<span class="number">5</span>] || s[<span class="number">5</span>] != s[<span class="number">6</span>]) flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">4</span>] != s[<span class="number">1</span>] * <span class="number">2</span> || s[<span class="number">7</span>] != s[<span class="number">1</span>] * <span class="number">3</span>) flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="F-Grammy-and-Jewelry"><a href="#F-Grammy-and-Jewelry" class="headerlink" title="F - Grammy and Jewelry"></a><a href="https://vjudge.net/problem/Gym-103055J">F - Grammy and Jewelry</a></h3> <div class="note info"><p>$n$ 个点 $m$ 条边的无向图，除了 $1$ 号点，每个点有无限多个价值为 $a_i$ 的宝藏，每移动一条边花费时间 $1$，每次只能携带一个宝藏。从 $1$ 号点出发，到达任意一个点，即可拿走一个宝藏，并带回 $1$ 号点，获得收益 $a_i$。如果时间有富余，则可以继续出发去拿下一个宝藏。求 $t=1\sim T$ ，每个时间 $t$ 的最大收益。</p>
<p>$n,m,T\leq 10^3$</p>
</div>

<p>BFS预处理最短路，得到每个点到 $1$ 号点的距离，并记录距离为 $x$ 的点中 $a_i$ 的最大值 $f_x$。则每花费 $2\times x$ 的时间，即可收益 $f_x$。</p>
<p>已知 $f$，剩下的就是一个背包问题了。</p>
<p>复杂度 $O(nT)$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 15:20:53</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; E[MAXN];</span><br><span class="line"><span class="keyword">int</span> Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Mx[MAXN];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> Dis);</span><br><span class="line">    Dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    Que.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!Que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = Que.<span class="built_in">front</span>(); Que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : E[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Dis[v] &gt; Dis[x] + <span class="number">1</span>) &#123;</span><br><span class="line">                Dis[v] = Dis[x] + <span class="number">1</span>;</span><br><span class="line">                Que.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dis[i] * <span class="number">2</span> &gt; K) <span class="keyword">continue</span>;</span><br><span class="line">        Mx[Dis[i] &lt;&lt; <span class="number">1</span>] = <span class="built_in">max</span>(Mx[Dis[i] &lt;&lt; <span class="number">1</span>], A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> F[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        E[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        E[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">        F[i] = F[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            F[i] = <span class="built_in">max</span>(F[i], F[i - j] + Mx[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="G-Group-QQ-Speed"><a href="#G-Group-QQ-Speed" class="headerlink" title="G - Group QQ Speed"></a><a href="https://vjudge.net/problem/Gym-103048G">G - Group QQ Speed</a></h3><div class="note info"><p>$T$ 组数据。</p>
<p>有 $n$ 个人， $k$ 个数，每个人可以选择 $1\sim k$ 中的任意一个数。选完后，他们被分成 $m$ 组，每个组里有 $\frac{n}{m}$ 的人。 你可以根据每个人选的数，决定他的分组，但要求分组后，每组里，$1\sim k$ 中至少有 $1$ 个数没有被它的组员选择。</p>
<p>求 $k$ 的最小值，使得无论这些人怎么选，你都有方法完成分组。</p>
<p>$T\leq 10^5,1\leq n,m\leq 10^9,m|n$</p>
</div>

<p>考虑一些特殊情况，当 $m=n$ 时， $k=2$；当 $m=1$ 时，$k=n+1$。</p>
<p>而其余情况 $k=3$。</p>
<p>假设有 $a$ 个人选 $1$，$b$ 个人选 $2$，$c$ 个人选 $3$，记每组的人数为 $p=\frac{n}{m}$。</p>
<p>我们先分出 $\lfloor\frac{a}{p}\rfloor$ 个全 $1$ 组，$\lfloor\frac{b}{p}\rfloor$ 个全 $2$ 组，$\lfloor\frac{c}{p}\rfloor$ 个全 $3$ 组。那么此时剩下 $a\bmod p$，$b\bmod p$ 和 $c\bmod p$ 个选 $1,2,3$ 的人。</p>
<p>于是我们将选 $1$ 和 $2$ 的人混成一组，同理 $1,3$ 和 $2,3$ 混成一组。那么每个组都有至少一个数没有被选。</p>
<p>只有当只剩下一个组，且 $a\bmod p\gt 0,b\bmod p\gt 0,c\bmod p\gt 0$ 时，才会出现选择 $1,2,3$ 的人在同一组的情况，而这种情况是不可能发生的。因为 $n=a+b+c$ 是 $p$ 的倍数，因此 $a\bmod p+b\bmod p+c\bmod p=(a+b+c)\bmod p=0$。</p>
<p>故 $k=3$ 能够实现任何情况的分组。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 16:01:20</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (n == m) <span class="built_in">puts</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="I-I-Love-You"><a href="#I-I-Love-You" class="headerlink" title="I - I Love You"></a><a href="https://vjudge.net/problem/Gym-103048I">I - I Love You</a></h3><div class="note info"><p>给定字符串 $s,t$，求 $s$ 能否删去若干个字符得到 $t$。</p>
<p>$|s|,|t|\leq 100$</p>
</div>

<p>真正的签到题，逐位匹配就好。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 12:19:54</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string s, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == t[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++cur == t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="J-John-Katya-no-nuts"><a href="#J-John-Katya-no-nuts" class="headerlink" title="J - John, Katya, no nuts"></a><a href="https://vjudge.net/problem/Gym-103029C">J - John, Katya, no nuts</a></h3> <div class="note info"><p>给定 $x$ 和 $a$，求最小的非负整数 $b$，满足 $|x-a|\lt|x-b|$。</p>
</div>

<p>明明是签到题，结果WA了好几发。。</p>
<p>若 $|x-a|&lt;x$，则 $b=0$。</p>
<p>若 $x&lt;a$，则 $b=a+1$。</p>
<p>否则 $b=2a+1$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 12:38:52</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(a - b) &lt; a) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span> * a + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="K-K-Primes"><a href="#K-K-Primes" class="headerlink" title="K - K-Primes"></a><a href="https://vjudge.net/problem/Gym-103048K">K - K-Primes</a></h3> <div class="note info"><p>给定 $l$ 和 $k$，求 $[l,l+2k)$ 中是否有至少 $k+1$ 个质数。</p>
</div>

<p>还是签到题，奈何开始读错了题意，以为是至少 $k$ 个质数。。</p>
<p>区间中奇数偶数各占 $k$ 个，而奇数不一定是质数，偶数除了 $2$ 都不是质数，因此上限就是 $k+1$ 个质数，此时奇数全是质数，还得包含 $2$。</p>
<p>那么满足条件的区间就只有 $l=2$ 且 $k\leq 3$ 了。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 12:05:55</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;k);</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">2</span> &amp;&amp; k &lt;= <span class="number">3</span>) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="L-Peter-Piper-Picked-the-Perfect-Piece-of-Pizza"><a href="#L-Peter-Piper-Picked-the-Perfect-Piece-of-Pizza" class="headerlink" title="L - Peter Piper Picked the Perfect Piece of Pizza"></a><a href="https://vjudge.net/problem/Gym-102985D">L - Peter Piper Picked the Perfect Piece of Pizza</a></h3> <div class="note info"><p>将$l\times w$ 的矩形横着切 $n$ 刀，竖着切 $m$ 刀。求切完后面积最大的那块的坐标。</p>
<p>$l,w\leq 10^9,n,m\leq 10^3$</p>
</div>

<p>还是签到题。</p>
<p>分别对被切的横竖的坐标排序，取相邻差最大的那个，注意要算上边界。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 13:25:10</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l, w, n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[ans] - v[ans - <span class="number">1</span>] &lt; v[i] - v[i - <span class="number">1</span>]) ans = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;w, &amp;n, &amp;m);</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    b.<span class="built_in">resize</span>(m);</span><br><span class="line">    a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    a.<span class="built_in">push_back</span>(l);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    b.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    b.<span class="built_in">push_back</span>(w);</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());</span><br><span class="line">    b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> x = <span class="built_in">get</span>(a), y = <span class="built_in">get</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, b[y - <span class="number">1</span>], a[x - <span class="number">1</span>], b[y], a[x]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="M-stral-Reflection"><a href="#M-stral-Reflection" class="headerlink" title="M - stral Reflection"></a><a href="https://vjudge.net/problem/Gym-103061A">M - stral Reflection</a></h3> <div class="note info"><p>有 $n$ 个点， $m$ 个操作。</p>
<ul>
<li><code>1 l r</code> 插入一条线段，覆盖区间 $[l,r]$</li>
<li><code>2 p a1 a2 ... ap</code> 给定这 $p$ 个点，求最少需要几条线段将它们全部覆盖，无法覆盖输出<code>-1</code> </li>
</ul>
<p>$n,m,\sum{p}\leq 10^5$</p>
</div>

<p>其实基本思路很简单，就是贪心。先找到能覆盖 $a_1$ 且右端点尽可能大的线段，然后到下一个无法覆盖的点依次类推，直到没有线段或者已经覆盖 $a_p$。</p>
<p>但是怎么找这样的线段我在考场上并没有想到。</p>
<p>对于每个操作 $1$，更新 $a_l=r$，用线段树维护区间最大值。则要插入包含坐标 $x$ 且右端点尽可能大的线段，则查询 $[1,x]$ 的最大值即可。</p>
<p>复杂度 $O(m\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 15:37:03</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> Mx[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        Mx[rt] = <span class="built_in">max</span>(Mx[rt], x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span>, l, m, p, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, p, x);</span><br><span class="line">    Mx[rt] = <span class="built_in">max</span>(Mx[rt &lt;&lt; <span class="number">1</span>], Mx[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b) <span class="keyword">return</span> Mx[rt];</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= m) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rt &lt;&lt; <span class="number">1</span>, l, m, a, b));</span><br><span class="line">    <span class="keyword">if</span> (m &lt; b) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, l, r, n; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%*d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, N, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">            v.<span class="built_in">resize</span>(n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">int</span> r = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; x) &#123;</span><br><span class="line">                    r = <span class="built_in">queryMax</span>(<span class="number">1</span>, <span class="number">1</span>, N, <span class="number">1</span>, x);</span><br><span class="line">                    ++ans;</span><br><span class="line">                    <span class="keyword">if</span> (r &lt; x) &#123;</span><br><span class="line">                        ans = <span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="N-Wall-Game"><a href="#N-Wall-Game" class="headerlink" title="N - Wall Game"></a><a href="https://vjudge.net/problem/Gym-103055G">N - Wall Game</a></h3> <div class="note info"><p><img src="https://i.loli.net/2021/05/02/bCy4mjx6JKe8G27.png" alt="image-20210502133433327"></p>
<p>地图长成这样，有 $m$ 个操作。</p>
<ul>
<li><code>1 x y</code> 将坐标为 $(x,y)$ 的格子占领，与相邻的被占领的格子合并成更大的联通块</li>
<li><code>2 x y</code> 询问坐标为 $(x,y)$ 的格子所在的联通块，其形状边界有多少条边 </li>
</ul>
</div>

<p>并查集裸题，创新点在于数边。</p>
<p>两联通块合并，新的联通块的边数不是二者之和，而是在此基础上还要减去它们公共的部分，因为这些边不再是新联通块的边界。有一条边相邻，总边数就要 $-2$。因此考虑新增一个格子，它与周围 $x(x\leq 6)$ 个格子所在的连通块合并，则由于它们的公共边导致的边数减少为 $2x$。</p>
<p>复杂度 $O(n\alpha({n}))$，不过我是用<code>map</code>维护的格子编号，所以还多个 $\log$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">map&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN], Siz[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a = <span class="built_in">findFa</span>(a), b = <span class="built_in">findFa</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">return</span> ;</span><br><span class="line">    Fa[a] = b;</span><br><span class="line">    Siz[b] += Siz[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dy[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;opt, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Map.<span class="built_in">find</span>(&#123;x, y&#125;) == Map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                Map[ &#123;x, y&#125;] = ++cnt;</span><br><span class="line">                Fa[Map.<span class="built_in">size</span>()] = cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> nx = x + Dx[i], ny = y + Dy[i];</span><br><span class="line">                <span class="keyword">if</span> (Map.<span class="built_in">find</span>(&#123;nx, ny&#125;) != Map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    <span class="built_in">merge</span>(Map[ &#123;x, y&#125;], Map[ &#123;nx, ny&#125;]);</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Siz[<span class="built_in">findFa</span>(Map[ &#123;x, y&#125;])] += <span class="number">6</span> - <span class="number">2</span> * num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Siz[<span class="built_in">findFa</span>(Map[ &#123;x, y&#125;])]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="O-Yet-another-interactive"><a href="#O-Yet-another-interactive" class="headerlink" title="O - Yet another interactive"></a><a href="https://vjudge.net/problem/Gym-102946D">O - Yet another interactive</a></h3> <div class="note info"><p>这是一道交互题。</p>
<p>有两个长为 $n$ 的排列 $a,b$。$b$ 是由 $a$ 平移 $k$ 步得到的，即 $b_i=a_{(i+k)\mod n}$</p>
<p>至多交互 $2n$ 次，每次询问 <code>? x y</code>，系统返回 $\max(a_x,b_y)$。</p>
<p>求 $k$。</p>
</div>

<p>如果我们询问 <code>? 0 i</code>，$i$ 遍历 $0\sim n-1$。则有两种情况：</p>
<ul>
<li>返回了 $n$ 个 $n$，说明 $a_0=n$</li>
<li>询问某个 <code>? 0 p</code> 时返回 $n$，说明 $b_p=n$</li>
</ul>
<p>对于第一种情况，我们再询问<code>? 1 i</code>，由于 $a_1\not =n$，因此可以得到 $b$ 中 $n$ 的位置，$b_p=n$，则$k=p$。</p>
<p>对于第二种情况，我们再询问<code>? i x</code>，其中 $x\not= p$。由于 $b_x\not=n$，同理可以找到 $a$ 中 $n$ 的位置，$a_q=n$，则 $k=(p-q+n)\bmod n$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 16:30:12</span></span><br><span class="line"><span class="comment"> * @source:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">-1</span>, type = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, <span class="number">0</span>, i);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == n &amp;&amp; pos != <span class="number">-1</span>) type = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == n) pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;? 1 %d\n&quot;</span>, i);</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;! %d\n&quot;</span>, i);</span><br><span class="line">                <span class="built_in">fflush</span>(stdout);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, i, (pos + <span class="number">1</span>) % n);</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;! %d\n&quot;</span>, (pos - i + n) % n);</span><br><span class="line">                <span class="built_in">fflush</span>(stdout);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>BIT ACM</category>
      </categories>
      <tags>
        <tag>交互</tag>
        <tag>线段树</tag>
        <tag>并查集</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF EDU - Disjoint Sets Union 学习记录</title>
    <url>/2021/05/01/ITMO-Disjoint-Sets-Union/</url>
    <content><![CDATA[<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1">Step 1</a></h2><p>E题疯狂MLE，我真佛了。。</p>
<h3 id="Disjoint-Sets-Union"><a href="#Disjoint-Sets-Union" class="headerlink" title="Disjoint Sets Union"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/A">Disjoint Sets Union</a></h3><div class="note info"><p>两种操作：</p>
<ul>
<li><code>1 u v</code>：合并 $u$ 和 $v$ 所在的集合</li>
<li><code>2 u v</code>：查询 $u$ 和 $v$ 是否在同一个集合</li>
</ul>
</div>

<p>并查集的基本操作。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 00:03:38</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">findAnc</span>(u);</span><br><span class="line">    v = <span class="built_in">findAnc</span>(v);</span><br><span class="line">    Anc[v] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = i;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, s, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">merge</span>(u, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="built_in">findAnc</span>(u) == <span class="built_in">findAnc</span>(v) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Disjoint-Sets-Union-2"><a href="#Disjoint-Sets-Union-2" class="headerlink" title="Disjoint Sets Union 2"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/B">Disjoint Sets Union 2</a></h3><div class="note info"><p>两种操作：</p>
<ul>
<li><code>1 u v</code>：合并 $u$ 和 $v$ 所在的集合</li>
<li><code>2 u</code>：查询 $u$ 所在集合的元素最大值和最小值</li>
</ul>
</div>

<p>那就每个集合维护两个最值，合并的时候取个min/max。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 00:11:54</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN], Mx[MAXN], Mn[MAXN], Sz[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">findAnc</span>(u), v = <span class="built_in">findAnc</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> ;</span><br><span class="line">    Anc[u] = v;</span><br><span class="line">    Sz[v] += Sz[u];</span><br><span class="line">    Mx[v] = <span class="built_in">max</span>(Mx[v], Mx[u]);</span><br><span class="line">    Mn[v]= <span class="built_in">min</span>(Mn[v], Mn[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = Mn[i] = Mx[i] = i, Sz[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, s, &amp;u);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            <span class="built_in">merge</span>(u, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">findAnc</span>(u);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, Mn[x], Mx[x], Sz[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/C">Experience</a></h3><div class="note info"><p>三种操作：</p>
<ul>
<li><code>1 u v</code>：合并 $u$ 和 $v$ 所在的集合</li>
<li><code>2 u x</code>：将 $u$ 所在集合的所有元素权值增加 $x$</li>
<li><code>3 u</code>：查询 $u$ 的权值</li>
</ul>
</div>

<p>对于操作 $2$，将增加的值挂在根节点 $x$ 上，记为 $Add[u]$。</p>
<p>采用启发式合并，将小的集合（根节点记为 $v$）中的每个元素合并到大的集合（根节点记为 $v$）中去。</p>
<p>同时将 $v$ 集合中每个点的权值增加 $Add[v]-Add[u]$，因为当它们合并到 $u$ 后，头上还有 $Add[u]$，提前减去算是扯平了。</p>
<p>复杂度 $O(n\log{n}\alpha(n))$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 00:16:34</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Pts[MAXN], Add[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Child[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">findAnc</span>(u), v = <span class="built_in">findAnc</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (Child[u].<span class="built_in">size</span>() &gt; Child[v].<span class="built_in">size</span>()) <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : Child[u]) &#123;</span><br><span class="line">        Pts[x] += Add[u] - Add[v];</span><br><span class="line">    &#125;</span><br><span class="line">    Add[u] = <span class="number">0</span>;</span><br><span class="line">    Child[v].<span class="built_in">insert</span>(Child[v].<span class="built_in">end</span>(), Child[u].<span class="built_in">begin</span>(), Child[u].<span class="built_in">end</span>());</span><br><span class="line">    Anc[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    Add[x] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Anc[i] = i;</span><br><span class="line">        Child[i].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, s, &amp;u);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;j&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            <span class="built_in">merge</span>(u, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            <span class="built_in">add</span>(u, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">findAnc</span>(u);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Pts[u] + Add[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Cutting-a-graph"><a href="#Cutting-a-graph" class="headerlink" title="Cutting a graph"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/D">Cutting a graph</a></h3><div class="note info"><p>给定一张无向图，有两种操作：</p>
<ul>
<li><code>1 u v</code>：断掉边 $(u,v)$ </li>
<li><code>2 u v</code>：查询 $u$ 和 $v$ 是否联通</li>
</ul>
</div>

<p>并查集不能维护删边，因此我们可以离线后倒着做，将删边变成加边。</p>
<p>先得到经过所有操作后的图。然后从后往前处理每个操作。</p>
<p>如果是操作 $1$，则合并 $u$ 和 $v$ 所在联通块；如果操作 $2$ ，则查询 $u$ 和 $v$ 的连通性。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-01 10:17:29</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line">set&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; S;</span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; a;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Ans;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == Anc[x] ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">findAnc</span>(u), v = <span class="built_in">findAnc</span>(v);</span><br><span class="line">    Anc[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        S.<span class="built_in">insert</span>(&#123;<span class="built_in">min</span>(u, v), <span class="built_in">max</span>(u, v)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= K; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, s, &amp;u, &amp;v);</span><br><span class="line">        a.<span class="built_in">push_back</span>(&#123;s[<span class="number">0</span>] == <span class="string">&#x27;c&#x27;</span>, &#123;u, v&#125;&#125;);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;c&#x27;</span>) S.<span class="built_in">erase</span>(&#123;<span class="built_in">min</span>(u, v), <span class="built_in">max</span>(u, v)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : S) <span class="built_in">merge</span>(x.first, x.second);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = K - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].first == <span class="number">0</span>) &#123;</span><br><span class="line">            Ans.<span class="built_in">push_back</span>(<span class="built_in">findAnc</span>(a[i].second.first) == <span class="built_in">findAnc</span>(a[i].second.second));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">merge</span>(a[i].second.first, a[i].second.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Ans.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(Ans[i] ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Monkeys"><a href="#Monkeys" class="headerlink" title="Monkeys"></a><a href="https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/E">Monkeys</a></h3><div class="note info"><p>有 $n$ 只猴子挂在树上。$1$ 号猴子尾巴挂在树上，因此它永远不会掉下啦。每只猴子的双手分别抓着两只猴子的尾巴（手可以什么都不抓，也可以左右两手同时抓同一只猴子的尾巴）。最后得到了结果是每只猴子依靠抓别人的尾巴，全都浮在空中。</p>
<p>一共有 $m$ 秒，在第 $i$ 秒钟，第 $a_i$ 只猴子松开了它的左/右手，而它和若干只猴子可能会因此摔下去。</p>
<p>求每只猴子在第几秒钟会摔下去。</p>
<p>$n\leq 200000,m\leq 400000$</p>
</div>

<p>题意不太好说清楚，不过大概意思很好想象。。</p>
<p>有的猴子两只手都松开了，但是由于有猴子依靠其他猴子悬浮在空中又抓着它的尾巴，使得它没有掉下来。</p>
<p>抽象来说，任意时刻，只要与 $1$ 号猴子还联通的猴子，就都在空中，反之就掉下来了。</p>
<p>跟上题一样，还在离线倒着做。</p>
<p>合并的时候，如果发现其中一个集合就是 $1$ 号猴子所在的结合，那么另外一个集合里的所有猴子就都是在该时刻掉下去的。</p>
<div class="note danger"><p>需要非常注意的是，<code>vector.clear()</code> 不会释放内存！！！于是我MLE了几十次，百思不得其解。</p>
<p>正确的释放内存的方法为<code>vector&lt;T&gt;().swap(v);</code>，如果你想释放掉 <code>vector&lt;T&gt; v</code> 的内存的话。</p>
</div>

<p>合并的时候仍然采用启发式合并。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-06 00:07:09</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/1/practice/contest/289390/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> H[MAXN][<span class="number">2</span>], A[MAXN &lt;&lt; <span class="number">1</span>], B[MAXN &lt;&lt; <span class="number">1</span>], C[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findFa</span>(x);</span><br><span class="line">    y = <span class="built_in">findFa</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="built_in">findFa</span>(<span class="number">1</span>)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="built_in">findFa</span>(<span class="number">1</span>)) <span class="keyword">for</span> (<span class="keyword">auto</span> a : v[y]) Ans[a] = t;</span><br><span class="line">    <span class="keyword">if</span> (v[x].<span class="built_in">size</span>() &lt; v[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    v[x].<span class="built_in">insert</span>(v[x].<span class="built_in">end</span>(), v[y].<span class="built_in">begin</span>(), v[y].<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(v[y]);</span><br><span class="line">    Fa[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;H[i][<span class="number">0</span>], &amp;H[i][<span class="number">1</span>]);</span><br><span class="line">        Fa[i] = i;</span><br><span class="line">        v[i].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;A[i], &amp;B[i]);</span><br><span class="line">        C[A[i]][--B[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~H[i][j] &amp;&amp; !C[i][j]) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, H[i][j], <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Ans[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = H[A[i]][B[i]];</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">merge</span>(x, A[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i] == M ? <span class="number">-1</span> : Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice">Step 2</a></h2><h3 id="People-are-leaving"><a href="#People-are-leaving" class="headerlink" title="People are leaving"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/A">People are leaving</a></h3><div class="note info"><p>$n$ 个人站在一排，从左到右依次是 $1\sim n$。有 $m$ 个操作：</p>
<ul>
<li><code>- x</code>：第 $x$ 个人离开</li>
<li><code>? x</code>：查询第 $x$ 个位置右边最近的还在站着的人。</li>
</ul>
<p>$1\leq n,m\leq 10^6$</p>
</div>

<p>离开的人可以由若干个连续区间表示，查询同一个被删除区间中的所有位置，其答案相同。</p>
<p>用 $R[x]$ 表示集合 $x$ 右侧第一个还在的人是谁，初始化 $R[i]=i$。</p>
<p>当第 $i$ 个人离开时，若第 $i+1$ 个人还在，则 $R[i]=i+1$。</p>
<p>若第 $i-1$ 个人离开了，则将 $i$ 与 $i-1$ 的集合合并，若第 $i+1$ 个人离开了，则合并 $i$ 和 $i+1$。</p>
<p>复杂度 $O(m\alpha{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-06 23:38:52</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> R[MAXN], A[MAXN], Fa[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findFa</span>(x);</span><br><span class="line">    y = <span class="built_in">findFa</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">    R[x] = <span class="built_in">max</span>(R[x], R[y]);</span><br><span class="line">    Fa[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        R[i] = Fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, s, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!A[x + <span class="number">1</span>]) R[x] = x + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">merge</span>(x + <span class="number">1</span>, x);</span><br><span class="line">            <span class="keyword">if</span> (A[x - <span class="number">1</span>]) <span class="built_in">merge</span>(x - <span class="number">1</span>, x);</span><br><span class="line">            A[x] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> y = R[<span class="built_in">findFa</span>(x)];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y &gt; n ? <span class="number">-1</span> : y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Parking"><a href="#Parking" class="headerlink" title="Parking"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/B">Parking</a></h3><div class="note info"><p>停车城有 $n$ 个车位围成一个圆，第 $i$ 辆车计划停在第 $p_i$ 个车位里。</p>
<p>从第一辆车开始，逐个进入停车场。若它的计划车位已被其他车占用，则它会找到计划车位右侧第一个空的车位停下。</p>
<p>求每辆车的最终停车位置。</p>
<p>$n\leq 300000$</p>
</div>

<p>与上一道题类似，仍然是将被占领的区间看作一个集合，并维护 $R[x]$，在此不多赘述。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-07 00:02:54</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], R[MAXN], Fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getL</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">1</span> ? n : x - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getR</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == n ? <span class="number">1</span> : x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        R[i] = Fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        x = R[<span class="built_in">findFa</span>(x)];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">        A[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="built_in">getR</span>(x)]) &#123;</span><br><span class="line">            Fa[x] = <span class="built_in">findFa</span>(<span class="built_in">getR</span>(x));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            R[x] = <span class="built_in">getR</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="built_in">getL</span>(x)]) &#123;</span><br><span class="line">            Fa[<span class="built_in">findFa</span>(<span class="built_in">getL</span>(x))] = Fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Restructuring-Company"><a href="#Restructuring-Company" class="headerlink" title="Restructuring Company"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/C">Restructuring Company</a></h3><div class="note info"><p>有 $n$ 个点，开始每个点都是独立的集合。有 $m$ 个操作：</p>
<ul>
<li><code>1 x y</code>：合并 $x$ 和 $y$ 所在的集合</li>
<li><code>2 l r</code>：合并 $l,l+1,\cdots, r$ 所在的集合</li>
<li><code>3 x y</code>：查询 $x$ 和 $y$ 是否属于同一个集合 </li>
</ul>
<p>$n\leq 200000,m\leq 500000$</p>
</div>

<p>如果只有操作 $2$，可以维护类似前两题的 $R[x]$，表示每段被合并区间的右端点。那么合并区间 $[l,r]$ 由若干个小区间组成，每次通过 $x=R[findFa(x)]+1$ 跳到下一个区间，最终被合并后变成一个大区间。而初始状态有 $n$ 个区间，至多进行 $n-1$ 次合并就会变成一个大区间，因此总复杂度为 $O(n\alpha{(n)})$，与具体的操作区间无关。</p>
<p>但是还有操作 $1$，它可能会连接两个并不相邻的区间，从而破坏了 $R$ 的性质。</p>
<p>因此我们可以做两层并查集，第一层并查集维护操作 $2$ 的区间，第二层并查集维护不同区间之间的集合关系（操作 $1$）。</p>
<p>整体复杂度 $O(n\alpha{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-07 11:28:13</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN], Anc[MAXN];</span><br><span class="line"><span class="keyword">int</span> R[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findFa</span>(x);</span><br><span class="line">    y = <span class="built_in">findFa</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!type) Fa[x] = y;</span><br><span class="line">    Anc[<span class="built_in">findAnc</span>(x)] = <span class="built_in">findAnc</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Fa[i] = R[i] = Anc[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, l, r; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;opt, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">merge</span>(l, r, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = R[<span class="built_in">findFa</span>(l)]; i &lt; r; i = R[<span class="built_in">findFa</span>(i + <span class="number">1</span>)]) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="built_in">findAnc</span>(<span class="built_in">findFa</span>(l)) == <span class="built_in">findAnc</span>(<span class="built_in">findFa</span>(r)) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Bosses"><a href="#Bosses" class="headerlink" title="Bosses"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/D">Bosses</a></h3><div class="note info"><p>给定 $n$ 个点，起初点之间没有边。维护一个森林，有 $m$ 个操作：</p>
<ul>
<li><code>1 a b</code>：在 $a,b$ 之间连一条边，使 $a$ 成为 $b$ 的儿子</li>
<li><code>2 a</code>：查询点 $a$ 的深度</li>
</ul>
<p>$1\leq n,m\leq 3\times 10^5$</p>
</div>

<p>用 $Len[x]$ 表示点 $x$ 的深度。</p>
<p>考虑操作 $1$ 会产生什么影响。以 $a$ 为根节点的所有点的深度会增加 $Len[b]+1$。</p>
<p>于是可以用类似Step 1的Experience的做法，把整个集合增加的值挂在根节点处，用启发式合并将小集合合并到大集合中。</p>
<p>复杂度 $O(n\log{n}\alpha{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-07 12:10:29</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Fa[MAXN], Len[MAXN], Add[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] == x ? x : Fa[x] = <span class="built_in">findFa</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findFa</span>(x);</span><br><span class="line">    y = <span class="built_in">findFa</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (v[x].<span class="built_in">size</span>() &gt; v[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : v[x]) Len[u] += Add[x] - Add[y];</span><br><span class="line">    Add[x] = <span class="number">0</span>;</span><br><span class="line">    v[y].<span class="built_in">insert</span>(v[y].<span class="built_in">end</span>(), v[x].<span class="built_in">begin</span>(), v[x].<span class="built_in">end</span>());</span><br><span class="line">    Fa[x] = y;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(v[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Fa[i] = i;</span><br><span class="line">        v[i].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            Add[<span class="built_in">findFa</span>(x)] += Len[y] + Add[<span class="built_in">findFa</span>(y)] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">merge</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Len[x] + Add[<span class="built_in">findFa</span>(x)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Spanning-Tree"><a href="#Spanning-Tree" class="headerlink" title="Spanning Tree"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/E">Spanning Tree</a></h3><div class="note info"><p>求一张图无向图的最小生成树。</p>
<p>$n,m\leq 200000$</p>
</div>

<p>将所有边按照边权从小到大排序后，逐一插入。复杂度 $O(m\log{m})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-10 20:48:51</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Anc[y] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = i;</span><br><span class="line">    E.<span class="built_in">resize</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : E) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e.u, &amp;e.v, &amp;e.w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : E) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">merge</span>(e.u, e.v)) ans += e.w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Dense-spanning-tree"><a href="#Dense-spanning-tree" class="headerlink" title="Dense spanning tree"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/F">Dense spanning tree</a></h3><div class="note info"><p>给定一张图，求权值最小的生成树。</p>
<p>一棵生成树的权值定义为其中权值最大的边与权值最小的边的差。</p>
<p>$n\leq 1000,m\leq 10000$</p>
</div>

<p>将所有边排序后，对于每个 $l$，求出最小 $r$，使得 $[l,r]$ 之间的边可以组成一棵生成树，则答案为 $\min(w_r-w_l)$。</p>
<p>复杂度 $O(m^2\alpha{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-10 21:02:17</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Anc[y] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    E.<span class="built_in">resize</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : E) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e.u, &amp;e.v, &amp;e.w);</span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) Anc[j] = j;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; M; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">merge</span>(E[j].u, E[j].v)) ++num;</span><br><span class="line">            <span class="keyword">if</span> (num == N - <span class="number">1</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, E[j].w - E[i].w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == INT_MAX) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="No-refuel"><a href="#No-refuel" class="headerlink" title="No refuel"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/G">No refuel</a></h3><div class="note info"><p>给定一张图，求它所有生成树中，最大边权的最小值。</p>
<p>$n\leq 1500,m\leq 400000$</p>
</div>

<p>等价于求最小生成树的最大权值。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-10 22:06:54</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1500</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Anc[y] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = i;</span><br><span class="line">    E.<span class="built_in">resize</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : E) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e.u, &amp;e.v, &amp;e.w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : E) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">merge</span>(e.u, e.v)) ++num;</span><br><span class="line">        <span class="keyword">if</span> (num == N - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e.w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Oil-business"><a href="#Oil-business" class="headerlink" title="Oil business"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/H">Oil business</a></h3><div class="note info"><p>给定一张图，和一个权值 $k$。求最多删除多少条边，使得被删除边权之和不超过 $k$，且剩下的图仍然联通。</p>
<p>$n\leq 50000,m\leq 100000,s\leq 10^{18}$</p>
</div>

<p>求出最小生成树，然后在剩余的边中从小到大删边，直到权值和超过 $k$。</p>
<p>复杂度 $O(m\log{m})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-10 22:25:45</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/H</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> K;</span><br><span class="line"><span class="keyword">int</span> Anc[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Anc[x] == x ? x : Anc[x] = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Anc[y] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) Anc[i] = i;</span><br><span class="line">    E.<span class="built_in">resize</span>(M);</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : E) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;e.u, &amp;e.v, &amp;e.w);</span><br><span class="line">        e.id = id++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">merge</span>(E[i].u, E[i].v)) &#123;</span><br><span class="line">            E[i].id = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (++num == N - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (K &lt; E[i].w) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (!E[i].id) <span class="keyword">continue</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(E[i].id);</span><br><span class="line">        K -= E[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Bipartite-Graph"><a href="#Bipartite-Graph" class="headerlink" title="Bipartite Graph"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/I">Bipartite Graph</a></h3><div class="note info"><p>初始状态 $n$ 个点，没有边。对每个点黑白染色，要求任意两个有边相连的点颜色不同，有 $m$ 个操作：</p>
<ul>
<li><code>1 u v</code>：连接点 $u,v$</li>
<li><code>2 u v</code>：查询 $u$ 和 $v$ 是否颜色相同（保证 $u,v$ 是联通的）。</li>
</ul>
<p>在线查询。数据保证，在任意时刻，都有染色方案能满足要求。</p>
</div>

<p>在一个联通块中，与某个点距离奇偶性相同的点颜色相同。</p>
<p>用并查集来合并集合。合并 $x$ 和 $y$ 时，设 $x$ 的根节点为 $fx$，$y$ 的根节点为 $fy$，则 $fx$ 的颜色应该修改成 $(Color[x]+Color[y]+1)\bmod 2$（用 $0/1$ 表示黑白），因为 $Color[x]$ 表示的是 $x$ 到 $f$x 距离的奇偶性，$Color[y]$ 同理，则 $(Color[x]+Color[y]+1)\bmod 2$ 表示的就是 $fx$ 到 $fy$ 距离的奇偶性。</p>
<p>而 $findFa$ 函数在找到根节点的同时，还要维护点的颜色。</p>
<p>复杂度 $O(n\alpha{(n)})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-11 10:55:55</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Anc, Len, Siz;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Anc[x] == x) <span class="keyword">return</span> &#123;x, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> y = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">    Anc[x] = y.fir;</span><br><span class="line">    Len[x] = (y.sec + Len[x]) % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;Anc[x], Len[x]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fx = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    <span class="keyword">auto</span> fy = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (Siz[fx.fir] &gt; Siz[fy.fir]) <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">    Anc[fx.fir] = fy.fir;</span><br><span class="line">    Len[fx.fir] = (<span class="number">1</span> + fx.sec + fy.sec) % <span class="number">2</span>;</span><br><span class="line">    Siz[fy.fir] += Siz[fx.fir];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    Anc.<span class="built_in">resize</span>(N);</span><br><span class="line">    Len.<span class="built_in">resize</span>(N);</span><br><span class="line">    Siz.<span class="built_in">resize</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Anc[i] = i;</span><br><span class="line">        Siz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;opt, &amp;x, &amp;y);</span><br><span class="line">        x = (x + num) % N;</span><br><span class="line">        y = (y + num) % N;</span><br><span class="line">        <span class="keyword">if</span> (!opt) &#123;</span><br><span class="line">            <span class="built_in">merge</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">findAnc</span>(x) == <span class="built_in">findAnc</span>(y)) &#123;</span><br><span class="line">                ++num;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="First-Non-Bipartite-Edge"><a href="#First-Non-Bipartite-Edge" class="headerlink" title="First Non-Bipartite Edge"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/J">First Non-Bipartite Edge</a></h3><div class="note info"><p>初始状态有 $n$ 个点，没有边。每次插入一条边 $(u,v)$，要求时刻满足二分图的性质。</p>
<p>求第一条边，使得插入它后，不再是个二分图。</p>
<p>$1\leq n,m\leq 3\times 10^5$。</p>
</div>


<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-11 11:22:06</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/2/practice/contest/289391/problem/J</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMax</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &gt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMin</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &lt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Anc, Len, Siz;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Anc[x] == x) <span class="keyword">return</span> &#123;x, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> y = <span class="built_in">findAnc</span>(Anc[x]);</span><br><span class="line">    Anc[x] = y.fir;</span><br><span class="line">    Len[x] = (y.sec + Len[x]) % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;Anc[x], Len[x]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fx = <span class="built_in">findAnc</span>(x);</span><br><span class="line">    <span class="keyword">auto</span> fy = <span class="built_in">findAnc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (fx.fir == fy.fir) <span class="keyword">return</span> fx.sec != fy.sec;</span><br><span class="line">    <span class="keyword">if</span> (Siz[fx.fir] &gt; Siz[fy.fir]) <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">    Anc[fx.fir] = fy.fir;</span><br><span class="line">    Len[fx.fir] = (<span class="number">1</span> + fx.sec + fy.sec) % <span class="number">2</span>;</span><br><span class="line">    Siz[fy.fir] += Siz[fx.fir];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    Anc.<span class="built_in">resize</span>(N + <span class="number">1</span>);</span><br><span class="line">    Len.<span class="built_in">resize</span>(N + <span class="number">1</span>);</span><br><span class="line">    Siz.<span class="built_in">resize</span>(N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Anc[i] = i;</span><br><span class="line">        Siz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">merge</span>(x, y)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a><a href="https://codeforces.com/edu/course/2/lesson/7/2/practice">Step 3</a></h2><h3 id="DSU-with-rollback"><a href="#DSU-with-rollback" class="headerlink" title="DSU with rollback"></a><a href="https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/A">DSU with rollback</a></h3><div class="note info"><p>维护 $n$ 个的，有 $m$ 个操作：</p>
<ul>
<li><code>union u v</code>：合并 $u,v$ 所在的集合</li>
<li><code>persist</code>：设置断点</li>
<li><code>rollback</code>：将状态回滚到上一个断点，并将该断点删除</li>
</ul>
<p>$1,n,m\leq 2\times 10^5$</p>
</div>

<p>可持久化并查集的模板，其实就是套了个主席树的壳子，每次修改都另起一条新链。</p>
<p>复杂度 $O(m\log{n})$。</p>
<div class="note danger"><p>注意如果要按照我这样动态开点的建树方法，需要提前reserve出足够的空间，否则会出现ub行为，直接RE。</p>
<p>还是UOJ强，第一个dalao就解决了我的问题= . =</p>
</div>


<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-11 11:56:02</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMax</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &gt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMin</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &lt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Rt, Num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa, dep, l, r;</span><br><span class="line">&#125; node;</span><br><span class="line">vector&lt;Node&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(Node &amp;x)</span> </span>&#123;</span><br><span class="line">    A.<span class="built_in">push_back</span>(x);</span><br><span class="line">    <span class="keyword">return</span> A.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="built_in">newNode</span>(node);</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        A[rt].fa = l;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    A[rt].l = <span class="built_in">build</span>(l, m);</span><br><span class="line">    A[rt].r = <span class="built_in">build</span>(m + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> rt;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="keyword">return</span> <span class="built_in">query</span>(A[rt].l, l, m, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(A[rt].r, m + <span class="number">1</span>, r, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">query</span>(rt, <span class="number">1</span>, N, x);</span><br><span class="line">    <span class="keyword">return</span> A[fx].fa == x ? fx : <span class="built_in">findAnc</span>(rt, A[fx].fa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="built_in">newNode</span>(A[pre]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        A[rt].fa = x;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) A[rt].l = <span class="built_in">update</span>(A[pre].l, l, m, p, x);</span><br><span class="line">    <span class="keyword">else</span> A[rt].r = <span class="built_in">update</span>(A[pre].r, m + <span class="number">1</span>, r, p, x);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ++A[rt].dep;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) <span class="built_in">add</span>(A[rt].l, l, m, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">add</span>(A[rt].r, m + <span class="number">1</span>, r, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">findAnc</span>(rt, x);</span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">findAnc</span>(rt, y);</span><br><span class="line">    <span class="keyword">if</span> (fx == fy) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (A[fx].dep &gt; A[fy].dep) <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">    rt = <span class="built_in">update</span>(rt, <span class="number">1</span>, N, A[fx].fa, A[fy].fa);</span><br><span class="line">    <span class="keyword">if</span> (A[fx].dep == A[fy].dep) <span class="built_in">add</span>(rt, <span class="number">1</span>, N, A[fy].fa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    A.<span class="built_in">reserve</span>(<span class="number">2</span> * M * (<span class="keyword">int</span>)<span class="built_in">log2</span>(N));</span><br><span class="line">    Rt.<span class="built_in">push_back</span>(<span class="built_in">build</span>(<span class="number">1</span>, N));</span><br><span class="line">    Num.<span class="built_in">push_back</span>(N);</span><br><span class="line">    <span class="keyword">char</span> opt[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= M; ++i) &#123;</span><br><span class="line">        Num.<span class="built_in">push_back</span>(Num.<span class="built_in">back</span>());</span><br><span class="line">        Rt.<span class="built_in">push_back</span>(Rt.<span class="built_in">back</span>());</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">        <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            Num[i] -= <span class="built_in">merge</span>(Rt[i], u, v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Num[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;p&#x27;</span>) &#123;</span><br><span class="line">            p.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = p.<span class="built_in">back</span>();</span><br><span class="line">            p.<span class="built_in">pop_back</span>();</span><br><span class="line">            Rt[i] = Rt[x];</span><br><span class="line">            Num[i] = Num[x];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Connected-Components-on-Segments"><a href="#Number-of-Connected-Components-on-Segments" class="headerlink" title="Number of Connected Components on Segments"></a><a href="https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/B">Number of Connected Components on Segments</a></h3><div class="note info"><p>$n$ 个点， $m$ 条边。有 $q$ 个查询，每次给定边的区间 $[l,r]$，求 $n$ 个点和这 $r-l+1$ 条边构成的图上有多少个连通块。</p>
<p>$n,m,k\leq 50000$</p>
</div>

<p>回滚莫队+撤销并查集。</p>
<p>分块，将所有查询排序，先按照 $l$ 所在的块从小到大排序，再按照 $r$ 从小到大排序。</p>
<p>假设当前区间为 $[L,R]$，下一个查询区间为 $[l,r]$。</p>
<p>初始化的时候让 $L$ 为该块的右端点 $r_p$，$R=L-1$，则此时图上没有边，并查集为初始状态。</p>
<p>若 $l$ 与 $L$ 处于同一个块，将并查集状态回滚到 $[r_p,R]$。而由于排序的规则，此时 $r\geq R$，拓展右端点直到 $R$，拓展左端点到 $l$，即可得到 $[l,r]$ 的查询结果。</p>
<p>若 $l$ 与 $L$ 处于不同的块，则初始化 $L$ 为 $r_{p+1}$，$R=L-1$，此时并查集为初始状态。</p>
<p>注意可撤销的并查集不能路径压缩，要用按秩合并的方法合并两集合，复杂度为 $O(\log{n})$。</p>
<p>总复杂度 $O((n+m)\sqrt{n}\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-11 23:52:13</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">chkMax</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &gt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">chkMin</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;<span class="keyword">return</span> y &lt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line">vector&lt;pii&gt; E;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Query&gt; Q;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Pos, L, R, Ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; Anc, Siz;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; Stk;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Anc.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        Siz.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        num = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            Anc[i] = <span class="number">-1</span>;</span><br><span class="line">            Siz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (Anc[x] != <span class="number">-1</span>) x = Anc[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">        y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (Siz[x] &gt; Siz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        Anc[x] = y;</span><br><span class="line">        Siz[y] += Siz[x];</span><br><span class="line">        Stk.<span class="built_in">push</span>(x);</span><br><span class="line">        --num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rewind</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (Stk.<span class="built_in">size</span>() &gt; sz) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = Stk.<span class="built_in">top</span>();</span><br><span class="line">            Stk.<span class="built_in">pop</span>();</span><br><span class="line">            Siz[Anc[x]] -= Siz[x];</span><br><span class="line">            Anc[x] = <span class="number">-1</span>;</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t2.<span class="built_in">init</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">        t2.<span class="built_in">merge</span>(E[i].fir, E[i].sec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t2.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    t1.<span class="built_in">merge</span>(E[p].fir, E[p].sec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    E.<span class="built_in">resize</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : E) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;e.fir, &amp;e.sec);</span><br><span class="line">    E.<span class="built_in">insert</span>(E.<span class="built_in">begin</span>(), &#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;K);</span><br><span class="line">    Ans.<span class="built_in">resize</span>(K);</span><br><span class="line">    Q.<span class="built_in">resize</span>(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;Q[i].l, &amp;Q[i].r);</span><br><span class="line">        Q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="built_in">sqrt</span>(M), tot = M / sz + (M % sz &gt; <span class="number">0</span>);</span><br><span class="line">    L.<span class="built_in">resize</span>(tot + <span class="number">1</span>);</span><br><span class="line">    R.<span class="built_in">resize</span>(tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        L[i] = sz * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        R[i] = sz * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">chkMin</span>(R[tot], M);</span><br><span class="line">    Pos.<span class="built_in">resize</span>(M + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L[i]; j &lt;= R[i]; ++j) &#123;</span><br><span class="line">            Pos[j] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(Q.<span class="built_in">begin</span>(), Q.<span class="built_in">end</span>(), [&amp;](<span class="keyword">const</span> Query &amp; x, <span class="keyword">const</span> Query &amp; y) &#123;</span><br><span class="line">        <span class="keyword">return</span> Pos[x.l] == Pos[y.l] ? x.r &lt; y.r : x.l &lt; y.l;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.<span class="built_in">init</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = R[i], r = R[i] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; K &amp;&amp; Pos[Q[j].l] == i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Pos[Q[j].r] == i) &#123;</span><br><span class="line">                Ans[Q[j].id] = <span class="built_in">query</span>(Q[j].l, Q[j].r);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; Q[j].r) <span class="built_in">add</span>(++r);</span><br><span class="line">            <span class="keyword">int</span> tmp = t1.Stk.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (l &gt; Q[j].l) <span class="built_in">add</span>(--l);</span><br><span class="line">            Ans[Q[j].id] = t1.num;</span><br><span class="line">            l = R[i];</span><br><span class="line">            t1.<span class="built_in">rewind</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        t1.<span class="built_in">rewind</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : Ans) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Dynamic-Connectivity-Offline"><a href="#Dynamic-Connectivity-Offline" class="headerlink" title="Dynamic Connectivity Offline"></a><a href="https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/C">Dynamic Connectivity Offline</a></h3><div class="note info"><p>一个 $n$ 个点的图，初始状态没有边。有 $m$ 个操作：</p>
<ul>
<li><code>+ u v</code>：增加边 $(u,v)$</li>
<li><code>- u v</code>：删除边 $(u,v)$</li>
<li><code>?</code> 查询当前图上有几个连通块</li>
</ul>
<p>$n,m\leq 3\times 10^5$</p>
</div>

<p>按照时间分治的线段树+撤销并查集。</p>
<p>对于一条边 $(u,v)$，它的存在时间为 $[l,r]$，则将它挂在线段树中，区间 $[l,r]$ 对应的点上。</p>
<p>查询时，DFS整棵树，每到一个节点就将挂在它上面的所有边插入到并查集中，维护联通块个数。</p>
<p>当DFS到叶子节点 $x$ 时，就得到了 $[1,x]$ 的情况，可以记录查询的答案，返回时再依次撤销所有插入。</p>
<p>复杂度 $O(m\log{m}\log{n})$。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-05-12 10:17:54</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/7/3/practice/contest/289392/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sec second</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMax</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y &gt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">bool</span> <span class="title">chkMin</span><span class="params">(T &amp;x, T &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y &lt; x ? x = y, <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Ans;</span><br><span class="line">map&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; Anc, Siz;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; Stk;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Anc.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        Siz.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        num = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            Anc[i] = i;</span><br><span class="line">            Siz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findAnc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (Anc[x] != x) x = Anc[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">findAnc</span>(x);</span><br><span class="line">        y = <span class="built_in">findAnc</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (Siz[x] &gt; Siz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        Anc[x] = y;</span><br><span class="line">        Siz[y] += Siz[x];</span><br><span class="line">        Stk.<span class="built_in">push</span>(x);</span><br><span class="line">        --num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rewind</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (Stk.<span class="built_in">size</span>() &gt; sz) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = Stk.<span class="built_in">top</span>();</span><br><span class="line">            Stk.<span class="built_in">pop</span>();</span><br><span class="line">            Siz[Anc[x]] -= Siz[x];</span><br><span class="line">            Anc[x] = x;</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;pii&gt;&gt; E;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        E.<span class="built_in">resize</span>(n * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b) &#123;</span><br><span class="line">            E[rt].<span class="built_in">push_back</span>(e);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= m) <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span>, l, m, a, b, e);</span><br><span class="line">        <span class="keyword">if</span> (m &lt; b) <span class="built_in">update</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = t.Stk.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : E[rt]) t.<span class="built_in">merge</span>(e.fir, e.sec);</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Ans.<span class="built_in">find</span>(l) != Ans.<span class="built_in">end</span>()) Ans[l] = t.num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(rt &lt;&lt; <span class="number">1</span>, l, m);</span><br><span class="line">            <span class="built_in">dfs</span>(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        t.<span class="built_in">rewind</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    sgt.<span class="built_in">init</span>(++M);</span><br><span class="line">    <span class="keyword">char</span> opt[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">        <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            Ans[i] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="keyword">if</span> (u &gt; v) <span class="built_in">swap</span>(u, v);</span><br><span class="line">            <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                Map[ &#123;u, v&#125;] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sgt.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, M, Map[ &#123;u, v&#125;], i, &#123;u, v&#125;);</span><br><span class="line">                Map.<span class="built_in">erase</span>(&#123;u, v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : Map) &#123;</span><br><span class="line">        sgt.<span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, M, e.second, M, e.first);</span><br><span class="line">    &#125;</span><br><span class="line">    t.<span class="built_in">init</span>(N);</span><br><span class="line">    sgt.<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : Ans) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x.sec);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

]]></content>
      <categories>
        <category>ITMO Academy&amp;#58; pilot course</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>莫队</tag>
        <tag>并查集</tag>
        <tag>时间分治</tag>
        <tag>回滚莫队</tag>
        <tag>带权并查集</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>CF EDU - Two Pointers Method 学习记录</title>
    <url>/2021/04/25/ITMO-Two-Pointers-Method/</url>
    <content><![CDATA[<p>在Codeforce上EDU上看到了<a href="https://codeforces.com/edu/course/2">ITMO Academy: pilot course</a>，于是就点进去看了看。</p>
<p>发现有<a href="https://codeforces.com/edu/course/2/lesson/2">Suffix Array</a>、<a href="https://codeforces.com/edu/course/2/lesson/4">Segment Tree, part 1</a>、<a href="https://codeforces.com/edu/course/2/lesson/5">Segment Tree, part 2</a>、<a href="https://codeforces.com/edu/course/2/lesson/6">Binary Search</a>、<a href="https://codeforces.com/edu/course/2/lesson/7">Disjoint Sets Union</a>和<a href="https://codeforces.com/edu/course/2/lesson/9">Two Pointers Method</a>，有相应的video、note和practice。</p>
<p>想到今早LeetCode周赛上暴力过了的two pointers的题，于是就先开了这个。不出意外的话，应该会刷完这五个专题。</p>
<p>大部分题都很naive，最重要的总结详见<a href="/two-interval-stacks/"><a href="/2021/04/27/two-interval-stacks/">双栈维护 Two Pointers Method 的区间信息</a></a>。</p>
<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1">Step 1</a></h2><p>Step 1是最基本的two pointers问题，也没啥感想，就不写题解了。</p>
<h3 id="Merging-Arrays"><a href="#Merging-Arrays" class="headerlink" title="Merging Arrays"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/A">Merging Arrays</a></h3><div class="note info"><p>合并两个有序序列。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 20:59:36</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2, v3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; n || p2 &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == n) v3.<span class="built_in">push_back</span>(v2[p2++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p2 == m) v3.<span class="built_in">push_back</span>(v1[p1++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &lt; v2[p2]) v3.<span class="built_in">push_back</span>(v1[p1++]);</span><br><span class="line">        <span class="keyword">else</span> v3.<span class="built_in">push_back</span>(v2[p2++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v3) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Smaller"><a href="#Number-of-Smaller" class="headerlink" title="Number of Smaller"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/B">Number of Smaller</a></h3><div class="note info"><p>给定两个有序序列 $a,b$，对于每个 $b_i$，求 $a$ 中有多少个数比它小。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:02:15</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= v1[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] &lt; x) ++p1;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Equal"><a href="#Number-of-Equal" class="headerlink" title="Number of Equal"></a><a href="https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/C">Number of Equal</a></h3><div class="note info"><p>给定两个有序序列 $a,b$，求有多少对 $(i,j)$ 满足 $a_i=b_j$。</p>
</div>

<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:05:31</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/1/practice/contest/307092/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v1.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v1) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    v2.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v2) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; n &amp;&amp; p2 &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[p1] == v2[p2]) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="number">1</span>, num2 = <span class="number">1</span>;</span><br><span class="line">            ++p1;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] == v1[p1 - <span class="number">1</span>]) ++num1, ++p1;</span><br><span class="line">            ++p2;</span><br><span class="line">            <span class="keyword">while</span> (p2 &lt; m &amp;&amp; v2[p2] == v2[p2 - <span class="number">1</span>]) ++num2, ++p2;</span><br><span class="line">            ans += <span class="number">1ll</span> * num1 * num2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &lt; v2[p2]) &#123;</span><br><span class="line">            ++p1;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; n &amp;&amp; v1[p1] == v1[p1 - <span class="number">1</span>]) ++p1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1[p1] &gt; v2[p2]) &#123;</span><br><span class="line">            ++p2;</span><br><span class="line">            <span class="keyword">while</span> (p2 &lt; m &amp;&amp; v2[p2] == v2[p2 - <span class="number">1</span>]) ++p2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2">Step 2</a></h2><p>Step 2里面主要是一些模板题，不过它后两题使用的two pointers做法我没有见过。仔细研究了一下，发现确实巧妙。</p>
<p>以下题目，默认 $n\leq 10^5,1\leq a_i,k\leq 10^{18}$。</p>
<h3 id="Segment-with-Small-Sum"><a href="#Segment-with-Small-Sum" class="headerlink" title="Segment with Small Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/A">Segment with Small Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\leq k$ 的最大区间长度。</p>
</div>

<p>需要注意的是，因为 $a_i$ 非负才能two pointers，不然随着 $r$ 递增， $l$ 不一定不减。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:25:19</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segment-with-Big-Sum"><a href="#Segment-with-Big-Sum" class="headerlink" title="Segment with Big Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/B">Segment with Big Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\geq k$ 的最小区间长度。</p>
</div>

<p>上一题的镜像问题，有求小于的最长就有求大于的最短。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:31:42</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; s) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, i - l + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Segments-with-Small-Sum"><a href="#Number-of-Segments-with-Small-Sum" class="headerlink" title="Number of Segments with Small Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/C">Number of Segments with Small Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\leq k$ 的区间个数。</p>
</div>

<p>A、B的镜像问题，有求长度的就有求个数的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:34:55</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) sum -= v[l++];</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Number-of-Segments-with-Big-Sum"><a href="#Number-of-Segments-with-Big-Sum" class="headerlink" title="Number of Segments with Big Sum"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/D">Number of Segments with Big Sum</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\sum\limits_{l}^{r}{a_i}\geq k$ 的区间个数。</p>
</div>

<p>上一题的镜像问题，有求小于的就有求大于的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 21:57:26</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        sum += v[i];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) sum -= v[l++];</span><br><span class="line">        ans += l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segments-with-Small-Set"><a href="#Segments-with-Small-Set" class="headerlink" title="Segments with Small Set"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/E">Segments with Small Set</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足区间中至多 $k$ 个不同元素的区间个数。</p>
<p>$a_i\leq 10^5$</p>
</div>

<p>这题值域突然变小，应该也是暗示直接用空间换时间吧。</p>
<p>惯用手法了，莫队也是这么统计的。</p>
<p>要是值域变大了，可以用<code>gp_hash_table&lt;long long,int&gt;</code>或者<code>unordered_set&lt;long long&gt;</code> ，这样还是线性的。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 22:03:30</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> Tms[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Tms[v[i]]++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++num &gt; k) &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (--Tms[v[l++]] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segments-with-Small-Spread"><a href="#Segments-with-Small-Spread" class="headerlink" title="Segments with Small Spread"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/F">Segments with Small Spread</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中满足 $\max\limits_{l}^{r}{a_i}-\min\limits_{l}^{r}{a_i}\leq k$ 的区间个数。</p>
</div>

<p>可以直接用单调队列，分别维护递增和递减的队列，每次取出队首做差来判断是否符合条件，最后计算区间的个数。</p>
<details class="note success no-icon"><summary><p>单调队列 Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-25 22:08:02</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/status</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; Mn, Mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Mn.<span class="built_in">empty</span>() &amp;&amp; v[Mn.<span class="built_in">back</span>()] &gt; v[i]) Mn.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span> (!Mx.<span class="built_in">empty</span>() &amp;&amp; v[Mx.<span class="built_in">back</span>()] &lt; v[i]) Mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        Mn.<span class="built_in">push_back</span>(i), Mx.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (v[Mx.<span class="built_in">front</span>()] - v[Mn.<span class="built_in">front</span>()] &gt; k) &#123;</span><br><span class="line">            l++;</span><br><span class="line">            <span class="keyword">while</span> (Mx.<span class="built_in">front</span>() &lt; l) Mx.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">while</span> (Mn.<span class="built_in">front</span>() &lt; l) Mn.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>theory中给了个很巧妙的做法，我认为它的功能更强大。</p>
<p>不过它的巧妙之处通过这道题不太好体现，它的具体原理我在下一道题阐述。</p>
<details class="note success no-icon"><summary><p>std Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 16:33:50</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v, mn = &#123;LLONG_MAX&#125;, mx = &#123;LLONG_MIN&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">        mn.<span class="built_in">push_back</span>(std::<span class="built_in">min</span>(mn.<span class="built_in">back</span>(), x));</span><br><span class="line">        mx.<span class="built_in">push_back</span>(std::<span class="built_in">max</span>(mx.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mx.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mn.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = v.<span class="built_in">back</span>();</span><br><span class="line">        v.<span class="built_in">pop_back</span>();</span><br><span class="line">        mn.<span class="built_in">pop_back</span>();</span><br><span class="line">        mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">max</span>(s1.<span class="built_in">max</span>(), s2.<span class="built_in">max</span>()) - <span class="built_in">min</span>(s1.<span class="built_in">min</span>(), s2.<span class="built_in">min</span>()) &gt; k) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += i - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Coprime-Segment"><a href="#Coprime-Segment" class="headerlink" title="Coprime Segment"></a><a href="https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G">Coprime Segment</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中的满足 $gcd(a_l,\cdots,a_r)=1$ 的最小区间长度。</p>
</div>

<p>至少目前来看我还没找到同复杂度的做法。</p>
<p>鉴于求gcd本身带有一个 $\log{a_i}$ 的复杂度，所以该做法的复杂度是 $O(n\log{\max(a_i)})$ 的。</p>
<p>言归正传。</p>
<p>我们发现区间gcd和区间min/max类似，在删除左端点时，无法 $O(1)$ 更新出新区间的相应值（而区间sum、区间中不同元素的个数就可以，因此它们的维护方法很simple）。</p>
<p>而与删除左端点相反，在加入右端点时，又可以 $O(1)$ 更新出新区间的对应值。</p>
<p>更具体地说，这些计算都满足区间结合律，可以将大区间拆成若干小区间，分别求值后再 $O(1)$ 合并。</p>
<p>总结来说，该计算符合区间加法（即结合律），但不符合区间减法。</p>
<p>因此如果我们能解决区间减法的问题，就能实现 $O(1)$ 转移。</p>
<p>记 $f[l:r]$ 为 $f(a_l,a_{l+1},\cdots,a_r)$，$f$ 是gcd、min/max等计算。</p>
<p>既然删掉 $a_l$ 后，$f[l+1:r]$ 的值无法通过 $f[l:r]$ 直接计算出来，一个直观地想法就是将每一步的值预处理存起来，需要的时候直接取。</p>
<p>将区间 $[l,r]$ 分成 $[l,m],[m+1,r]$（$m$ 只用来推式子，实际上不需要求）。用一个栈 $s_1$ 保存 $f[m:m],f[m-1:m],\cdots,f[l:m]$，另一个栈 $s_2$ 保存 $f[m+1:m+1],\cdots,f[m+1:r]$ 。则 $f[l:r]=f(f[l:m],f[m+1:r])$，即 $s_1$ 和 $s_2$ 的栈顶做 $f$。而删除 $a_l$ 时，弹出 $s_1$ 的栈顶，新栈顶就是 $f[l+1:m]$ ，而 $f[l+1:r]$ 仍然可以通过 $s1,s2$ 的栈顶做 $f$ 求出。</p>
<p>那么怎么维护 $s_1$ 和 $s_2$ 呐？</p>
<p>$s_2$ 很好维护，当 $r$ 移动时，向 $s_2$ 栈顶插入 $f(s2.top,a_{r+1})$ 即可得到新栈顶 $f[m+1:r+1]$ 。</p>
<p>但 $s_1$ 并不好维护，因为它是从 $m\rightarrow l$ 反着的。</p>
<p>考虑什么时候 $s_1$ 为空，是 $l=m+1$ 时，即左区间已经没用了，需要重新划分出两个子区间。此时我们将 $s_2$ 逐个弹出，并插入到 $s_1$ 中。那么 $s_1$ 的栈底是 $a_r$，即 $f[r:r]$，然后是 $f(f[r:r],a_{r-1})$，即$f[r-1:r]$，当 $s_2$ 弹空时， $s_1$ 的栈顶是 $f[m+1:r]$，而新的 $l$ 就是 $m+1$ ，新的 $m$ 就是 $r$，也就实现了反着存储。此时的 $s_1$ 从栈底到栈顶形如：$f[r:r],f[r-1:r],\cdots f[m+1:r]$。</p>
<p>注意到 $s_1,s_2$ 的弹出和插入最多各执行 $n$ 次，因此实现了平均 $O(1)$ 的复杂度。</p>
<p>求当前区间 $[l,r]$ 是否满足条件时，计算 $gcd(s1.top,s2.top)$，若是 $1$，则 $f[l:r]=1$，<code>ans=min(ans,r-l+1)</code>。然后移动 $l$，将 $s_1$ 栈顶弹出。若此时 $s_1$ 为空，则将 $s_2$ 逐个弹出，插入 $s_1$ 中（重新划分区间），移动 $l$ 直到gcd不是1未知。然后移动 $r$，在 $s_2$ 中插入 $f(s2.top,a_r)$。重复上述过程，直到 $r$ 移动超过序列末尾结束。</p>
<p>聪明的你也应该发现了，栈中只存储 $f$ 值没法完成从 $s_2$ 弹出栈顶再插入 $s_1$ 的操作。因此栈中实际上存储的是一堆pair，除了 $f$ 还有对应的 $a$ 值。每次向 $s_2$ 中插入 $a_r$ 时，插入的是 $(a_r,f(s_2.top.f,a_r))$。而将 $s_2$ 的栈顶 $(a_q,f[p:q])$弹出并插入到 $s_1$ 时，插入的是 $(a_q,f(f[p:q],s1.top.f))$。</p>
<p>不过这些都是代码实现的细节，只要理解了原理，看看代码也就知道如何实现了。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-26 14:25:57</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/2/practice/contest/307093/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; stk, val = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line">        val.<span class="built_in">push_back</span>(__gcd(val.<span class="built_in">back</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = stk.<span class="built_in">back</span>();</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        val.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span> (__gcd(s1.<span class="built_in">top</span>(), s2.<span class="built_in">top</span>()) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, i - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>感觉都是two pointers method的简单应用。但是我在其中某些题中用到了<code>sort</code>（？），<del><mark class="label warning">以及最后一题就是个暴力背包。这让我有些迷惑，不知道是不是我假了。</mark></del></p>
<mark class="label info">upd：学会了如何bitset优化完全背包，于是就可以two pointers优化了。</mark>

<h3 id="Looped-Playlist"><a href="#Looped-Playlist" class="headerlink" title="Looped Playlist"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/A">Looped Playlist</a></h3><div class="note info"><p>给定一个长为 $n$ 的数组 $a$，求最短的区间，使得区间和至少为 $s$。</p>
<p>不同点在于数组是首尾相连不断重复的，因此区间长度可以超过 $n$。</p>
</div>

<p>先预处理 $r=0$ 时， $l$ 的位置和区间长度，然后正常做就好。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 10:43:31</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        total += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = (p - v[<span class="number">0</span>]) / total * n + <span class="number">1</span>, sum = (p - v[<span class="number">0</span>]) / total * total + v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= p) l = pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            sum += v[i];</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= p) &#123;</span><br><span class="line">                pos = l = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len = ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sum += v[r];</span><br><span class="line">        ++len;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= p) &#123;</span><br><span class="line">            sum -= v[l++];</span><br><span class="line">            l %= n;</span><br><span class="line">            --len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len + <span class="number">1</span> &lt; ans) &#123;</span><br><span class="line">            pos = (l - <span class="number">1</span> + n) % n;</span><br><span class="line">            ans = len + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %lld\n&quot;</span>, pos + <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Total-Length"><a href="#Total-Length" class="headerlink" title="Total Length"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/B">Total Length</a></h3><div class="note info"><p>给定长为$n$的序列 ，求 $a$ 中的满足区间和至少为 $s$ 的区间长度之和。</p>
</div>

<p>就答案统计改一下就行。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:29:15</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sum += v[r];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) sum -= v[l++];</span><br><span class="line">        ans += <span class="number">1ll</span> * (r - l + <span class="number">2</span>) * (r - l + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Che-city"><a href="#Che-city" class="headerlink" title="Che city"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/C">Che city</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a$，求 $a$ 中有多少对 $(a_i,a_j)(i &lt; j)$，满足 $a_j-a_i\geq r$。保证 $a_i$ 单调递增。</p>
</div>

<p>没啥新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:43:49</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    v.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1ll</span> * n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; ++r) &#123;</span><br><span class="line">        <span class="keyword">while</span> (v[r] - v[l] &gt; s) ++l;</span><br><span class="line">        ans -= r - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Stylish-clothes"><a href="#Stylish-clothes" class="headerlink" title="Stylish clothes"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/D">Stylish clothes</a></h3><div class="note info"><p>给定四个序列 $a,b,c,d$，求 $\min{\max{a_i,b_j,c_k,d_p}-\min{a_i,b_j,c_k,d_p}}$ 。</p>
</div>

<p>我觉得应该排序是没法避免的。。</p>
<p>将 $a,b,c,d$ 合并成一个序列 $v$，$v_i$ 保存了它的值和它的类别（$a,b,c,d$），并按照值排序。</p>
<p>问题转换为，求合法的区间 $[l,r]$ 的 $v_r-v_l$ 最小，一个区间合法若其中元素的类别 $a,b,c,d$ 至少各出现一次。</p>
<p>那这就是裸的two pointers了。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 11:56:05</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>], b[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, x; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;x, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, num = <span class="number">0</span>, ans = INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> ll = <span class="number">0</span>, rr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; v.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b[v[r].second]++) ++num;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (b[v[l].second] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            --b[v[l++].second];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; v[r].first - v[l].first) &#123;</span><br><span class="line">            ans = v[r].first - v[l].first;</span><br><span class="line">            ll = l, rr = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[v[ll].second] = v[ll].first;</span><br><span class="line">    a[v[rr].second] = v[rr].first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ll + <span class="number">1</span>; i &lt; rr; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[v[i].second]) a[v[i].second] = v[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Knapsack-on-a-Segment"><a href="#Knapsack-on-a-Segment" class="headerlink" title="Knapsack on a Segment"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/E">Knapsack on a Segment</a></h3><div class="note info"><p>给定长为 $n$ 的序列 $a,b$ ，求 满足 $\sum\limits_{l}^{r}{b_i}\geq s$ 的最大 $\sum\limits_{l}^{r}{c_i}$。</p>
</div>

<p>没啥新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 12:48:36</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; w, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">    w.<span class="built_in">resize</span>(n);</span><br><span class="line">    c.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : w) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : c) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, sumw = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sumc = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        sumw += w[r];</span><br><span class="line">        sumc += c[r];</span><br><span class="line">        <span class="keyword">while</span> (sumw &gt; s) &#123;</span><br><span class="line">            sumw -= w[l];</span><br><span class="line">            sumc -= c[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sumc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Card-Substrings"><a href="#Card-Substrings" class="headerlink" title="Card Substrings"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/F">Card Substrings</a></h3><div class="note info"><p>给定长为 $n$ 的字符串 $s$ 和长为 $m$ 的字符串 $t$，求其中有多少个子串，满足该子串可以由 $t$ 的若干个字符凑出来。</p>
</div>

<p>毫无新意。。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 17:59:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>, &amp;n, &amp;c, s);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>, numa = <span class="number">0</span>, numb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[r] == <span class="string">&#x27;a&#x27;</span>) ++numa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">            ++numb;</span><br><span class="line">            sum += numa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                sum -= numb;</span><br><span class="line">                --numa;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == <span class="string">&#x27;b&#x27;</span>) --numb;</span><br><span class="line">            ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Not-Very-Rude-Substring"><a href="#Not-Very-Rude-Substring" class="headerlink" title="Not Very Rude Substring"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G">Not Very Rude Substring</a></h3><div class="note info"><p>给定一个长为 $n$ 的字符串 $s$。定义字符串 $t$ 的值为有多少种方法删除 $|t|-2$ 个字符后，剩下 $ab$。求 $s$ 的最长的子串，满足该子串的值不超过 $x$。</p>
</div>

<p>记当前有 $x$ 个 $a$，$y$ 个 $b$。若 $r$ 移动后，插入了一个 $b$，则字符串的值增加了 $x$，若 $l$ 移动后删除了 $a$。则字符串的值减少了 $y$。</p>
<p>然后就正常做two pointers即可。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 17:59:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>, &amp;n, &amp;c, s);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>, numa = <span class="number">0</span>, numb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[r] == <span class="string">&#x27;a&#x27;</span>) ++numa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">            ++numb;</span><br><span class="line">            sum += numa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                sum -= numb;</span><br><span class="line">                --numa;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == <span class="string">&#x27;b&#x27;</span>) --numb;</span><br><span class="line">            ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="A-B-Knapsack"><a href="#A-B-Knapsack" class="headerlink" title="A-B Knapsack"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/H">A-B Knapsack</a></h3><div class="note info"><p>给定两个序列 $a$ 和 $b$。$a$ 中每个数的“价值”为 $x$，$b$ 中的为 $y$。在 $a,b$ 中选择若干数，使它们总价值不超过 $c$ 的情况下最大化它们的和。 </p>
</div>

<p>有点懵逼，可以不排序吗？</p>
<p>我的做法是 $a,b$ 分别排序后，枚举 $a$ 拿前 $n$ 个，然后 $b$ 拿 $\lfloor\frac{c-n\times x}{y}\rfloor$ 个。</p>
<p>不过硬要说，这个 $a,b$ 的可选区间也算是双指针吧。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-27 18:09:00</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/H</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, a, b;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; va, vb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;a, &amp;b);</span><br><span class="line">    va.<span class="built_in">resize</span>(n);</span><br><span class="line">    vb.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : va) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : vb) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">sort</span>(va.<span class="built_in">begin</span>(), va.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(vb.<span class="built_in">begin</span>(), vb.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> r = <span class="built_in">min</span>(n, s / a) - <span class="number">1</span>, sum = (r + <span class="number">1</span>) * a;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; ++i) ans += va[i];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cur = ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">min</span>(m, s / b); ++l) &#123;</span><br><span class="line">        cur += vb[l];</span><br><span class="line">        sum += b;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) &#123;</span><br><span class="line">            sum -= a;</span><br><span class="line">            cur -= va[r--];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="Segment-with-the-Required-Subset"><a href="#Segment-with-the-Required-Subset" class="headerlink" title="Segment with the Required Subset"></a><a href="https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I">Segment with the Required Subset</a></h3><div class="note info"><p>给定一个长为 $n$ 的序列 $a$。求 $a$ 中最短的区间，满足该区间存在一个子集，使得它的和恰好为 $s$。</p>
<p>$n\leq 10^5$</p>
<p>$m\leq 1000$</p>
</div>

<p>唯一有用的题终于来了，顺便完结撒花预告！</p>
<p>我开始还不是two pointers做的，就是背包的暴力转移。果然还是万能的UOJ，从大佬们只言片语的指点中，我收获颇丰。</p>
<p>首先，直接背包的 $O(nm)$ 做法是很显然的。</p>
<p>做背包转移的时候，记录所用数集合的左端点的最大值。当恰好凑出 $m$ 的时候，就能算出来对应区间的长度，取最小值即可。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 14:34:28</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, F;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    F.<span class="built_in">resize</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">fill_n</span>(F.<span class="built_in">begin</span>(), m, <span class="number">-1e9</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i] == m) ans = <span class="number">1</span>;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, i - F[m - v[i]] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt; v[i]; --j) &#123;</span><br><span class="line">            F[j] = <span class="built_in">max</span>(F[j], F[j - v[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        F[v[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>本以为都 $O(nm)$ 了还能更快？直到我发现bitset优化完全背包，复杂度可以降到 $O(\frac{nm}{w})$。</p>
<p>bitset优化背包其实原理很simple，它用一个bitset $bt$ 来表示当前能凑出的所有数集合。那么当加入新数 $x$ 的时候，新的状态 $nbt=bt|bt&lt;&lt;x$，$bt$ 为不使用 $x$ 的原状态，$bt&lt;&lt;x$ 为使用 $x$ 后的新状态（即所有状态都+x，用bitset表示就是左移了 $x$ 位），二者的并就是新状态。</p>
<p>如果用数组 $a[i]=0/1$ 表示和为 $i$ 是否能凑出，然后由 $a[i]=1$ 更新 $a[i+x]=1$ 的方法来更新，单次更新的复杂度是 $O(m)$ 的，使用bitset做位运算则只需要 $O(\frac{m}{w})$。</p>
<p>我们不难发现，bitset合并也是一个典型的符合区间加法，但是不符合区间减法的操作。我们可以通过对原bitset做位运算，得到插入 $x$ 后的新bitset，但是我们难以通过原bitset，计算出删除 $x$ 后的新的bitset。</p>
<p>而区间背包的合法区间也满足two pointers的要求，随着 $r$ 递增，$l$ 不减。</p>
<p>因此我们可以使用Step 2中介绍的“双栈”做法，解决掉无法处理区间减法的问题。</p>
<p>但是与之前不同的是，以前每个区间经过某一个运算后得到的是一个数（例如gcd/min/max），那么合并两个区间的情况和往区间插入一个新数的情况相同，都是对两个数进行运算（也可以认为一个数就是长为 $1$ 的区间，所以还是区间合并）。而在本题中，合并两个区间实际上是合并两个bitset，而插入一个数只是对一个bitset做位运算，是不同的，因此我们还需要清楚如何合并两个区间的bitset。</p>
<p>一个naive的做法就是将其中一个bitset的所有值为 $1$ 的位取出，然后依次在第二个bitset上做位运算。但是这样合并的复杂度是 $O(\frac{m^2}{w})$ 的，整体复杂度会达到 $O(\frac{nm^2}{w})$ ，甚至不如暴力，因此我们难以接受。</p>
<p>但是我们发现合并两个bitset其实不需要真的合并，而只是用来判断能否凑出 $m$。</p>
<p>设其中一个bitset的第 $x$ 位为 $1$，若另一个bitset的第 $m-x$ 位也为 $1$，那么这两位就能恰好凑出 $m$。</p>
<p>因此我们想到了反向存储，对每个区间，不仅用一个bitset存储它们能凑出的数集合，还用另一个bitset存储它的“补集”。</p>
<p>具体来说，设初始区间为空，正向存储的初始bitset的第 $0$ 位为 $1$。插入 $x$ 后，将第 $0+x$ 位置为 $1$。</p>
<p>而我们反向存储时，初始bitset的第 $m$ 位为 $1$，表示还需要 $m$ 就能凑出 $m$，插入 $x$ 后，将第 $m-x$ 位置为 $1$。依次类推，若第 $a$ 位为 $1$，插入 $x$ 后，第 $a-x$ 位为1。这也可以用为位运算表示，通过左移 $x$ 位实现。即 $nbt=bt|bt&gt;&gt;x$。</p>
<p>那么此时，我只需要对一个区间的正向bitset和另一个区间的反向bitset做AND操作，若存在第 $x$ 位是 $1$，则说明两个bitset的第 $x$ 位都是 $1$。正向存储第 $x$ 位为 $1$ 表示它能凑出 $x$，反向存储第 $x$ 为 $1$ 表示它还要 $x$ 就能凑出 $m$，二者一拼好凑出 $m$。</p>
<p>因此思路就很清晰了。其实为了偷懒，我们不需要把正向和反向的两个bitset都存储。我们只需要让第一个栈存储正向的bitset，第二个栈存储反向的栈即可。</p>
<p>剩下的就是正常的two pointers操作了，复杂度 $O(\frac{nm}{w})$。换言之，$n,m$ 开到 $50000$ 都能跑。</p>
<details class="note success no-icon"><summary><p>Code</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @date:2021-04-28 16:14:21</span></span><br><span class="line"><span class="comment"> * @source:https://codeforces.com/edu/course/2/lesson/9/3/practice/contest/307094/problem/I</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    stack&lt;bitset&lt;MAXM&gt;&gt; val;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bitset&lt;MAXM&gt; b = <span class="number">0</span>;</span><br><span class="line">        b[x] = <span class="number">1</span>;</span><br><span class="line">        val.<span class="built_in">push</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t) val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &lt;&lt; x);</span><br><span class="line">        <span class="keyword">else</span> val.<span class="built_in">push</span>(val.<span class="built_in">top</span>() | val.<span class="built_in">top</span>() &gt;&gt; x);</span><br><span class="line">        v.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.<span class="built_in">top</span>();</span><br><span class="line">        val.<span class="built_in">pop</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bitset&lt;MAXM&gt; <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s2.<span class="built_in">empty</span>()) s1.<span class="built_in">push</span>(s2.<span class="built_in">pop</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, ans = n + <span class="number">1</span>;</span><br><span class="line">    s1.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">    s2.<span class="built_in">init</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">        s2.<span class="built_in">push</span>(v[r], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> ((s1.<span class="built_in">top</span>() &amp; s2.<span class="built_in">top</span>()).<span class="built_in">any</span>()) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>ITMO Academy&amp;#58; pilot course</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
</search>
